Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 1
dos32a.asm



      1					 ;
      2					 ; Copyright (C) 1996-2002 Supernar Systems, Ltd. All rights reserved.
      3					 ;
      4					 ; Redistribution  and	use  in	source and  binary  forms, with	or without
      5					 ; modification,  are permitted	provided that the following conditions are
      6					 ; met:
      7					 ;
      8					 ; 1.  Redistributions	of  source code	 must  retain  the above copyright
      9					 ; notice, this	list of	conditions and the following disclaimer.
     10					 ;
     11					 ; 2.  Redistributions	in binary form	must reproduce the above copyright
     12					 ; notice,  this  list of conditions and  the  following disclaimer in the
     13					 ; documentation and/or	other materials	provided with the distribution.
     14					 ;
     15					 ; 3. The end-user documentation included with the redistribution, if any,
     16					 ; must	include	the following acknowledgment:
     17					 ;
     18					 ; "This product uses DOS/32 Advanced DOS Extender technology."
     19					 ;
     20					 ; Alternately,	 this acknowledgment may appear	in the software	itself,	if
     21					 ; and wherever	such third-party acknowledgments normally appear.
     22					 ;
     23					 ; 4.  Products	derived	from this software  may	not be called "DOS/32A"	or
     24					 ; "DOS/32 Advanced".
     25					 ;
     26					 ; THIS	 SOFTWARE AND DOCUMENTATION IS PROVIDED	 "AS IS" AND ANY EXPRESSED
     27					 ; OR  IMPLIED	WARRANTIES,  INCLUDING,	BUT  NOT  LIMITED  TO, THE IMPLIED
     28					 ; WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     29					 ; DISCLAIMED.	IN  NO	EVENT SHALL THE	 AUTHORS  OR  COPYRIGHT	HOLDERS	BE
     30					 ; LIABLE  FOR	ANY DIRECT, INDIRECT,  INCIDENTAL,  SPECIAL, EXEMPLARY,	OR
     31					 ; CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT NOT	LIMITED	TO, PROCUREMENT	OF
     32					 ; SUBSTITUTE  GOODS  OR  SERVICES;  LOSS OF  USE,  DATA,  OR  PROFITS;	OR
     33					 ; BUSINESS  INTERRUPTION) HOWEVER CAUSED AND  ON ANY THEORY OF	LIABILITY,
     34					 ; WHETHER IN CONTRACT,	STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE	OR
     35					 ; OTHERWISE)  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN	IF
     36					 ; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     37					 ;
     38					 ;
     39
     40					 ;*****************************************************************************
     41					 ; DOS/32 Advanced DOS Extender	master Client file, implements program entry
     42					 ; point and includes the necessary client files from .\TEXT\CLIENT\.
     43					 ;
     44					 ;*****************************************************************************
     45
     46		  =0080			 STACKSIZE	 =	 0080h	 ; size	of stack (in para)
     47		  =0040			 INTTABSIZE	 =	 0040h	 ; size	of copy	of interrupt table (in para)
     48
     49	    0000			 _ID32	 segment para public use16 'CODE0'
     50	    0000			 _ID32	 ends
     51	    0000			 _KERNEL segment para public use16 'CODE1'
     52	    0000			 _KERNEL ends
     53	    0000			 _TEXT16 segment para public use16 'CODE2'
     54	    0000			 _TEXT16 ends
     55	    0000			 _STACK	 segment para stack use16 'STACK'
     56	    0000			 _STACK	 ends
     57
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 2
dos32a.asm



     58					 extrn	 pm32_info	 :far
     59					 extrn	 pm32_init	 :far
     60					 extrn	 pm32_data	 :byte
     61
     62					 include TEXT\include.asm
1    63					 ;
1    64					 ; Copyright (C) 1996-2002 Supernar Systems, Ltd. All rights reserved.
1    65					 ;
1    66					 ; Redistribution  and	use  in	source and  binary  forms, with	or without
1    67					 ; modification,  are permitted	provided that the following conditions are
1    68					 ; met:
1    69					 ;
1    70					 ; 1.  Redistributions	of  source code	 must  retain  the above copyright
1    71					 ; notice, this	list of	conditions and the following disclaimer.
1    72					 ;
1    73					 ; 2.  Redistributions	in binary form	must reproduce the above copyright
1    74					 ; notice,  this  list of conditions and  the  following disclaimer in the
1    75					 ; documentation and/or	other materials	provided with the distribution.
1    76					 ;
1    77					 ; 3. The end-user documentation included with the redistribution, if any,
1    78					 ; must	include	the following acknowledgment:
1    79					 ;
1    80					 ; "This product uses DOS/32 Advanced DOS Extender technology."
1    81					 ;
1    82					 ; Alternately,	 this acknowledgment may appear	in the software	itself,	if
1    83					 ; and wherever	such third-party acknowledgments normally appear.
1    84					 ;
1    85					 ; 4.  Products	derived	from this software  may	not be called "DOS/32A"	or
1    86					 ; "DOS/32 Advanced".
1    87					 ;
1    88					 ; THIS	 SOFTWARE AND DOCUMENTATION IS PROVIDED	 "AS IS" AND ANY EXPRESSED
1    89					 ; OR  IMPLIED	WARRANTIES,  INCLUDING,	BUT  NOT  LIMITED  TO, THE IMPLIED
1    90					 ; WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
1    91					 ; DISCLAIMED.	IN  NO	EVENT SHALL THE	 AUTHORS  OR  COPYRIGHT	HOLDERS	BE
1    92					 ; LIABLE  FOR	ANY DIRECT, INDIRECT,  INCIDENTAL,  SPECIAL, EXEMPLARY,	OR
1    93					 ; CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT NOT	LIMITED	TO, PROCUREMENT	OF
1    94					 ; SUBSTITUTE  GOODS  OR  SERVICES;  LOSS OF  USE,  DATA,  OR  PROFITS;	OR
1    95					 ; BUSINESS  INTERRUPTION) HOWEVER CAUSED AND  ON ANY THEORY OF	LIABILITY,
1    96					 ; WHETHER IN CONTRACT,	STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE	OR
1    97					 ; OTHERWISE)  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN	IF
1    98					 ; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
1    99					 ;
1   100					 ;
1   101
1   102		  = 0Dh, 0Ah		 cr	 equ 0Dh, 0Ah
1   103		  = 0Dh, 0Ah ,0		 cre	 equ 0Dh, 0Ah ,0
1   104					 offs	 equ offset
1   105		  = byte ptr		 bptr	 equ byte ptr
1   106		  = word ptr		 wptr	 equ word ptr
1   107		  = dword ptr		 dptr	 equ dword ptr
1   108
    109
    110
    111							 .386p
    112							 LOCALS
    113							 NOJUMPS
    114					 ;=============================================================================
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 3
dos32a.asm



    115	    0000			 _ID32	 segment para public use16 'CODE0'
    116		  =0010			 _ID32_SIZE=16		 ; size	excluding 'ID32' signature
    117					 ;-----------------------------------------------------------------------------
    118	    0000  49 44	33 32		 db	 'ID32'		 ; ID signature
    119	    0004  3F			 db	 00111111b	 ; KERNEL misc.	bits:
    120								 ;   bit 0: 0=test DPMI/VCPI, 1=VCPI/DPMI	 /1=def
    121								 ;   bit 1: 0=exception	control	off, 1=on	 /1=def
    122								 ;   bit 2: 0=VCPI smart page alloc off, 1=on	 /1=def
    123								 ;   bit 3: 0=VCPI+XMS alloc scheme off, 1=on	 /1=def
    124								 ;   bit 4: 0=trap software INTs off, 1=on	 /1=def
    125								 ;   bit 5: 0=extended blocks check off, 1=on	 /1=def
    126								 ;   bit 6: reserved				 /0=def
    127								 ;   bit 7: 0=ignore 4G	extensions off,	1=on	 /0=def
    128	    0005  40			 db	 64		 ; Max.	number of page tables under VCPI	 /256MB
    129	    0006  02			 db	 2		 ; Max.	number of page tables mem_mapping	 /4MB
    130	    0007  10			 db	 16		 ; Max.	number of real mode callbacks		 /16
    131	    0008  0100			 dw	 256		 ; Max.	number of Selectors under VCPI/XMS/raw	 /256
    132	    000A  08			 db	 8		 ; Real	mode Stack nesting
    133	    000B  08			 db	 8		 ; Protected mode Stack	nesting
    134	    000C  0020			 dw	 20h		 ; Real	mode Stack length, (in para)
    135	    000E  0020			 dw	 20h		 ; Protected mode Stack	length,	(in para)
    136	    0010  FFFFFFFF		 dd	 0FFFFFFFFh	 ; Max.	extended memory	to allocate in bytes
    137					 ;-----------------------------------------------------------------------------
    138	    0014  3F			 db	 00111111b	 ; DOS/32A misc. bits:
    139								 ;   bit 0: 0=console output off, 1=on		 /1=def
    140								 ;   bit 1: 0=sound generation off, 1=on	 /1=def
    141								 ;   bit 2: 0=restore INT table	off, 1=on	 /1=def
    142								 ;   bit 3: 0=report modified INTs off,	1=on	 /1=def
    143								 ;   bit 4: 0=load 16 in lowmem	off, 1=on	 /1=def
    144								 ;   bit 5: 0=force load 16 low	off, 1=on	 /1=def
    145								 ;   bit 6: 0=cls on exception off, 1=on	 /0=def
    146								 ;   bit 7: 0=null-ptr protect off, 1=on	 /0=def
    147					 If EXEC_TYPE eq 0
    148	    0015  09			 db	 00001001b	 ; DOS/32A Pro second misc. bits
    149					 Else
    150					 db	 10001001b	 ; DOS/32A Beta	second misc. bits
    151					 Endif
    152								 ;   bit 0: 0=config by	enironment off,	1=on	 /1=def
    153								 ;   bit 1: 0=focus on this VM off, 1=on	 /0=def
    154								 ;   bit 2: 0=align objects on PARA, 1=PAGE	 /0=def
    155								 ;   bit 3: 0=show copyright off, 1=on		 /1=def
    156								 ;   bit 4: 0=verbose mode off,	1=on		 /0=def
    157								 ;   bit 5: reserved				 /0=def
    158								 ;   bit 6: 0=lock configuration off, 1=on	 /*
    159								 ;   bit 7: 0=Professional, 1=Beta		 /*
    160	    0016  0200			 dw	 0200h		 ; DOS INT 21h buffer in low memory (in	para)	 /8 KB
    161	    0018  070A			 dw	 070Ah		 ; Internal Version of DOS/32A:	db low,high
    162	    001A  0000			 dw	 0000h		 ; Reserved (v7.0+)
    163					 ;-----------------------------------------------------------------------------
    164					 include TEXT\oemtitle.asm
1   165					 ;
1   166					 ; Copyright (C) 1996-2002 Supernar Systems, Ltd. All rights reserved.
1   167					 ;
1   168					 ; Redistribution  and	use  in	source and  binary  forms, with	or without
1   169					 ; modification,  are permitted	provided that the following conditions are
1   170					 ; met:
1   171					 ;
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 4
dos32a.asm



1   172					 ; 1.  Redistributions	of  source code	 must  retain  the above copyright
1   173					 ; notice, this	list of	conditions and the following disclaimer.
1   174					 ;
1   175					 ; 2.  Redistributions	in binary form	must reproduce the above copyright
1   176					 ; notice,  this  list of conditions and  the  following disclaimer in the
1   177					 ; documentation and/or	other materials	provided with the distribution.
1   178					 ;
1   179					 ; 3. The end-user documentation included with the redistribution, if any,
1   180					 ; must	include	the following acknowledgment:
1   181					 ;
1   182					 ; "This product uses DOS/32 Advanced DOS Extender technology."
1   183					 ;
1   184					 ; Alternately,	 this acknowledgment may appear	in the software	itself,	if
1   185					 ; and wherever	such third-party acknowledgments normally appear.
1   186					 ;
1   187					 ; 4.  Products	derived	from this software  may	not be called "DOS/32A"	or
1   188					 ; "DOS/32 Advanced".
1   189					 ;
1   190					 ; THIS	 SOFTWARE AND DOCUMENTATION IS PROVIDED	 "AS IS" AND ANY EXPRESSED
1   191					 ; OR  IMPLIED	WARRANTIES,  INCLUDING,	BUT  NOT  LIMITED  TO, THE IMPLIED
1   192					 ; WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
1   193					 ; DISCLAIMED.	IN  NO	EVENT SHALL THE	 AUTHORS  OR  COPYRIGHT	HOLDERS	BE
1   194					 ; LIABLE  FOR	ANY DIRECT, INDIRECT,  INCIDENTAL,  SPECIAL, EXEMPLARY,	OR
1   195					 ; CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT NOT	LIMITED	TO, PROCUREMENT	OF
1   196					 ; SUBSTITUTE  GOODS  OR  SERVICES;  LOSS OF  USE,  DATA,  OR  PROFITS;	OR
1   197					 ; BUSINESS  INTERRUPTION) HOWEVER CAUSED AND  ON ANY THEORY OF	LIABILITY,
1   198					 ; WHETHER IN CONTRACT,	STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE	OR
1   199					 ; OTHERWISE)  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN	IF
1   200					 ; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
1   201					 ;
1   202					 ;
1   203
1   204					 ;
1   205					 ; This	file is	updated	automatically by build.exe, do not modify!
1   206					 ;
1   207	    001C  44 4F	53 2F 33 32 41+	 db	 'DOS/32A'							 ,0,0
    208		  00 00
1   209	    0025  52 38	2D 30 37 2E 30+	 db	 'R8-07.0101.2002'						 ,0
    210		  31 30	31 2E 32 30 30+
    211		  32 00
1   212	    0035  28 43	29 20 31 39 39+	 db	 '(C) 1996-98, 2002 by Narech Koumar.'				 ,0
    213		  36 2D	39 38 2C 20 32+
    214		  30 30	32 20 62 79 20+
    215		  4E 61	72 65 63 68 20+
    216		  4B 6F	75 6D 61 72 2E+
    217		  00
1   218	    0059  41 6C	6C 20 52 69 67+	 db	 'All Rights Reserved.'						 ,0
    219		  68 74	73 20 52 65 73+
    220		  65 72	76 65 64 2E 00
1   221	    006E  31 32	2F 30 35 2F 32+	 db	 ??date								 ,0
    222		  31 00
1   223	    0077  31 36	3A 33 31 3A 33+	 db	 ??time								 ,0
    224		  37 00
1   225
    226	    0080			 _ID32	 ends
    227
    228
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 5
dos32a.asm



    229
    230
    231
    232
    233
    234
    235
    236					 ;=============================================================================
    237	    0000			 _TEXT16 segment para public use16 'CODE2'
    238						 assume	 cs:_TEXT16, ds:_TEXT16
    239						 org 0
    240
    241	    0000			 @text16_beg	 label byte
    242
    243					 include TEXT\CLIENT\config.asm
1   244					 ;
1   245					 ; Copyright (C) 1996-2002 Supernar Systems, Ltd. All rights reserved.
1   246					 ;
1   247					 ; Redistribution  and	use  in	source and  binary  forms, with	or without
1   248					 ; modification,  are permitted	provided that the following conditions are
1   249					 ; met:
1   250					 ;
1   251					 ; 1.  Redistributions	of  source code	 must  retain  the above copyright
1   252					 ; notice, this	list of	conditions and the following disclaimer.
1   253					 ;
1   254					 ; 2.  Redistributions	in binary form	must reproduce the above copyright
1   255					 ; notice,  this  list of conditions and  the  following disclaimer in the
1   256					 ; documentation and/or	other materials	provided with the distribution.
1   257					 ;
1   258					 ; 3. The end-user documentation included with the redistribution, if any,
1   259					 ; must	include	the following acknowledgment:
1   260					 ;
1   261					 ; "This product uses DOS/32 Advanced DOS Extender technology."
1   262					 ;
1   263					 ; Alternately,	 this acknowledgment may appear	in the software	itself,	if
1   264					 ; and wherever	such third-party acknowledgments normally appear.
1   265					 ;
1   266					 ; 4.  Products	derived	from this software  may	not be called "DOS/32A"	or
1   267					 ; "DOS/32 Advanced".
1   268					 ;
1   269					 ; THIS	 SOFTWARE AND DOCUMENTATION IS PROVIDED	 "AS IS" AND ANY EXPRESSED
1   270					 ; OR  IMPLIED	WARRANTIES,  INCLUDING,	BUT  NOT  LIMITED  TO, THE IMPLIED
1   271					 ; WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
1   272					 ; DISCLAIMED.	IN  NO	EVENT SHALL THE	 AUTHORS  OR  COPYRIGHT	HOLDERS	BE
1   273					 ; LIABLE  FOR	ANY DIRECT, INDIRECT,  INCIDENTAL,  SPECIAL, EXEMPLARY,	OR
1   274					 ; CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT NOT	LIMITED	TO, PROCUREMENT	OF
1   275					 ; SUBSTITUTE  GOODS  OR  SERVICES;  LOSS OF  USE,  DATA,  OR  PROFITS;	OR
1   276					 ; BUSINESS  INTERRUPTION) HOWEVER CAUSED AND  ON ANY THEORY OF	LIABILITY,
1   277					 ; WHETHER IN CONTRACT,	STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE	OR
1   278					 ; OTHERWISE)  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN	IF
1   279					 ; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
1   280					 ;
1   281					 ;
1   282
1   283					 PushState
1   284
1   285
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 6
dos32a.asm



1   286					 .8086
1   287					 ;=============================================================================
1   288					 ; Get default configuration from _ID32	segment	(buried	in the program)
1   289					 ; and configure the both KERNEL and CLIENT
1   290					 ;
1   291	    0000			 get_default_config:
1   292	    0000  1E 06				 push	 ds es
1   293	    0002  B8 0000s			 mov	 ax,_ID32
1   294	    0005  BA 0000s			 mov	 dx,_KERNEL
1   295	    0008  A3 351Cr			 mov	 _seg_id32,ax
1   296	    000B  89 16	351Er			 mov	 _seg_kernel,dx
1   297
1   298	    000F  50 52				 push	 ax dx			 ; STUB/32C configuration code
1   299	    0011  B8 FF87			 mov	 ax,0FF87h
1   300	    0014  CD 21				 int	 21h
1   301	    0016  81 FA	4944			 cmp	 dx,'ID'
1   302	    001A  75 1B				 jnz	 @@1
1   303	    001C  3D 3332			 cmp	 ax,'32'
1   304	    001F  75 16				 jnz	 @@1
1   305	    0021  2E: 8E 06 351Cr		 mov	 es,cs:_seg_id32
1   306	    0026  33 FF				 xor	 di,di
1   307	    0028  B9 000C			 mov	 cx,12
1   308	    002B  F3> A5			 rep	 movsw
1   309	    002D  2E: 8E 1E 350Er		 mov	 ds,cs:_seg_ds
1   310	    0032  83 0E	34F2r 01		 or	 _sys_misc,0001h	 ; indicate STUB/32C configuration
1   311	    0037  5A 58			 @@1:	 pop	 dx ax
1   312
1   313	    0039  8E D8				 mov	 ds,ax
1   314	    003B  8E C2				 mov	 es,dx
1   315	    003D  33 F6				 xor	 si,si			 ; DS:SI=_ID32:0000
1   316	    003F  BF 0000e			 mov	 di,offs pm32_data	 ; ES:DI=_KERNEL:PM32_DATA
1   317	    0042  AD				 lodsw				 ; check for 'ID32' signature
1   318	    0043  3D 4449			 cmp	 ax,'DI'		 ; if not present, skip	confuguration
1   319	    0046  75 27				 jnz	 @@err
1   320	    0048  AD				 lodsw
1   321	    0049  3D 3233			 cmp	 ax,'23'
1   322	    004C  75 21				 jnz	 @@err
1   323	    004E  B9 0010			 mov	 cx,_ID32_SIZE
1   324	    0051  F3> A4			 rep	 movsb			 ; copy	default	config to KERNEL
1   325	    0053  2E: 8E 06 350Er		 mov	 es,cs:_seg_ds
1   326					 If EXEC_TYPE eq 0
1   327	    0058  81 24	7FFF			 and	 word ptr ds:[si],7FFFh
1   328					 Else
1   329						 or	 word ptr ds:[si],8800h
1   330					 Endif
1   331	    005C  AD				 lodsw				 ; get DOS/32A config byte
1   332	    005D  26: A3 34ECr			 mov	 word ptr es:_misc_byte,ax
1   333	    0061  AD				 lodsw				 ; get DOS buffer size
1   334	    0062  26: A3 353Cr			 mov	 word ptr es:_lowmembuf,ax
1   335	    0066  AD				 lodsw				 ; get version
1   336	    0067  26: A3 34EEr			 mov	 word ptr es:_version,ax
1   337	    006B  F8				 clc
1   338	    006C  EB 02	90			 jmp	 @@done
1   339	    006F  F9			 @@err:	 stc
1   340	    0070  07 1F			 @@done: pop	 es ds
1   341	    0072  C3				 ret
1   342
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 7
dos32a.asm



1   343
1   344	    0073  ??				 evendata
1   345	    0074			 @area2_db label byte
1   346	    0074			 @area2_dw label word
1   347	    0074			 @area2_dd label dword
1   348
1   349					 ;=============================================================================
1   350					 ; Get environment configuration from the environment segment (at PSP:002C)
1   351					 ; and configure both KERNEL and DOS/32A
1   352					 ;
1   353	    0074			 get_environ_config:
1   354	    0074  1E 06				 push	 ds es
1   355	    0076  72 3E				 jc	 @@done
1   356	    0078  F6 06	34EDr 01 90		 test	 _misc_byte2,00000001b
1   357	    007E  74 36				 jz	 @@done
1   358	    0080  8E 06	3514r			 mov	 es,_seg_env
1   359	    0084  33 FF				 xor	 di,di			 ; ES:DI=envirment
1   360	    0086  B9 FFFF			 mov	 cx,-1			 ; environment size, unlimited
1   361	    0089  33 C0				 xor	 ax,ax
1   362	    008B  51			 @@0:	 push	 cx
1   363	    008C  B9 0007			 mov	 cx,7			 ; CX	=length	of 'DOS32A=' string
1   364	    008F  BE 3641r			 mov	 si,offs dos_str	 ; DS:SI=offset	of 'DOS32A=' string
1   365	    0092  F3> A6			 repe	 cmpsb
1   366	    0094  59				 pop	 cx
1   367	    0095  74 0A				 jz	 @@1			 ; quit	loop if	found
1   368	    0097  F2> AE			 repne	 scasb
1   369	    0099  26: 3A 05			 cmp	 al,es:[di]		 ; check for end of environment
1   370	    009C  75 ED				 jnz	 @@0			 ; loop	until found or end of environ.
1   371	    009E  EB 16	90			 jmp	 @@done			 ; no string found, exit
1   372	    00A1  E8 0039		 @@1:	 call	 skip_env_spaces	 ; skip	any leading spaces
1   373	    00A4  26: 80 3D 00			 cmp	 byte ptr es:[di],0	 ; if at the end of the	line, exit
1   374	    00A8  74 0C				 jz	 @@done			 ; (actually, just in case)
1   375	    00AA  E8 000C			 call	 get_env_word		 ; get word and	configure
1   376	    00AD  E8 0041			 call	 skip_env_nonspaces	 ; skip	anything else until space or 0
1   377	    00B0  26: 80 3D 00			 cmp	 byte ptr es:[di],0
1   378	    00B4  75 EB				 jnz	 @@1
1   379	    00B6  07 1F			 @@done: pop	 es ds
1   380	    00B8  C3				 ret
1   381
1   382	    00B9			 get_env_word:
1   383	    00B9  33 DB				 xor	 bx,bx			 ; BX=pointer to next argument in tab
1   384	    00BB  8B B7	3402r		 @@0:	 mov	 si,dfn_tab[bx]		 ; DS:SI=string	offset
1   385	    00BF  83 FE	FF			 cmp	 si,-1			 ; check if at end of arg. list
1   386	    00C2  74 0F				 jz	 @@1			 ; if yes, terminate search
1   387	    00C4  8B 8F	3404r			 mov	 cx,dfn_tab[bx+2]	 ; CX=get string length
1   388	    00C8  57				 push	 di
1   389	    00C9  F3> A6			 repe	 cmpsb			 ; compare strings
1   390	    00CB  5F				 pop	 di
1   391	    00CC  74 06				 jz	 @@2			 ; if equ, process argument
1   392	    00CE  83 C3	06			 add	 bx,6			 ; loop	until done
1   393	    00D1  EB E8				 jmp	 @@0
1   394	    00D3  C3			 @@1:	 ret
1   395	    00D4  03 BF	3404r		 @@2:	 add	 di,dfn_tab[bx+2]	 ; adjust env pointer by string	length
1   396	    00D8  2E: FF A7 3406r		 jmp	 cs:dfn_tab[bx-2+6]	 ; goto	appropriate argument handler
1   397
1   398	    00DD			 skip_env_spaces:
1   399	    00DD  26: 8A 05		 @@1:	 mov	 al,es:[di]
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 8
dos32a.asm



1   400	    00E0  84 C0				 test	 al,al
1   401	    00E2  74 0C				 jz	 @@3
1   402	    00E4  3C 2F				 cmp	 al,'/'
1   403	    00E6  74 07				 jz	 @@2
1   404	    00E8  3C 20				 cmp	 al,20h
1   405	    00EA  75 04				 jnz	 @@3
1   406	    00EC  47				 inc	 di
1   407	    00ED  EB EE				 jmp	 @@1
1   408	    00EF  47			 @@2:	 inc	 di
1   409	    00F0  C3			 @@3:	 ret
1   410
1   411	    00F1			 skip_env_nonspaces:
1   412	    00F1  26: 8A 05		 @@1:	 mov	 al,es:[di]
1   413	    00F4  84 C0				 test	 al,al
1   414	    00F6  74 0C				 jz	 @@3
1   415	    00F8  3C 2F				 cmp	 al,'/'
1   416	    00FA  74 07				 jz	 @@2
1   417	    00FC  3C 20				 cmp	 al,20h
1   418	    00FE  74 04				 jz	 @@3
1   419	    0100  47				 inc	 di
1   420	    0101  EB EE				 jmp	 @@1
1   421	    0103  47			 @@2:	 inc	 di
1   422	    0104  C3			 @@3:	 ret
1   423
1   424
1   425
1   426					 ;=============================================================================
1   427					 ; Get switch in AX: 0,	1, ON, OFF	 (CF=1 if not found)
1   428					 ;
1   429	    0105			 get_env_swc:
1   430	    0105  26: 80 3D 3A			 cmp	 byte ptr es:[di],':'	 ; skip	':' if present
1   431	    0109  75 01				 jne	 @@1
1   432	    010B  47				 inc	 di
1   433	    010C  33 C0			 @@1:	 xor	 ax,ax			 ; if '0', return(0)
1   434	    010E  26: 80 3D 30			 cmp	 byte ptr es:[di],'0'	 ; check for '0'=OFF
1   435	    0112  74 21				 jz	 @@x1
1   436	    0114  40				 inc	 ax			 ; if '1', return(1)
1   437	    0115  26: 80 3D 31			 cmp	 byte ptr es:[di],'1'	 ; check for '1'=ON
1   438	    0119  74 1A				 jz	 @@x1
1   439	    011B  26: 81 3D 4E4F		 cmp	 word ptr es:[di],'NO'	 ; check for 'ON'
1   440	    0120  74 12				 jz	 @@x2
1   441	    0122  48				 dec	 ax
1   442	    0123  26: 81 3D 464F		 cmp	 word ptr es:[di],'FO'	 ; check for 'OF'(F)
1   443	    0128  75 07				 jnz	 @@x0
1   444	    012A  26: 80 7D 02 46		 cmp	 byte ptr es:[di+2],'F'	 ; check for (OF)'F'
1   445	    012F  74 02				 jz	 @@x3
1   446	    0131  F9			 @@x0:	 stc
1   447	    0132  C3				 ret
1   448	    0133  47			 @@x3:	 inc	 di
1   449	    0134  47			 @@x2:	 inc	 di
1   450	    0135  47			 @@x1:	 inc	 di
1   451	    0136  84 C0				 test	 al,al
1   452	    0138  C3				 ret
1   453
1   454
1   455
1   456					 ;=============================================================================
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 9
dos32a.asm



1   457					 ; Get number in AX: 0<=N(dec)<=65535	 (CF=1 if not found)
1   458					 ;
1   459	    0139			 get_env_num:
1   460	    0139  26: 80 3D 3A			 cmp	 byte ptr es:[di],':'	 ; skip	':' if present
1   461	    013D  75 01				 jne	 @@1
1   462	    013F  47				 inc	 di
1   463	    0140  33 C0			 @@1:	 xor	 ax,ax
1   464	    0142  33 DB				 xor	 bx,bx
1   465	    0144  B9 000A			 mov	 cx,10
1   466	    0147  26: 8A 05			 mov	 al,es:[di]
1   467	    014A  2C 30				 sub	 al,'0'
1   468	    014C  72 24				 jb	 @@exit
1   469	    014E  3C 09				 cmp	 al,9
1   470	    0150  77 20				 ja	 @@exit
1   471	    0152  93				 xchg	 bx,ax
1   472	    0153  F7 E1				 mul	 cx
1   473	    0155  93				 xchg	 bx,ax
1   474	    0156  03 D8				 add	 bx,ax
1   475	    0158  47			 @@2:	 inc	 di
1   476	    0159  33 C0				 xor	 ax,ax
1   477	    015B  26: 8A 05			 mov	 al,es:[di]
1   478	    015E  2C 30				 sub	 al,'0'
1   479	    0160  72 0C				 jb	 @@done
1   480	    0162  3C 09				 cmp	 al,9
1   481	    0164  77 08				 ja	 @@done
1   482	    0166  93				 xchg	 bx,ax
1   483	    0167  F7 E1				 mul	 cx
1   484	    0169  93				 xchg	 bx,ax
1   485	    016A  03 D8				 add	 bx,ax
1   486	    016C  EB EA				 jmp	 @@2
1   487	    016E  8B C3			 @@done: mov	 ax,bx
1   488	    0170  F8				 clc
1   489	    0171  C3				 ret
1   490	    0172  F9			 @@exit: stc
1   491	    0173  C3				 ret
1   492
1   493
1   494
1   495
1   496
1   497					 ;=============================================================================
1   498					 ; /QUIET
1   499					 ;
1   500	    0174			 cfg_env_quiet:
1   501					 If EXEC_TYPE eq 0
1   502	    0174  81 26	34ECr F7FC		 and	 word ptr _misc_byte,1111011111111100b
1   503					 Else
1   504						 and	 word ptr _misc_byte,1111111111111100b
1   505					 Endif
1   506	    017A  C3				 ret
1   507
1   508
1   509
1   510					 ;=============================================================================
1   511					 ; /PRINT:ON|OFF
1   512					 ;
1   513	    017B			 cfg_env_print:
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 10
dos32a.asm



1   514	    017B  E8 FF87			 call	 get_env_swc
1   515	    017E  72 0F				 jc	 @@0
1   516	    0180  74 07				 jz	 @@1
1   517	    0182  81 0E	34ECr 0801		 or	 word ptr _misc_byte,0000100000000001b
1   518	    0188  C3				 ret
1   519	    0189  81 26	34ECr F7FE	 @@1:	 and	 word ptr _misc_byte,1111011111111110b
1   520	    018F  C3			 @@0:	 ret
1   521
1   522
1   523
1   524					 ;=============================================================================
1   525					 ; SOUND:ON|OFF
1   526					 ;
1   527	    0190			 cfg_env_sound:
1   528	    0190  E8 FF72			 call	 get_env_swc
1   529	    0193  72 0E				 jc	 @@0
1   530	    0195  74 06				 jz	 @@1
1   531	    0197  80 0E	34ECr 02		 or	 _misc_byte,00000010b
1   532	    019C  C3				 ret
1   533	    019D  80 26	34ECr FD 90	 @@1:	 and	 _misc_byte,11111101b
1   534	    01A3  C3			 @@0:	 ret
1   535
1   536
1   537
1   538					 ;=============================================================================
1   539					 ; /EXTMEM:nnnn	(KB)
1   540					 ;
1   541	    01A4			 cfg_env_extmem:
1   542	    01A4  E8 FF92			 call	 get_env_num
1   543	    01A7  72 2A				 jc	 @@0
1   544	    01A9  1E				 push	 ds
1   545	    01AA  8E 1E	351Er			 mov	 ds,_seg_kernel
1   546						 assume	 ds:_KERNEL
1   547	    01AE  50				 push	 ax
1   548	    01AF  BB 0400			 mov	 bx,1024			 ; make	AX (Kb)-> DX:AX	(bytes)
1   549	    01B2  F7 E3				 mul	 bx				 ; DX:AX= bytes
1   550	    01B4  A3 000Ce			 mov	 word ptr ds:[pm32_data+12],ax	 ; set ext mem requirements
1   551	    01B7  89 16	000Ee			 mov	 word ptr ds:[pm32_data+14],dx
1   552	    01BB  58				 pop	 ax
1   553	    01BC  05 0FFF			 add	 ax,00FFFh
1   554	    01BF  25 F000			 and	 ax,0F000h
1   555	    01C2  33 D2				 xor	 dx,dx
1   556	    01C4  BB 1000			 mov	 bx,1000h			 ; BX=Page size	in KB
1   557	    01C7  F7 F3				 div	 bx				 ; MEM KB / Page Size KB
1   558	    01C9  84 C0				 test	 al,al
1   559	    01CB  75 02				 jnz	 @@1				 ; must	alloc at least one
1   560	    01CD  FE C0				 inc	 al
1   561	    01CF  A2 0001e		 @@1:	 mov	 byte ptr ds:[pm32_data+1],al	 ; set max allowed pagetables
1   562						 assume	 ds:_TEXT16
1   563	    01D2  1F				 pop	 ds
1   564	    01D3  C3			 @@0:	 ret
1   565
1   566
1   567
1   568					 ;=============================================================================
1   569					 ; /DOSBUF:nnnn	(KB)
1   570					 ;
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 11
dos32a.asm



1   571	    01D4			 cfg_env_dosbuf:
1   572	    01D4  E8 FF62			 call	 get_env_num
1   573	    01D7  3D 0001			 cmp	 ax,1				 ; 1KB < ax < 64KB
1   574	    01DA  72 14				 jb	 @@0
1   575	    01DC  3D 0040			 cmp	 ax,64
1   576	    01DF  77 0F				 ja	 @@0
1   577	    01E1  75 06				 jnz	 @@2
1   578	    01E3  B8 0FFF			 mov	 ax,0FFFh
1   579	    01E6  EB 05	90			 jmp	 @@1
1   580	    01E9  B1 06			 @@2:	 mov	 cl,6
1   581	    01EB  D3 E0				 shl	 ax,cl				 ; convert KB to para
1   582	    01ED  A3 353Cr		 @@1:	 mov	 _lowmembuf,ax
1   583	    01F0  C3			 @@0:	 ret
1   584
1   585
1   586
1   587					 ;=============================================================================
1   588					 ; /DPMITST:ON|OFF
1   589					 ;
1   590	    01F1			 cfg_env_test:
1   591	    01F1  E8 FF11			 call	 get_env_swc
1   592	    01F4  72 14				 jc	 @@0
1   593	    01F6  1E				 push	 ds
1   594	    01F7  8E 1E	351Er			 mov	 ds,_seg_kernel
1   595						 assume	 ds:_KERNEL
1   596	    01FB  74 07				 jz	 @@1
1   597	    01FD  80 0E	0000e 01		 or	 byte ptr ds:pm32_data[0],00000001b
1   598	    0202  1F				 pop	 ds
1   599	    0203  C3				 ret
1   600	    0204  80 26	0000e FE	 @@1:	 and	 byte ptr ds:pm32_data[0],11111110b
1   601						 assume	 ds:_TEXT16
1   602	    0209  1F				 pop	 ds
1   603	    020A  C3			 @@0:	 ret
1   604
1   605
1   606
1   607					 ;=============================================================================
1   608					 ; /RESTORE:ON|OFF
1   609					 ;
1   610	    020B			 cfg_env_restore:
1   611	    020B  E8 FEF7			 call	 get_env_swc
1   612	    020E  72 0E				 jc	 @@0
1   613	    0210  74 06				 jz	 @@1
1   614	    0212  80 0E	34ECr 04		 or	 _misc_byte,00000100b
1   615	    0217  C3				 ret
1   616	    0218  80 26	34ECr FB 90	 @@1:	 and	 _misc_byte,11111011b
1   617	    021E  C3			 @@0:	 ret
1   618
1   619
1   620
1   621					 ;=============================================================================
1   622					 ; /NULLP[:ON|OFF]
1   623					 ;
1   624	    021F			 cfg_env_nullp:
1   625	    021F  E8 FEE3			 call	 get_env_swc
1   626	    0222  72 02				 jc	 @@0
1   627	    0224  74 07				 jz	 @@1
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 12
dos32a.asm



1   628	    0226  80 0E	34ECr 80 90	 @@0:	 or	 _misc_byte,10000000b
1   629	    022C  C3				 ret
1   630	    022D  80 26	34ECr 7F	 @@1:	 and	 _misc_byte,01111111b
1   631	    0232  C3				 ret
1   632
1   633
1   634
1   635					 ;=============================================================================
1   636					 ; /VERBOSE[:ON:OFF]
1   637					 ;
1   638	    0233			 cfg_env_verbose:
1   639	    0233  E8 FECF			 call	 get_env_swc
1   640	    0236  72 02				 jc	 @@0
1   641	    0238  74 06				 jz	 @@1
1   642	    023A  80 0E	34EDr 10	 @@0:	 or	 _misc_byte2,00010000b
1   643	    023F  C3				 ret
1   644	    0240  80 26	34EDr EF 90	 @@1:	 and	 _misc_byte2,11101111b
1   645	    0246  C3				 ret
1   646
1   647
1   648
1   649					 ;=============================================================================
1   650					 ; /NOWARN:nnnn
1   651					 ;
1   652	    0247			 cfg_env_nowarn:
1   653	    0247  E8 FEEF			 call	 get_env_num
1   654	    024A  2D 2328			 sub	 ax,9000
1   655	    024D  72 17				 jb	 @@0
1   656	    024F  3C 06				 cmp	 al,6
1   657	    0251  77 13				 ja	 @@0
1   658	    0253  03 C0				 add	 ax,ax
1   659	    0255  8B D8				 mov	 bx,ax
1   660	    0257  C7 87	34BCr 0000		 mov	 word ptr errtab_90xx[bx],0
1   661	    025D  26: 80 3D 2C			 cmp	 byte ptr es:[di],','
1   662	    0261  75 03				 jnz	 @@0
1   663	    0263  47				 inc	 di
1   664	    0264  EB E1				 jmp	 cfg_env_nowarn
1   665	    0266  C3			 @@0:	 ret
1   666
1   667
1   668
1   669					 ;=============================================================================
1   670					 ; /NOC
1   671					 ;
1   672	    0267			 cfg_env_noc:
1   673	    0267  80 26	34EDr F7		 and	 byte ptr _misc_byte2,11110111b
1   674	    026C  C3				 ret
1   675
1   676					 PopState
1   677
    678					 include TEXT\CLIENT\strings.asm
1   679					 ;
1   680					 ; Copyright (C) 1996-2002 Supernar Systems, Ltd. All rights reserved.
1   681					 ;
1   682					 ; Redistribution  and	use  in	source and  binary  forms, with	or without
1   683					 ; modification,  are permitted	provided that the following conditions are
1   684					 ; met:
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 13
dos32a.asm



1   685					 ;
1   686					 ; 1.  Redistributions	of  source code	 must  retain  the above copyright
1   687					 ; notice, this	list of	conditions and the following disclaimer.
1   688					 ;
1   689					 ; 2.  Redistributions	in binary form	must reproduce the above copyright
1   690					 ; notice,  this  list of conditions and  the  following disclaimer in the
1   691					 ; documentation and/or	other materials	provided with the distribution.
1   692					 ;
1   693					 ; 3. The end-user documentation included with the redistribution, if any,
1   694					 ; must	include	the following acknowledgment:
1   695					 ;
1   696					 ; "This product uses DOS/32 Advanced DOS Extender technology."
1   697					 ;
1   698					 ; Alternately,	 this acknowledgment may appear	in the software	itself,	if
1   699					 ; and wherever	such third-party acknowledgments normally appear.
1   700					 ;
1   701					 ; 4.  Products	derived	from this software  may	not be called "DOS/32A"	or
1   702					 ; "DOS/32 Advanced".
1   703					 ;
1   704					 ; THIS	 SOFTWARE AND DOCUMENTATION IS PROVIDED	 "AS IS" AND ANY EXPRESSED
1   705					 ; OR  IMPLIED	WARRANTIES,  INCLUDING,	BUT  NOT  LIMITED  TO, THE IMPLIED
1   706					 ; WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
1   707					 ; DISCLAIMED.	IN  NO	EVENT SHALL THE	 AUTHORS  OR  COPYRIGHT	HOLDERS	BE
1   708					 ; LIABLE  FOR	ANY DIRECT, INDIRECT,  INCIDENTAL,  SPECIAL, EXEMPLARY,	OR
1   709					 ; CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT NOT	LIMITED	TO, PROCUREMENT	OF
1   710					 ; SUBSTITUTE  GOODS  OR  SERVICES;  LOSS OF  USE,  DATA,  OR  PROFITS;	OR
1   711					 ; BUSINESS  INTERRUPTION) HOWEVER CAUSED AND  ON ANY THEORY OF	LIABILITY,
1   712					 ; WHETHER IN CONTRACT,	STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE	OR
1   713					 ; OTHERWISE)  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN	IF
1   714					 ; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
1   715					 ;
1   716					 ;
1   717
1   718					 PushState
1   719
1   720
1   721					 .8086
1   722					 ;=============================================================================
1   723					 ; report_error:	 displays error	code(AX) and error message
1   724					 ; report_errorm:	 retreives error code from memory
1   725					 ;
1   726	    026D			 report_errorm:
1   727	    026D  2E: A1 34F8r			 mov	 ax,cs:_err_code
1   728	    0271			 report_error:
1   729	    0271  53 1E				 push	 bx ds
1   730	    0273  2E: 83 3E 3522r 00		 cmp	 cs:_sel_ds,0
1   731	    0279  75 08				 jnz	 @@1
1   732	    027B  2E: 8E 1E 350Er		 mov	 ds,cs:_seg_ds
1   733	    0280  EB 06	90			 jmp	 @@2
1   734	    0283  2E: 8E 1E 3522r	 @@1:	 mov	 ds,cs:_sel_ds
1   735	    0288  33 DB			 @@2:	 xor	 bx,bx
1   736	    028A  3A A7	3446r		 @@3:	 cmp	 ah,g_errtab[bx]	 ; check Global	error #
1   737	    028E  74 0A				 jz	 @@4			 ; if found, jump
1   738	    0290  80 3F	FF			 cmp	 byte ptr [bx],0FFh
1   739	    0293  74 50				 jz	 @@done
1   740	    0295  83 C3	04			 add	 bx,4
1   741	    0298  EB F0				 jmp	 @@3
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 14
dos32a.asm



1   742
1   743	    029A  80 BF	3447r 01	 @@4:	 cmp	 g_errtab[bx+1],1	 ; check if warning
1   744	    029F  75 08				 jnz	 @@5			 ; if not, jump
1   745	    02A1  F6 06	34ECr 01 90		 test	 _misc_byte,00000001b	 ; check if report warnings on
1   746	    02A7  74 3C				 jz	 @@done			 ; if not, done
1   747	    02A9  50 51	52		 @@5:	 push	 ax cx dx
1   748	    02AC  53				 push	 bx
1   749	    02AD  8A 9F	3447r			 mov	 bl,g_errtab[bx+1]
1   750	    02B1  B7 00				 mov	 bh,0
1   751	    02B3  8B CB				 mov	 cx,bx
1   752	    02B5  03 DB				 add	 bx,bx			 ; BX =	error header #
1   753	    02B7  8B 97	3468r			 mov	 dx,h_errtab[bx]	 ; DX =	Header error string
1   754	    02BB  5B				 pop	 bx
1   755
1   756	    02BC  57 56				 push	 di si			 ; SI, DI = event. parameters
1   757	    02BE  8B B7	3448r			 mov	 si,word ptr g_errtab[bx+2]	 ; SI =	Local error offset
1   758	    02C2  8A D8				 mov	 bl,al
1   759	    02C4  B7 00				 mov	 bh,0
1   760	    02C6  03 DB				 add	 bx,bx			 ; BX =	Local error #
1   761	    02C8  8B 38				 mov	 di,[bx+si]		 ; DX =	Local error string
1   762	    02CA  85 FF				 test	 di,di
1   763	    02CC  74 0D				 jz	 @@6
1   764	    02CE  50				 push	 ax
1   765	    02CF  E8 0076			 call	 prints
1   766	    02D2  58				 pop	 ax
1   767	    02D3  8B D7				 mov	 dx,di
1   768	    02D5  E8 0070			 call	 prints
1   769	    02D8  E8 0064			 call	 printcr
1   770	    02DB  5E 5F			 @@6:	 pop	 si di
1   771	    02DD  80 F9	01			 cmp	 cl,1
1   772	    02E0  75 06				 jnz	 @@exit
1   773	    02E2  5A 59	58			 pop	 dx cx ax
1   774	    02E5  1F 5B			 @@done: pop	 ds bx
1   775	    02E7  C3				 ret
1   776
1   777	    02E8  B0 FF			 @@exit: mov	 al,-1
1   778	    02EA  83 3E	3520r 00		 cmp	 _sel_cs,0
1   779	    02EF  75 03				 jnz	 @@0
1   780	    02F1  E9 01BE			 jmp	 exit86
1   781	    02F4  E9 01D9		 @@0:	 jmp	 exit386
1   782
1   783
1   784
1   785
1   786					 .8086
1   787					 ;=============================================================================
1   788	    02F7			 copyright:				 ; show	copyright message
1   789	    02F7  F6 06	34EDr 08 90		 test	 _misc_byte2,00001000b
1   790	    02FD  74 31				 jz	 @@done
1   791	    02FF  A1 34EEr			 mov	 ax,_version
1   792	    0302  BB 35C7r			 mov	 bx,offs ver_msg
1   793	    0305  BE 359Br			 mov	 si,offs cpr_msg
1   794	    0308  50				 push	 ax
1   795	    0309  8A C4				 mov	 al,ah
1   796	    030B  D4 0A				 aam
1   797	    030D  04 30				 add	 al,30h
1   798	    030F  88 07				 mov	 [bx+0],al
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 15
dos32a.asm



1   799	    0311  58				 pop	 ax
1   800	    0312  D4 0A				 aam
1   801	    0314  05 3030			 add	 ax,3030h
1   802	    0317  3C 30				 cmp	 al,30h
1   803	    0319  75 02				 jnz	 @@0
1   804	    031B  B0 20				 mov	 al,20h
1   805	    031D  86 E0			 @@0:	 xchg	 ah,al
1   806	    031F  89 47	02			 mov	 [bx+2],ax
1   807	    0322  B9 0062			 mov	 cx,offs cpr_end - offs	cpr_msg
1   808	    0325  AC			 @@1:	 lodsb
1   809	    0326  51				 push	 cx
1   810	    0327  33 DB				 xor	 bx,bx
1   811	    0329  B4 0E				 mov	 ah,0Eh
1   812	    032B  CD 10				 int	 10h
1   813	    032D  59				 pop	 cx
1   814	    032E  E2 F5				 loop	 @@1
1   815	    0330  C3			 @@done: ret
1   816
1   817
1   818
1   819					 .8086
1   820					 ;=============================================================================
1   821					 ;	 Console I/O Routines (printf...)
1   822					 ;
1   823		  =0100			 STRSIZE = 0100h
1   824	    0331  52			 printc: push	 dx
1   825	    0332  A2 033Dr			 mov	 @c,al
1   826	    0335  BA 033Dr			 mov	 dx,offs @c
1   827	    0338  E8 000D		 @prt_c: call	 prints
1   828	    033B  5A				 pop	 dx
1   829	    033C  C3				 ret
1   830	    033D  00 00			 @c	 db	 0,0
1   831	    033F  52			 printcr:push	 dx
1   832	    0340  BA 0345r			 mov	 dx,offs @cr
1   833	    0343  EB F3				 jmp	 @prt_c
1   834	    0345  0D 0A	00		 @cr	 db	 cre
1   835	    0348  50 53	51 52 56 57 55+	 prints: push	 ax bx cx dx si	di bp ds es
    836		  1E 06
1   837	    0351  16				 push	 ss
1   838	    0352  07				 pop	 es
1   839	    0353  8B EC				 mov	 bp,sp
1   840	    0355  81 EC	0100			 sub	 sp,STRSIZE
1   841	    0359  83 C5	14			 add	 bp,2*10	 ; BP -> argument list
1   842	    035C  8B F2				 mov	 si,dx		 ; DS:SI -> string
1   843	    035E  8B FC				 mov	 di,sp		 ; ES:DI -> space for formatted	string
1   844	    0360  57				 push	 di
1   845	    0361  AC			 @@loop: lodsb
1   846	    0362  3C 25				 cmp	 al,'%'
1   847	    0364  74 1D				 jz	 @@args
1   848	    0366  3C 24				 cmp	 al,'$'
1   849	    0368  75 02				 jnz	 @@next
1   850	    036A  B0 3F				 mov	 al,'?'
1   851	    036C  AA			 @@next: stosb
1   852	    036D  84 C0				 test	 al,al
1   853	    036F  75 F0				 jnz	 @@loop
1   854	    0371  5F				 pop	 di
1   855	    0372  E8 00D9			 call	 writes
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 16
dos32a.asm



1   856	    0375  81 C4	0100			 add	 sp,STRSIZE
1   857	    0379  07 1F	5D 5F 5E 5A 59+		 pop	 es ds bp di si	dx cx bx ax
    858		  5B 58
1   859	    0382  C3				 ret
1   860	    0383  AC			 @@args: lodsb
1   861	    0384  3C 25				 cmp	 al,'%'
1   862	    0386  74 E4				 jz	 @@next
1   863	    0388  3C 63				 cmp	 al,'c'		 ; char
1   864	    038A  74 16				 jz	 @@c
1   865	    038C  3C 73				 cmp	 al,'s'		 ; string
1   866	    038E  74 1A				 jz	 @@s
1   867	    0390  3C 62				 cmp	 al,'b'		 ; byte
1   868	    0392  74 2C				 jz	 @@b
1   869	    0394  3C 77				 cmp	 al,'w'		 ; word
1   870	    0396  74 36				 jz	 @@w
1   871	    0398  3C 6C				 cmp	 al,'l'		 ; long
1   872	    039A  74 40				 jz	 @@l
1   873	    039C  3C 64				 cmp	 al,'d'		 ; decimal
1   874	    039E  74 54				 jz	 @@d
1   875	    03A0  EB CA				 jmp	 @@next		 ; unrecognized
1   876	    03A2  8A 46	00		 @@c:	 mov	 al,[bp]
1   877	    03A5  83 C5	02			 add	 bp,2
1   878	    03A8  EB C2				 jmp	 @@next
1   879	    03AA  8B 5E	00		 @@s:	 mov	 bx,[bp]
1   880	    03AD  83 C5	02			 add	 bp,2
1   881	    03B0  8A 07			 @@s0:	 mov	 al,[bx]
1   882	    03B2  43				 inc	 bx
1   883	    03B3  84 C0				 test	 al,al
1   884	    03B5  74 AA				 jz	 @@loop
1   885	    03B7  3C 24				 cmp	 al,'$'
1   886	    03B9  75 02				 jnz	 @@s1
1   887	    03BB  B0 3F				 mov	 al,'?'
1   888	    03BD  AA			 @@s1:	 stosb
1   889	    03BE  EB F0				 jmp	 @@s0
1   890	    03C0  8A 66	00		 @@b:	 mov	 ah,[bp]
1   891	    03C3  83 C5	02			 add	 bp,2
1   892	    03C6  B9 0002			 mov	 cx,2
1   893	    03C9  E8 0036			 call	 @@hex
1   894	    03CC  EB 93				 jmp	 @@loop
1   895	    03CE  8B 46	00		 @@w:	 mov	 ax,[bp]
1   896	    03D1  83 C5	02			 add	 bp,2
1   897	    03D4  B9 0004			 mov	 cx,4
1   898	    03D7  E8 0028			 call	 @@hex
1   899	    03DA  EB 85				 jmp	 @@loop
1   900	    03DC  8B 46	02		 @@l:	 mov	 ax,[bp+2]
1   901	    03DF  B9 0004			 mov	 cx,4
1   902	    03E2  E8 001D			 call	 @@hex
1   903	    03E5  8B 46	00			 mov	 ax,[bp]
1   904	    03E8  83 C5	04			 add	 bp,4
1   905	    03EB  B9 0004			 mov	 cx,4
1   906	    03EE  E8 0011			 call	 @@hex
1   907	    03F1  E9 FF6D			 jmp	 @@loop
1   908	    03F4  8B 46	00		 @@d:	 mov	 ax,[bp]
1   909	    03F7  83 C5	02			 add	 bp,2
1   910	    03FA  33 C9				 xor	 cx,cx
1   911	    03FC  E8 0021			 call	 @@dec
1   912	    03FF  E9 FF5F			 jmp	 @@loop
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 17
dos32a.asm



1   913	    0402  D1 C0	D1 C0 D1 C0 D1+	 @@hex:	 rol	 ax,4
    914		  C0
1   915	    040A  8A D8				 mov	 bl,al
1   916	    040C  80 E3	0F			 and	 bl,0Fh
1   917	    040F  80 C3	30			 add	 bl,30h
1   918	    0412  80 FB	39			 cmp	 bl,39h
1   919	    0415  76 03				 jbe	 @@hex0
1   920	    0417  80 C3	07			 add	 bl,07h
1   921	    041A  93			 @@hex0: xchg	 ax,bx
1   922	    041B  AA				 stosb
1   923	    041C  93				 xchg	 ax,bx
1   924	    041D  E2 E3				 loop	 @@hex
1   925	    041F  C3				 ret
1   926	    0420  BB 2710		 @@dec:	 mov	 bx,10000
1   927	    0423  E8 0015			 call	 @@dec0
1   928	    0426  BB 03E8			 mov	 bx,1000
1   929	    0429  E8 000F			 call	 @@dec0
1   930	    042C  BB 0064			 mov	 bx,100
1   931	    042F  E8 0009			 call	 @@dec0
1   932	    0432  BB 000A			 mov	 bx,10
1   933	    0435  E8 0003			 call	 @@dec0
1   934	    0438  EB 0E	90			 jmp	 @@dec2
1   935	    043B  33 D2			 @@dec0: xor	 dx,dx
1   936	    043D  F7 F3				 div	 bx
1   937	    043F  85 C0				 test	 ax,ax
1   938	    0441  74 01				 jz	 @@dec1
1   939	    0443  41				 inc	 cx
1   940	    0444  85 C9			 @@dec1: test	 cx,cx
1   941	    0446  74 03				 jz	 @@dec3
1   942	    0448  04 30			 @@dec2: add	 al,30h
1   943	    044A  AA				 stosb
1   944	    044B  8B C2			 @@dec3: mov	 ax,dx
1   945	    044D  C3				 ret
1   946	    044E  32 C0			 writes: xor	 al,al
1   947	    0450  8B D7				 mov	 dx,di
1   948	    0452  B9 FFFF			 mov	 cx,-1
1   949	    0455  F2> AE			 repne	 scasb
1   950	    0457  4F				 dec	 di
1   951	    0458  06				 push	 es
1   952	    0459  1F				 pop	 ds
1   953	    045A  B8 0924			 mov	 ax,0924h
1   954	    045D  88 05				 mov	 [di],al
1   955	    045F  2E: 83 3E 3520r 00		 cmp	 cs:_sel_cs,0
1   956	    0465  75 03				 jnz	 @@2
1   957	    0467  CD 21				 int	 21h
1   958	    0469  C3			 @@1:	 ret
1   959					 .386p
1   960	    046A  66| 55		 @@2:	 push	 ebp
1   961	    046C  66| 83 EC 32			 sub	 esp,32h
1   962	    0470  66| 8B EC			 mov	 ebp,esp
1   963	    0473  67| 89 45 1C			 mov	 [ebp+1Ch],ax
1   964	    0477  67| 89 55 14			 mov	 [ebp+14h],dx
1   965	    047B  2E: A1 3512r			 mov	 ax,cs:_seg_ss
1   966	    047F  67| 89 45 24			 mov	 [ebp+24h],ax
1   967	    0483  E8 0191			 call	 int21h
1   968	    0486  66| 83 C4 32			 add	 esp,32h
1   969	    048A  66| 5D			 pop	 ebp
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 18
dos32a.asm



1   970	    048C  EB DB				 jmp	 @@1
1   971
1   972
1   973
1   974
1   975					 .386p
1   976					 ;=============================================================================
1   977	    048E			 file_error:
1   978	    048E  BE 3104r			 mov	 si,offs start
1   979	    0491  E9 FDDD			 jmp	 report_error
1   980	    0494			 file_errorm:
1   981	    0494  BE 3104r			 mov	 si,offs start
1   982	    0497  E9 FDD3			 jmp	 report_errorm
1   983	    049A			 dos_error:
1   984	    049A  8B F0				 mov	 si,ax
1   985	    049C  B8 8002			 mov	 ax,8002h
1   986	    049F  EB 06	90			 jmp	 common_error
1   987	    04A2			 dpmi_error:
1   988	    04A2  8B F0				 mov	 si,ax
1   989	    04A4  B8 8003			 mov	 ax,8003h
1   990	    04A7			 common_error:
1   991	    04A7  FA				 cli
1   992	    04A8  66| 2E: 0F B2	26    +		 lss	 esp,fword ptr cs:_sel_esp
    993		  3526r
1   994	    04AF  E9 FDBF			 jmp	 report_error
1   995
1   996
1   997					 PopState
1   998
    999					 include TEXT\CLIENT\misc.asm
1  1000					 ;
1  1001					 ; Copyright (C) 1996-2002 Supernar Systems, Ltd. All rights reserved.
1  1002					 ;
1  1003					 ; Redistribution  and	use  in	source and  binary  forms, with	or without
1  1004					 ; modification,  are permitted	provided that the following conditions are
1  1005					 ; met:
1  1006					 ;
1  1007					 ; 1.  Redistributions	of  source code	 must  retain  the above copyright
1  1008					 ; notice, this	list of	conditions and the following disclaimer.
1  1009					 ;
1  1010					 ; 2.  Redistributions	in binary form	must reproduce the above copyright
1  1011					 ; notice,  this  list of conditions and  the  following disclaimer in the
1  1012					 ; documentation and/or	other materials	provided with the distribution.
1  1013					 ;
1  1014					 ; 3. The end-user documentation included with the redistribution, if any,
1  1015					 ; must	include	the following acknowledgment:
1  1016					 ;
1  1017					 ; "This product uses DOS/32 Advanced DOS Extender technology."
1  1018					 ;
1  1019					 ; Alternately,	 this acknowledgment may appear	in the software	itself,	if
1  1020					 ; and wherever	such third-party acknowledgments normally appear.
1  1021					 ;
1  1022					 ; 4.  Products	derived	from this software  may	not be called "DOS/32A"	or
1  1023					 ; "DOS/32 Advanced".
1  1024					 ;
1  1025					 ; THIS	 SOFTWARE AND DOCUMENTATION IS PROVIDED	 "AS IS" AND ANY EXPRESSED
1  1026					 ; OR  IMPLIED	WARRANTIES,  INCLUDING,	BUT  NOT  LIMITED  TO, THE IMPLIED
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 19
dos32a.asm



1  1027					 ; WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
1  1028					 ; DISCLAIMED.	IN  NO	EVENT SHALL THE	 AUTHORS  OR  COPYRIGHT	HOLDERS	BE
1  1029					 ; LIABLE  FOR	ANY DIRECT, INDIRECT,  INCIDENTAL,  SPECIAL, EXEMPLARY,	OR
1  1030					 ; CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT NOT	LIMITED	TO, PROCUREMENT	OF
1  1031					 ; SUBSTITUTE  GOODS  OR  SERVICES;  LOSS OF  USE,  DATA,  OR  PROFITS;	OR
1  1032					 ; BUSINESS  INTERRUPTION) HOWEVER CAUSED AND  ON ANY THEORY OF	LIABILITY,
1  1033					 ; WHETHER IN CONTRACT,	STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE	OR
1  1034					 ; OTHERWISE)  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN	IF
1  1035					 ; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
1  1036					 ;
1  1037					 ;
1  1038
1  1039					 PushState
1  1040
1  1041
1  1042					 .8086
1  1043					 ;=============================================================================
1  1044					 ; Real	mode exit routine, using 8086 instructions
1  1045					 ;
1  1046	    04B2  FA			 exit86: cli
1  1047	    04B3  FC				 cld
1  1048	    04B4  2E: 8E 1E 350Er		 mov	 ds,cs:_seg_ds		 ; restore SEG regs
1  1049	    04B9  8E 06	3510r			 mov	 es,_seg_es
1  1050	    04BD  8E 16	3512r			 mov	 ss,_seg_ss
1  1051	    04C1  BC 0800			 mov	 sp,STACKSIZE*16	 ; set stack to	default	size
1  1052	    04C4  A1 3514r			 mov	 ax,_seg_env
1  1053	    04C7  26: A3 002C			 mov	 es:[002Ch],ax
1  1054	    04CB  B8 4CFF			 mov	 ax,4CFFh		 ; exit	with error code	-1
1  1055	    04CE  CD 21				 int	 21h			 ; NOTE: DOS 1.0 will hang
1  1056
1  1057					 .386p
1  1058					 ;=============================================================================
1  1059					 ; Protected mode exit routine,	using 80386 instructions
1  1060					 ;
1  1061	    04D0  FA			 exit386:cli
1  1062	    04D1  FC				 cld
1  1063	    04D2  2E: 8E 1E 3522r		 mov	 ds,cs:_sel_ds		 ; restore SEG regs
1  1064	    04D7  8E 06	3524r			 mov	 es,_sel_es
1  1065	    04DB  66| 0F B2 26 3526r		 lss	 esp,fword ptr _sel_esp	 ; set stack to	default	size
1  1066	    04E1  33 D2				 xor	 dx,dx
1  1067	    04E3  8E E2				 mov	 fs,dx
1  1068	    04E5  8E EA				 mov	 gs,dx
1  1069	    04E7  B4 4C				 mov	 ah,4Ch			 ; exit	with error code	in AL
1  1070	    04E9  CD 21				 int	 21h
1  1071
1  1072					 ;=============================================================================
1  1073	    04EB			 save_inttab:				 ; save	real mode interrupts
1  1074	    04EB  51 56	57 1E 06		 push	 cx si di ds es
1  1075	    04F0  33 F6				 xor	 si,si
1  1076	    04F2  BF 0800			 mov	 di,STACKSIZE*16
1  1077	    04F5  2E: 8E 1E 352Cr		 mov	 ds,cs:_sel_zero
1  1078	    04FA  2E: 8E 06 352Ar		 mov	 es,cs:_sel_ss
1  1079	    04FF  B9 0200			 mov	 cx,0200h
1  1080	    0502  FC				 cld
1  1081	    0503  F3> A5			 rep	 movsw
1  1082	    0505  E4 21				 in	 al,21h			 ; save	PIC mask
1  1083	    0507  8A E0				 mov	 ah,al
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 20
dos32a.asm



1  1084	    0509  E4 A1				 in	 al,0A1h
1  1085	    050B  07 1F	5F 5E 59		 pop	 es ds di si cx
1  1086	    0510  A3 34F6r			 mov	 _pic_mask,ax
1  1087	    0513  C3				 ret
1  1088
1  1089					 ;=============================================================================
1  1090	    0514			 restore_inttab:			 ; restore real	mode interrupts
1  1091	    0514  2E: F6 06 34ECr 04  +		 test	 cs:_misc_byte,00000100b
   1092		  90
1  1093	    051B  74 3C	90 90			 jz	 @@done
1  1094	    051F  2E: 80 3E 34F1r 03		 cmp	 cs:_sys_type,3
1  1095	    0525  74 08	90 90			 jz	 @@1
1  1096	    0529  66| 33 C0			 xor	 eax,eax		 ; reset Null-Pointer protection
1  1097	    052C  0F 23	F8			 mov	 dr7,eax
1  1098	    052F  9C			 @@1:	 pushf
1  1099	    0530  FA				 cli
1  1100	    0531  56 57	1E 06			 push	 si di ds es
1  1101	    0535  33 FF				 xor	 di,di
1  1102	    0537  BE 0800			 mov	 si,STACKSIZE*16
1  1103	    053A  2E: 8E 06 352Cr		 mov	 es,cs:_sel_zero
1  1104	    053F  2E: 8E 1E 352Ar		 mov	 ds,cs:_sel_ss
1  1105	    0544  B9 0200			 mov	 cx,0200h
1  1106	    0547  FC				 cld
1  1107	    0548  F3> A5			 rep	 movsw
1  1108	    054A  2E: A1 34F6r			 mov	 ax,cs:_pic_mask	 ; restore PIC mask
1  1109	    054E  E6 A1				 out	 0A1h,al
1  1110	    0550  8A C4				 mov	 al,ah
1  1111	    0552  E6 21				 out	 21h,al
1  1112	    0554  07 1F	5F 5E			 pop	 es ds di si
1  1113	    0558  9D				 popf
1  1114	    0559  C3			 @@done: ret
1  1115
1  1116					 ;=============================================================================
1  1117	    055A			 check_inttab:
1  1118	    055A  2E: F6 06 34ECr 08  +		 test	 cs:_misc_byte,00001000b
   1119		  90
1  1120	    0561  74 2D	90 90			 jz	 @@done
1  1121	    0565  66| 60			 pushad
1  1122	    0567  1E 06				 push	 ds es
1  1123	    0569  33 DB				 xor	 bx,bx
1  1124	    056B  2E: 8E 1E 352Ar		 mov	 ds,cs:_sel_ss
1  1125	    0570  2E: 8E 06 352Cr		 mov	 es,cs:_sel_zero
1  1126	    0575  66| BE 00000800		 mov	 esi,STACKSIZE*16
1  1127	    057B  66| 33 FF			 xor	 edi,edi
1  1128	    057E  66| 67| A7		 @@1:	 cmps	 dword ptr ds:[esi],[edi]
1  1129	    0581  75 0E	90 90			 jnz	 @@2
1  1130	    0585  43			 @@3:	 inc	 bx
1  1131	    0586  81 FB	0100			 cmp	 bx,256
1  1132	    058A  72 F2				 jb	 @@1
1  1133	    058C  07 1F				 pop	 es ds
1  1134	    058E  66| 61			 popad
1  1135	    0590  C3			 @@done: ret
1  1136	    0591  B8 9003		 @@2:	 mov	 ax,9003h
1  1137	    0594  53 56				 push	 bx si
1  1138	    0596  8B F3				 mov	 si,bx
1  1139	    0598  E8 FCD6			 call	 report_error
1  1140	    059B  5E 5B				 pop	 si bx
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 21
dos32a.asm



1  1141	    059D  EB E6				 jmp	 @@3
1  1142
1  1143					 ;=============================================================================
1  1144	    059F			 restore_pit:
1  1145	    059F  50				 push	 ax
1  1146	    05A0  B0 36				 mov	 al,36h			 ; reprogram PIT to DOS	freq
1  1147	    05A2  E6 43				 out	 43h,al
1  1148	    05A4  B0 00				 mov	 al,00h
1  1149	    05A6  E6 40				 out	 40h,al
1  1150	    05A8  E6 40				 out	 40h,al
1  1151	    05AA  58				 pop	 ax
1  1152	    05AB  C3				 ret
1  1153
1  1154					 ;=============================================================================
1  1155	    05AC			 set_descriptor:			 ; EDI=base, ECX=limit,	DX=access
1  1156	    05AC  66| 53 66| 51	66| 52+		 push	 ebx ecx edx ebp
   1157		  66| 55
1  1158	    05B4  66| 8B E9			 mov	 ebp,ecx
1  1159	    05B7  33 C0				 xor	 ax,ax			 ; allocate descriptor
1  1160	    05B9  B9 0001			 mov	 cx,1
1  1161	    05BC  CD 31				 int	 31h
1  1162	    05BE  72 31	90 90			 jc	 @@err
1  1163	    05C2  8B D8				 mov	 bx,ax
1  1164	    05C4  B8 0009			 mov	 ax,0009h		 ; set access rights
1  1165	    05C7  8B CA				 mov	 cx,dx
1  1166	    05C9  CD 31				 int	 31h
1  1167	    05CB  72 24	90 90			 jc	 @@err
1  1168	    05CF  48				 dec	 ax			 ; set limit
1  1169	    05D0  66| 8B CD			 mov	 ecx,ebp
1  1170	    05D3  8B D1				 mov	 dx,cx
1  1171	    05D5  66| C1 E9 10			 shr	 ecx,16
1  1172	    05D9  CD 31				 int	 31h
1  1173	    05DB  72 14	90 90			 jc	 @@err
1  1174	    05DF  48				 dec	 ax			 ; set base
1  1175	    05E0  66| 8B CF			 mov	 ecx,edi
1  1176	    05E3  8B D1				 mov	 dx,cx
1  1177	    05E5  66| C1 E9 10			 shr	 ecx,16
1  1178	    05E9  CD 31				 int	 31h
1  1179	    05EB  72 04	90 90			 jc	 @@err
1  1180	    05EF  8B C3				 mov	 ax,bx
1  1181	    05F1  66| 5D 66| 5A	66| 59+	 @@err:	 pop	 ebp edx ecx ebx
   1182		  66| 5B
1  1183	    05F9  C3				 ret
1  1184
1  1185					 ;=============================================================================
1  1186	    05FA  1E			 _int23: push	 ds			 ; handle CTRL-C INT 23h
1  1187	    05FB  2E: 8E 1E 3522r		 mov	 ds,cs:_sel_ds
1  1188	    0600  81 0E	34F2r 0100		 or	 _sys_misc,0100h
1  1189	    0606  1F				 pop	 ds
1  1190	    0607  66| CF			 iretd
1  1191
1  1192					 ;=============================================================================
1  1193	    0609  53			 int10h: push	 bx			 ; simulate INT	10h (VGA API)
1  1194	    060A  BB 0010			 mov	 bx,10h
1  1195	    060D  EB 0C	90			 jmp	 intxxh
1  1196
1  1197	    0610  53			 int33h: push	 bx			 ; simulate INT	33h (Mouse API)
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 22
dos32a.asm



1  1198	    0611  BB 0033			 mov	 bx,33h
1  1199	    0614  EB 05	90			 jmp	 intxxh
1  1200
1  1201	    0617  53			 int21h: push	 bx			 ; simulate INT	21h (DOS API)
1  1202	    0618  BB 0021			 mov	 bx,21h
1  1203
1  1204	    061B  51 66| 57 06		 intxxh: push	 cx edi	es
1  1205	    061F  66| 33 C0			 xor	 eax,eax
1  1206	    0622  67| 89 45 20			 mov	 [ebp+20h],ax		 ; clear Flags
1  1207	    0626  66| 67| 89 45	2E		 mov	 [ebp+2Eh],eax		 ; clear SS:SP
1  1208	    062B  33 C9				 xor	 cx,cx
1  1209	    062D  16				 push	 ss
1  1210	    062E  07				 pop	 es
1  1211	    062F  66| 8B FD			 mov	 edi,ebp
1  1212	    0632  B8 0300			 mov	 ax,0300h
1  1213	    0635  CD 31				 int	 31h
1  1214	    0637  07 66| 5F 59 5B		 pop	 es edi	cx bx
1  1215	    063C  0F 82	FE62			 jc	 dpmi_error
1  1216	    0640  C3				 ret
1  1217
1  1218
1  1219					 ;=============================================================================
1  1220	    0641			 setup_dta_buffer:
1  1221	    0641  66| 83 EC 32			 sub	 esp,32h
1  1222	    0645  66| 8B EC			 mov	 ebp,esp
1  1223	    0648  A1 3512r			 mov	 ax,_seg_ss
1  1224	    064B  05 0010			 add	 ax,0010h
1  1225	    064E  A3 3518r			 mov	 _seg_dta,ax		 ; DTA at offset STK_TOP + 0100h
1  1226	    0651  67| 89 45 24			 mov	 word ptr [ebp+24h],ax
1  1227	    0655  05 0008			 add	 ax,0008h
1  1228	    0658  A3 351Ar			 mov	 _seg_mus,ax		 ; MOUSE at offset STK_TOP + 0180h
1  1229	    065B  8C D0				 mov	 ax,ss
1  1230	    065D  A3 354Er			 mov	 _dta_sel,ax
1  1231	    0660  A3 3554r			 mov	 _app_dta_sel,ax
1  1232	    0663  66| B8 00000100		 mov	 eax,0100h
1  1233	    0669  66| A3 3550r			 mov	 _dta_off,eax
1  1234	    066D  66| A3 3556r			 mov	 _app_dta_off,eax
1  1235	    0671  67| C6 45 1D 1A		 mov	 byte ptr [ebp+1Dh],1Ah
1  1236	    0676  67| C7 45 14 0000		 mov	 word ptr [ebp+14h],0
1  1237	    067C  E8 FF98			 call	 int21h			 ; set up new DTA buffer
1  1238	    067F  66| 83 C4 32			 add	 esp,32h
1  1239	    0683  C3				 ret
1  1240
1  1241					 ;=============================================================================
1  1242	    0684			 initialize_mouse:
1  1243	    0684  1E				 push	 ds
1  1244	    0685  8E 1E	352Cr			 mov	 ds,_sel_zero
1  1245	    0689  66| 83 3E 00CC 00		 cmp	 dword ptr ds:[4*33h],0	 ; check if mouse INT 33h is installed
1  1246	    068F  1F				 pop	 ds
1  1247	    0690  74 53	90 90			 jz	 @@err			 ; if not, report warning
1  1248	    0694  B8 0021			 mov	 ax,0021h		 ; software reset mouse	handler
1  1249	    0697  CD 33				 int	 33h
1  1250	    0699  3D 0021			 cmp	 ax,0021h		 ; check if function supported
1  1251	    069C  75 0B	90 90			 jnz	 @@1			 ; if yes, go on
1  1252	    06A0  33 C0				 xor	 ax,ax			 ; try hardware	reset
1  1253	    06A2  CD 33				 int	 33h
1  1254	    06A4  40				 inc	 ax			 ; if failed, report warning
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 23
dos32a.asm



1  1255	    06A5  75 3E	90 90			 jnz	 @@err
1  1256	    06A9  B8 0015		 @@1:	 mov	 ax,0015h		 ; get mouse buffer size
1  1257	    06AC  CD 33				 int	 33h
1  1258	    06AE  66| 0F B7 C3			 movzx	 eax,bx
1  1259	    06B2  66| 3B 06 3546r		 cmp	 eax,_lobufsize
1  1260	    06B7  73 2C	90 90			 jae	 @@err
1  1261	    06BB  66| A3 34FCr			 mov	 _mus_size,eax
1  1262	    06BF  1E 06				 push	 ds es
1  1263	    06C1  0E				 push	 cs
1  1264	    06C2  1F				 pop	 ds
1  1265	    06C3  16				 push	 ss
1  1266	    06C4  07				 pop	 es
1  1267	    06C5  66| BE 000026C4r		 mov	 esi,offs _mus_int_pm
1  1268	    06CB  66| BF 000007C0		 mov	 edi,STACKSIZE*16-40h
1  1269	    06D1  B8 0303			 mov	 ax,0303h
1  1270	    06D4  CD 31				 int	 31h
1  1271	    06D6  07 1F				 pop	 es ds
1  1272	    06D8  0F 82	FDC6			 jc	 dpmi_error
1  1273	    06DC  89 16	3500r			 mov	 _mus_backoff,dx
1  1274	    06E0  89 0E	3502r			 mov	 _mus_backseg,cx
1  1275	    06E4  C3				 ret
1  1276	    06E5  C7 06	2593r CF66	 @@err:	 mov	 word ptr _int33,0CF66h
1  1277	    06EB  B8 9004			 mov	 ax,9004h
1  1278	    06EE  E9 FB80			 jmp	 report_error		 ; "mouse init failed"
1  1279
1  1280					 ;=============================================================================
1  1281	    06F1			 install_client_ints:
1  1282	    06F1  B8 0205			 mov	 ax,0205h
1  1283	    06F4  8C C9				 mov	 cx,cs
1  1284	    06F6  B3 10				 mov	 bl,10h
1  1285	    06F8  66| BA 0000151Br		 mov	 edx,offs _int10
1  1286	    06FE  CD 31				 int	 31h
1  1287	    0700  72 59	90 90			 jc	 @@err
1  1288	    0704  B3 21				 mov	 bl,21h
1  1289	    0706  BA 184Fr			 mov	 dx,offs _int21
1  1290	    0709  CD 31				 int	 31h
1  1291	    070B  72 4E	90 90			 jc	 @@err
1  1292	    070F  B3 33				 mov	 bl,33h
1  1293	    0711  BA 2593r			 mov	 dx,offs _int33
1  1294	    0714  CD 31				 int	 31h
1  1295	    0716  72 43	90 90			 jc	 @@err
1  1296	    071A  B3 23				 mov	 bl,23h
1  1297	    071C  BA 05FAr			 mov	 dx,offs _int23
1  1298	    071F  CD 31				 int	 31h
1  1299	    0721  72 38	90 90			 jc	 @@err
1  1300
1  1301	    0725  2E: 80 3E 34F1r 03		 cmp	 cs:_sys_type,3		 ; install exception handling only
1  1302	    072B  F8				 clc
1  1303	    072C  75 2D	90 90			 jnz	 @@err			 ;  when running under external	DPMI
1  1304	    0730  B8 0203			 mov	 ax,0203h
1  1305	    0733  B3 00				 mov	 bl,00h
1  1306	    0735  BA 1294r			 mov	 dx,offs _exc00
1  1307	    0738  CD 31				 int	 31h
1  1308	    073A  72 1F	90 90			 jc	 @@err
1  1309	    073E  B3 06				 mov	 bl,06h
1  1310	    0740  BA 1299r			 mov	 dx,offs _exc06
1  1311	    0743  CD 31				 int	 31h
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 24
dos32a.asm



1  1312	    0745  72 14	90 90			 jc	 @@err
1  1313	    0749  B3 0D				 mov	 bl,0Dh
1  1314	    074B  BA 129Er			 mov	 dx,offs _exc0D
1  1315	    074E  CD 31				 int	 31h
1  1316	    0750  72 09	90 90			 jc	 @@err
1  1317	    0754  B3 0E				 mov	 bl,0Eh
1  1318	    0756  BA 12A3r			 mov	 dx,offs _exc0E
1  1319	    0759  CD 31				 int	 31h
1  1320
1  1321	    075B  C3			 @@err:	 ret
1  1322
1  1323					 ;=============================================================================
1  1324	    075C			 uninstall_client_ints:
1  1325	    075C  B8 0205			 mov	 ax,0205h
1  1326	    075F  B3 10				 mov	 bl,10h
1  1327	    0761  2E: 8B 0E 355Er		 mov	 cx,word ptr cs:_int10_cs
1  1328	    0766  66| 2E: 8B 16	355Ar		 mov	 edx,dword ptr cs:_int10_ip
1  1329	    076C  CD 31				 int	 31h
1  1330	    076E  B3 21				 mov	 bl,21h
1  1331	    0770  2E: 8B 0E 3566r		 mov	 cx,word ptr cs:_int21_cs
1  1332	    0775  66| 2E: 8B 16	3562r		 mov	 edx,dword ptr cs:_int21_ip
1  1333	    077B  CD 31				 int	 31h
1  1334	    077D  B3 33				 mov	 bl,33h
1  1335	    077F  2E: 8B 0E 356Er		 mov	 cx,word ptr cs:_int33_cs
1  1336	    0784  66| 2E: 8B 16	356Ar		 mov	 edx,dword ptr cs:_int33_ip
1  1337	    078A  CD 31				 int	 31h
1  1338	    078C  B3 23				 mov	 bl,23h
1  1339	    078E  2E: 8B 0E 3576r		 mov	 cx,word ptr cs:_int23_cs
1  1340	    0793  66| 2E: 8B 16	3572r		 mov	 edx,dword ptr cs:_int23_ip
1  1341	    0799  CD 31				 int	 31h
1  1342
1  1343	    079B  2E: 80 3E 34F1r 03		 cmp	 cs:_sys_type,3		 ; uninstall exception handling	only
1  1344	    07A1  F8				 clc
1  1345	    07A2  75 41	90 90			 jnz	 @@done			 ;  when running under external	DPMI
1  1346	    07A6  B8 0203			 mov	 ax,0203h
1  1347	    07A9  B3 00				 mov	 bl,00h
1  1348	    07AB  2E: 8B 0E 357Er		 mov	 cx,word ptr cs:_exc00_cs
1  1349	    07B0  66| 2E: 8B 16	357Ar		 mov	 edx,dword ptr cs:_exc00_ip
1  1350	    07B6  CD 31				 int	 31h
1  1351	    07B8  B3 06				 mov	 bl,06h
1  1352	    07BA  2E: 8B 0E 3586r		 mov	 cx,word ptr cs:_exc06_cs
1  1353	    07BF  66| 2E: 8B 16	3582r		 mov	 edx,dword ptr cs:_exc06_ip
1  1354	    07C5  CD 31				 int	 31h
1  1355	    07C7  B3 0D				 mov	 bl,0Dh
1  1356	    07C9  2E: 8B 0E 358Er		 mov	 cx,word ptr cs:_exc0D_cs
1  1357	    07CE  66| 2E: 8B 16	358Ar		 mov	 edx,dword ptr cs:_exc0D_ip
1  1358	    07D4  CD 31				 int	 31h
1  1359	    07D6  B3 0E				 mov	 bl,0Eh
1  1360	    07D8  2E: 8B 0E 3596r		 mov	 cx,word ptr cs:_exc0E_cs
1  1361	    07DD  66| 2E: 8B 16	3592r		 mov	 edx,dword ptr cs:_exc0E_ip
1  1362	    07E3  CD 31				 int	 31h
1  1363
1  1364	    07E5  C3			 @@done: ret
1  1365
1  1366					 ;=============================================================================
1  1367	    07E6			 install_nullptr_protect:
1  1368	    07E6  80 3E	34F1r 03		 cmp	 _sys_type,3
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 25
dos32a.asm



1  1369	    07EB  74 2D	90 90			 jz	 @@done
1  1370	    07EF  F6 06	34ECr 80 90		 test	 _misc_byte,10000000b
1  1371	    07F5  74 23	90 90			 jz	 @@done
1  1372	    07F9  66| 33 C0			 xor	 eax,eax		 ; install null-pointer	protection
1  1373	    07FC  0F 23	F0			 mov	 dr6,eax
1  1374	    07FF  0F 23	C0			 mov	 dr0,eax
1  1375	    0802  04 04				 add	 al,04h
1  1376	    0804  0F 23	C8			 mov	 dr1,eax
1  1377	    0807  04 04				 add	 al,04h
1  1378	    0809  0F 23	D0			 mov	 dr2,eax
1  1379	    080C  04 04				 add	 al,04h
1  1380	    080E  0F 23	D8			 mov	 dr3,eax
1  1381	    0811  66| B8 DDDD03FF		 mov	 eax,0DDDD03FFh
1  1382	    0817  0F 23	F8			 mov	 dr7,eax
1  1383	    081A  C3			 @@done: ret
1  1384
1  1385					 ;=============================================================================
1  1386	    081B			 setup_selectors:
1  1387	    081B  66| 33 FF			 xor	 edi,edi		 ; base	= 0
1  1388	    081E  66| 83 C9 FF			 or	 ecx,-1			 ; limit = 4GB
1  1389	    0822  8C C8				 mov	 ax,cs			 ; get CS selector
1  1390	    0824  0F 02	D0			 lar	 dx,ax
1  1391	    0827  B2 C0				 mov	 dl,0C0h
1  1392	    0829  86 F2				 xchg	 dh,dl
1  1393	    082B  80 E2	60			 and	 dl,60h
1  1394	    082E  80 CA	92			 or	 dl,92h
1  1395	    0831  89 16	34FAr			 mov	 _acc_rights,dx		 ; set std selector access rights
1  1396	    0835  E8 FD74			 call	 set_descriptor		 ; allocate descriptor
1  1397	    0838  72 16	90 90			 jc	 @@err
1  1398	    083C  A3 352Cr			 mov	 _sel_zero,ax
1  1399	    083F  B8 0008			 mov	 ax,0008h		 ; resize DS limit to 4GB
1  1400	    0842  8C DB				 mov	 bx,ds			 ; this	might be needed	to access
1  1401	    0844  B9 FFFF			 mov	 cx,0FFFFh		 ; DOS buffer which is it self 64KB
1  1402	    0847  8B D1				 mov	 dx,cx
1  1403	    0849  CD 31				 int	 31h
1  1404	    084B  72 03	90 90			 jc	 @@err
1  1405	    084F  C3				 ret
1  1406	    0850  B8 4CFF		 @@err:	 mov	 ax,4CFFh
1  1407	    0853  CD 21				 int	 21h
1  1408
1  1409
1  1410
1  1411
1  1412
1  1413					 ;=============================================================================
1  1414	    0855			 check_command_line:
1  1415	    0855  BF 0080			 mov	 di,80h
1  1416	    0858  26: 0F B6 0D			 movzx	 cx,es:[di]		 ; get length of command line
1  1417	    085C  E3 2E				 jcxz	 @@err			 ; if zero, error
1  1418	    085E  47				 inc	 di			 ; offset to start of command line
1  1419	    085F  B0 20				 mov	 al,20h
1  1420	    0861  F3> AE			 repe	 scasb			 ; look	for non-space character
1  1421	    0863  74 27	90 90			 jz	 @@err			 ; if not found, error
1  1422	    0867  4F				 dec	 di
1  1423	    0868  41				 inc	 cx
1  1424	    0869  8B DF				 mov	 bx,di
1  1425	    086B  26: 8A 05		 @@1:	 mov	 al,es:[di]
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 26
dos32a.asm



1  1426	    086E  3C 09				 cmp	 al,09h			 ; look	for TAB	character
1  1427	    0870  74 11	90 90			 jz	 @@2
1  1428	    0874  3C 0D				 cmp	 al,0Dh			 ; look	for CR character
1  1429	    0876  74 0B	90 90			 jz	 @@2
1  1430	    087A  3C 20				 cmp	 al,20h			 ; look	for ' '	character
1  1431	    087C  74 05	90 90			 jz	 @@2
1  1432	    0880  47				 inc	 di
1  1433	    0881  E2 E8				 loop	 @@1
1  1434	    0883  8B CF			 @@2:	 mov	 cx,di
1  1435	    0885  8B F3				 mov	 si,bx			 ; SI =	pointer	to file	name
1  1436	    0887  8B FB				 mov	 di,bx			 ; DI =	pointer	to file	name
1  1437	    0889  2B CB				 sub	 cx,bx			 ; CX =	file name length
1  1438	    088B  C3			 @@done: ret
1  1439	    088C  33 F6			 @@err:	 xor	 si,si
1  1440	    088E  C3				 ret
1  1441
1  1442					 ;=============================================================================
1  1443	    088F			 remove_name_from_cmd:
1  1444	    088F  E8 FFC3			 call	 check_command_line
1  1445	    0892  74 06	90 90			 jz	 @@done
1  1446	    0896  B0 20				 mov	 al,20h
1  1447	    0898  F3> AA			 rep	 stosb
1  1448	    089A  C3			 @@done: ret
1  1449
1  1450					 ;=============================================================================
1  1451	    089B			 check_if_fullname:
1  1452	    089B  1E 06				 push	 ds es
1  1453	    089D  E8 FFB5			 call	 check_command_line
1  1454	    08A0  74 1C	90 90			 jz	 @@done
1  1455	    08A4  B0 5C				 mov	 al,'\'
1  1456	    08A6  8B D9				 mov	 bx,cx
1  1457	    08A8  F2> AE			 repne	 scasb
1  1458	    08AA  E3 12				 jcxz	 @@done
1  1459	    08AC  1E 06				 push	 ds es
1  1460	    08AE  1F 07				 pop	 ds es
1  1461	    08B0  8B CB				 mov	 cx,bx
1  1462	    08B2  BF 3144r			 mov	 di,offs start+40h
1  1463	    08B5  F3> A4			 rep	 movsb
1  1464	    08B7  32 C0				 xor	 al,al
1  1465	    08B9  AA				 stosb
1  1466	    08BA  07 1F			 @@full: pop	 es ds
1  1467	    08BC  F9				 stc
1  1468	    08BD  C3				 ret
1  1469	    08BE  07 1F			 @@done: pop	 es ds
1  1470	    08C0  F8				 clc
1  1471	    08C1  C3				 ret
1  1472
1  1473					 ;=============================================================================
1  1474	    08C2			 update_environment:
1  1475	    08C2  1E 06				 push	 ds es
1  1476	    08C4  E8 FFD4			 call	 check_if_fullname		 ; check if full path provided
1  1477	    08C7  72 42	90 90			 jc	 @@skip				 ; if yes, skip	copying
1  1478	    08CB  B4 19				 mov	 ah,19h
1  1479	    08CD  CD 21				 int	 21h				 ; get drive letter
1  1480	    08CF  8A D0				 mov	 dl,al
1  1481	    08D1  04 41				 add	 al,'A'
1  1482	    08D3  A2 3144r			 mov	 byte ptr [start+40h],al	 ; set drive
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 27
dos32a.asm



1  1483	    08D6  C7 06	3145r 5C3A		 mov	 word ptr [start+41h],'\:'
1  1484	    08DC  42				 inc	 dx
1  1485	    08DD  B4 47				 mov	 ah,47h
1  1486	    08DF  66| BE 00003147r		 mov	 esi,offs start+43h
1  1487	    08E5  CD 21				 int	 21h				 ; get current directory
1  1488	    08E7  1E				 push	 ds
1  1489	    08E8  07				 pop	 es
1  1490	    08E9  32 C0				 xor	 al,al
1  1491	    08EB  8B FE				 mov	 di,si
1  1492	    08ED  B9 0040			 mov	 cx,64
1  1493	    08F0  F2> AE			 repne	 scasb				 ; get length of dir string
1  1494	    08F2  80 7D	FE 5C			 cmp	 byte ptr [di-2],'\'
1  1495	    08F6  75 03	90 90			 jnz	 @@0
1  1496	    08FA  4F				 dec	 di
1  1497	    08FB  C6 45	FF 5C		 @@0:	 mov	 byte ptr [di-1],'\'
1  1498	    08FF  BE 3104r			 mov	 si,offs start
1  1499	    0902  B9 0040			 mov	 cx,64
1  1500	    0905  AC			 @@1:	 lodsb
1  1501	    0906  AA				 stosb
1  1502	    0907  84 C0				 test	 al,al
1  1503	    0909  E0 FA				 loopne	 @@1
1  1504	    090B  1E			 @@skip: push	 ds
1  1505	    090C  07				 pop	 es
1  1506	    090D  32 C0				 xor	 al,al
1  1507	    090F  B9 FFFF			 mov	 cx,-1
1  1508	    0912  BF 3144r			 mov	 di,offs start+40h
1  1509	    0915  F2> AE			 repne	 scasb
1  1510	    0917  F7 D1				 not	 cx
1  1511	    0919  8B D9				 mov	 bx,cx
1  1512	    091B  07				 pop	 es
1  1513	    091C  06				 push	 es
1  1514	    091D  26: A1 002C			 mov	 ax,es:[002Ch]		 ; get environment selector
1  1515	    0921  85 C0				 test	 ax,ax			 ; check if selector is	NULL
1  1516	    0923  74 34	90 90			 jz	 @@err			 ; if yes, jump	to error
1  1517	    0927  0F 02	C8			 lar	 cx,ax
1  1518	    092A  75 2D	90 90			 jnz	 @@err
1  1519	    092E  8E C0				 mov	 es,ax
1  1520	    0930  32 C0				 xor	 al,al
1  1521	    0932  33 FF				 xor	 di,di
1  1522	    0934  B9 FFFF			 mov	 cx,-1
1  1523	    0937  F2> AE		 @@2:	 repne	 scasb
1  1524	    0939  AE				 scasb
1  1525	    093A  75 FB				 jnz	 @@2
1  1526	    093C  47				 inc	 di
1  1527	    093D  47				 inc	 di
1  1528	    093E  B9 FFFF			 mov	 cx,-1
1  1529	    0941  8B D7				 mov	 dx,di
1  1530	    0943  F2> AE			 repne	 scasb
1  1531	    0945  F7 D1				 not	 cx
1  1532	    0947  3B D9				 cmp	 bx,cx
1  1533	    0949  77 14	90 90			 ja	 create_new_environment
1  1534	    094D  8B CB				 mov	 cx,bx
1  1535	    094F  8B FA				 mov	 di,dx
1  1536	    0951  BE 3144r			 mov	 si,offs start+40h
1  1537	    0954  F3> A4			 rep	 movsb
1  1538	    0956  07 1F				 pop	 es ds
1  1539	    0958  C3				 ret
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 28
dos32a.asm



1  1540	    0959  B8 2000		 @@err:	 mov	 ax,2000h
1  1541	    095C  E9 F912			 jmp	 report_error
1  1542
1  1543	    095F			 create_new_environment:
1  1544	    095F  53				 push	 bx
1  1545	    0960  B9 FFFF			 mov	 cx,-1
1  1546	    0963  33 FF				 xor	 di,di
1  1547	    0965  F2> AE		 @@1:	 repne	 scasb			 ; get size of environment
1  1548	    0967  49				 dec	 cx
1  1549	    0968  AE				 scasb
1  1550	    0969  75 FA				 jnz	 @@1
1  1551	    096B  F7 D1				 not	 cx
1  1552	    096D  41				 inc	 cx
1  1553	    096E  41				 inc	 cx
1  1554	    096F  51				 push	 cx
1  1555	    0970  03 D9				 add	 bx,cx
1  1556	    0972  C1 EB	04			 shr	 bx,4
1  1557	    0975  43				 inc	 bx
1  1558	    0976  B8 0100			 mov	 ax,0100h
1  1559	    0979  CD 31				 int	 31h
1  1560	    097B  59				 pop	 cx
1  1561	    097C  72 1C	90 90			 jc	 @@err
1  1562	    0980  06				 push	 es
1  1563	    0981  1F				 pop	 ds
1  1564	    0982  8E C2				 mov	 es,dx
1  1565	    0984  33 F6				 xor	 si,si
1  1566	    0986  33 FF				 xor	 di,di
1  1567	    0988  F3> A4			 rep	 movsb
1  1568	    098A  59				 pop	 cx
1  1569	    098B  BE 3144r			 mov	 si,offs start+40h
1  1570	    098E  0E				 push	 cs
1  1571	    098F  1F				 pop	 ds
1  1572	    0990  F3> A4			 rep	 movsb
1  1573	    0992  07 1F				 pop	 es ds
1  1574	    0994  26: 89 16 002C		 mov	 es:[002Ch],dx
1  1575	    0999  C3				 ret
1  1576	    099A  B8 2000		 @@err:	 mov	 ax,2000h
1  1577	    099D  E9 F8D1			 jmp	 report_error
1  1578
1  1579
1  1580					 ;=============================================================================
1  1581	    09A0			 open_exec:
1  1582	    09A0  1E 06				 push	 ds es
1  1583	    09A2  26: A1 002C			 mov	 ax,es:[002Ch]		 ; get environment selector
1  1584	    09A6  85 C0				 test	 ax,ax			 ; check if selector is	NULL
1  1585	    09A8  74 42	90 90			 jz	 @@err			 ; if yes, jump	to error
1  1586	    09AC  0F 02	C8			 lar	 cx,ax
1  1587	    09AF  75 3B	90 90			 jnz	 @@err
1  1588	    09B3  8E C0				 mov	 es,ax
1  1589	    09B5  33 C0				 xor	 ax,ax
1  1590	    09B7  33 FF				 xor	 di,di
1  1591	    09B9  B9 FFFF			 mov	 cx,0FFFFh
1  1592	    09BC  F2> AE		 @@1:	 repne	 scasb			 ; look	for end	of environment
1  1593	    09BE  AE				 scasb
1  1594	    09BF  E3 2B				 jcxz	 @@err			 ; reached end of environment
1  1595	    09C1  75 F9				 jnz	 @@1
1  1596	    09C3  47				 inc	 di
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 29
dos32a.asm



1  1597	    09C4  47				 inc	 di
1  1598	    09C5  1E 06				 push	 ds es
1  1599	    09C7  1F 07				 pop	 ds es
1  1600	    09C9  57				 push	 di
1  1601	    09CA  8B F7				 mov	 si,di
1  1602	    09CC  BF 3104r			 mov	 di,offs start
1  1603	    09CF  AC			 @@2:	 lodsb
1  1604	    09D0  AA				 stosb
1  1605	    09D1  84 C0				 test	 al,al
1  1606	    09D3  75 FA				 jnz	 @@2
1  1607	    09D5  5F				 pop	 di
1  1608	    09D6  66| 0F B7 D7			 movzx	 edx,di			 ; DS:EDX = pointer to exec name
1  1609	    09DA  B8 3DC0			 mov	 ax,3DC0h		 ; open	file
1  1610	    09DD  CD 21				 int	 21h
1  1611	    09DF  07 1F				 pop	 es ds
1  1612	    09E1  A3 3688r			 mov	 _exec_handle,ax	 ; store file handle
**Error** TEXT\CLIENT\misc.asm(609) Undefined symbol: @AREA1_DW
1  1613	    09E4  B8 2001			 mov	 ax,2001h
1  1614	    09E7  0F 82	FAA3			 jc	 file_error		 ; if error, jump
1  1615	    09EB  C3				 ret
1  1616	    09EC  B8 2000		 @@err:	 mov	 ax,2000h
1  1617	    09EF  E9 F87F			 jmp	 report_error
1  1618
1  1619
1  1620
1  1621
1  1622					 ;=============================================================================
1  1623	    09F2			 load_exec_header:
1  1624	    09F2  66| 33 D2			 xor	 edx,edx		 ; DS:EDX = ptr
1  1625	    09F5  66| B9 00000040		 mov	 ecx,64			 ; ECX = 64 bytes to load
1  1626	    09FB  C7 06	34F8r 2002		 mov	 _err_code,2002h	 ; "error in exec file"
1  1627	    0A01  E8 01EF			 call	 load_fs_block
1  1628	    0A04  64: 81 3E 0000 5A4D		 cmp	 word ptr fs:[0000h],'ZM'; exec	must be	'MZ' file type
1  1629	    0A0B  0F 85	FA85			 jnz	 file_errorm
1  1630	    0A0F  66| 64: A1 003C		 mov	 eax,fs:[003Ch]		 ; get start of	32-bit code
1  1631	    0A14  66| 64: 8B 16	0018		 mov	 edx,fs:[0018h]		 ; get start of	MZ reloc-table
1  1632	    0A1A  66| A3 368Cr			 mov	 _exec_start,eax
**Error** TEXT\CLIENT\misc.asm(629) Undefined symbol: @AREA1_DD
1  1633	    0A1E  C3				 ret
1  1634
1  1635
1  1636
1  1637
1  1638					 ;=============================================================================
1  1639	    0A1F			 open_extrn_exec:
1  1640	    0A1F  1E 06				 push	 ds es
1  1641	    0A21  1E 06				 push	 ds es			 ; swap	DS and ES
1  1642	    0A23  1F 07				 pop	 ds es
1  1643	    0A25  BF 3104r			 mov	 di,offs start		 ; copy	application exec name
1  1644	    0A28  F3> A4			 rep	 movsb
1  1645	    0A2A  06				 push	 es
1  1646	    0A2B  1F				 pop	 ds
1  1647	    0A2C  C6 05	00			 mov	 byte ptr [di],0
1  1648	    0A2F  66| BA 00003104r		 mov	 edx,offs start
1  1649	    0A35  B8 3DC0			 mov	 ax,3DC0h
1  1650	    0A38  CD 21				 int	 21h
1  1651	    0A3A  72 08	90 90			 jc	 @@1			 ; if error opening, try ".EXE"
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 30
dos32a.asm



1  1652	    0A3E  07 1F				 pop	 es ds
1  1653	    0A40  A3 3688r			 mov	 _exec_handle,ax
**Error** TEXT\CLIENT\misc.asm(650) Undefined symbol: @AREA1_DW
1  1654	    0A43  C3				 ret
1  1655
1  1656	    0A44  BB 3104r		 @@1:	 mov	 bx,offs start
1  1657	    0A47  80 3F	2E		 @@2:	 cmp	 byte ptr [bx],2Eh
1  1658	    0A4A  F9				 stc
1  1659	    0A4B  74 31	90 90			 jz	 @@err
1  1660	    0A4F  43				 inc	 bx
1  1661	    0A50  3B DF				 cmp	 bx,di
1  1662	    0A52  72 F3				 jb	 @@2
1  1663	    0A54  66| B8 4558452E		 mov	 eax,4558452Eh
1  1664	    0A5A  66| 3B 45 FC			 cmp	 eax,[di-4]
1  1665	    0A5E  F9				 stc
1  1666	    0A5F  74 1D	90 90			 jz	 @@err
1  1667	    0A63  66| B8 6578652E		 mov	 eax,6578652Eh
1  1668	    0A69  66| 3B 45 FC			 cmp	 eax,[di-4]
1  1669	    0A6D  F9				 stc
1  1670	    0A6E  74 0E	90 90			 jz	 @@err
1  1671	    0A72  66| 89 05			 mov	 [di],eax
1  1672	    0A75  C6 45	04 00			 mov	 byte ptr [di+4],0
1  1673	    0A79  B8 3DC0			 mov	 ax,3DC0h
1  1674	    0A7C  CD 21				 int	 21h
1  1675	    0A7E  07 1F			 @@err:	 pop	 es ds
1  1676	    0A80  A3 3688r			 mov	 _exec_handle,ax
**Error** TEXT\CLIENT\misc.asm(673) Undefined symbol: @AREA1_DW
1  1677	    0A83  B8 3001			 mov	 ax,3001h
1  1678	    0A86  0F 82	FA04			 jc	 file_error
1  1679	    0A8A  C3				 ret
1  1680
1  1681
1  1682					 ;=============================================================================
1  1683	    0A8B			 load_extrn_exec_header:
1  1684	    0A8B  66| 33 D2			 xor	 edx,edx		 ; DS:EDX = ptr
1  1685	    0A8E  66| B9 00000040		 mov	 ecx,64			 ; ECX = 64 bytes to load
1  1686	    0A94  C7 06	34F8r 3002		 mov	 _err_code,3002h	 ; "error in app file"
1  1687	    0A9A  E8 0156			 call	 load_fs_block
1  1688	    0A9D  E8 012F			 call	 seek_from_start	 ; move	to file	start
1  1689
1  1690	    0AA0  66| 33 ED			 xor	 ebp,ebp
1  1691	    0AA3  66| 89 2E 368Cr		 mov	 _exec_start,ebp	 ; default start of exec offset	and
**Error** TEXT\CLIENT\misc.asm(688) Undefined symbol: @AREA1_DD
1  1692	    0AA8  66| 89 2E 36ACr		 mov	 _app_off_datapages,ebp	 ;  LE/LX data offset in file
**Error** TEXT\CLIENT\misc.asm(689) Undefined symbol: @AREA1_DD
1  1693	    0AAD  64: 81 3E 0000 5A4D		 cmp	 word ptr fs:[0000h],'ZM'; is exec 'MZ'	file type
1  1694	    0AB4  0F 85	00C4			 jnz	 search_for_le		 ; if not, search for known exec type
1  1695	    0AB8  66| 64: A1 0018		 mov	 eax,fs:[0018h]		 ; MZ reloc-tab	must be	at offset 0040h
1  1696	    0ABD  3D 0040			 cmp	 ax,40h
1  1697	    0AC0  75 12	90 90			 jnz	 search_for_mz
1  1698	    0AC4  66| 64: A1 003C		 mov	 eax,fs:[003Ch]		 ; if yes, get start of	32-bit code
1  1699	    0AC9  85 C0				 test	 ax,ax			 ; check if it is bound
1  1700	    0ACB  74 07	90 90			 jz	 search_for_mz		 ; if not, search
1  1701	    0ACF  66| A3 368Cr			 mov	 _exec_start,eax
**Error** TEXT\CLIENT\misc.asm(698) Undefined symbol: @AREA1_DD
1  1702	    0AD3  C3				 ret
1  1703
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 31
dos32a.asm



1  1704
1  1705	    0AD4			 search_for_mz:
1  1706	    0AD4  66| 33 F6			 xor	 esi,esi
1  1707	    0AD7  66| 64: 0F B7	06    +	 @@0:	 movzx	 eax,word ptr fs:[0004h] ; get pages in	file
   1708		  0004
1  1709	    0ADE  66| C1 E0 09			 shl	 eax,9			 ; *512
1  1710	    0AE2  66| 64: 0F B7	1E    +		 movzx	 ebx,word ptr fs:[0002h] ; get bytes on	last page
   1711		  0002
1  1712	    0AE9  66| 03 C3			 add	 eax,ebx
1  1713	    0AEC  64: 8B 1E 0000		 mov	 bx,fs:[0000h]
1  1714	    0AF1  81 FB	5A4D			 cmp	 bx,'ZM'
1  1715	    0AF5  74 0D	90 90			 jz	 @@1
1  1716	    0AF9  81 FB	5742			 cmp	 bx,'WB'
1  1717	    0AFD  74 0B	90 90			 jz	 @@2
1  1718	    0B01  EB 2A	90			 jmp	 @@3
1  1719	    0B04  66| 2D 00000200	 @@1:	 sub	 eax,0200h
1  1720	    0B0A  66| 8B F5		 @@2:	 mov	 esi,ebp
1  1721	    0B0D  66| 03 E8			 add	 ebp,eax
1  1722	    0B10  66| 8B D5			 mov	 edx,ebp
1  1723	    0B13  E8 00B9			 call	 seek_from_start
1  1724	    0B16  66| B9 00000040		 mov	 ecx,64
1  1725	    0B1C  66| 33 D2			 xor	 edx,edx
1  1726	    0B1F  E8 00D1			 call	 load_fs_block
1  1727	    0B22  66| 85 C0			 test	 eax,eax
1  1728	    0B25  75 B0				 jnz	 @@0
1  1729	    0B27  B8 3003			 mov	 ax,3003h
1  1730	    0B2A  E9 F961			 jmp	 file_error		 ; if zero, no app in file
1  1731	    0B2D  64: 8B 1E 0000	 @@3:	 mov	 bx,fs:[0000h]
1  1732	    0B32  81 FB	454C			 cmp	 bx,'EL'
1  1733	    0B36  74 1B	90 90			 jz	 @@4
1  1734	    0B3A  81 FB	584C			 cmp	 bx,'XL'
1  1735	    0B3E  74 13	90 90			 jz	 @@4
1  1736	    0B42  81 FB	434C			 cmp	 bx,'CL'
1  1737	    0B46  74 0B	90 90			 jz	 @@4
1  1738	    0B4A  66| 8B D5			 mov	 edx,ebp
1  1739	    0B4D  E8 007F			 call	 seek_from_start
1  1740	    0B50  E8 0029			 call	 search_for_le
1  1741	    0B53  66| 3B C6		 @@4:	 cmp	 eax,esi
1  1742	    0B56  74 23	90 90			 jz	 @@5
1  1743	    0B5A  66| 8B D6			 mov	 edx,esi
1  1744	    0B5D  66| 83 C0 10			 add	 eax,10h
1  1745	    0B61  66| 83 C2 10			 add	 edx,10h
1  1746	    0B65  24 F0				 and	 al,0F0h
1  1747	    0B67  80 E2	F0			 and	 dl,0F0h
1  1748	    0B6A  66| 3B C2			 cmp	 eax,edx
1  1749	    0B6D  74 0C	90 90			 jz	 @@5
1  1750	    0B71  66| 89 2E 368Cr		 mov	 _exec_start,ebp
**Error** TEXT\CLIENT\misc.asm(745) Undefined symbol: @AREA1_DD
1  1751	    0B76  66| 89 36 36ACr		 mov	 _app_off_datapages,esi
**Error** TEXT\CLIENT\misc.asm(746) Undefined symbol: @AREA1_DD
1  1752	    0B7B  C3			 @@5:	 ret
1  1753
1  1754	    0B7C			 search_for_le:
1  1755	    0B7C  66| 8B 16 353Er	 @@1:	 mov	 edx,_lobufzero		 ; DS:EDX = current ptr
1  1756	    0B81  66| 8B 0E 3546r		 mov	 ecx,_lobufsize		 ; ECX = bytes to load
1  1757	    0B86  E8 0072			 call	 load_gs_block
1  1758	    0B89  85 C0				 test	 ax,ax			 ; check if no bytes read
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 32
dos32a.asm



1  1759	    0B8B  B8 3003			 mov	 ax,3003h
1  1760	    0B8E  0F 84	F8FC			 jz	 file_error		 ; if true, no app in file
1  1761	    0B92  D1 E9				 shr	 cx,1
1  1762	    0B94  65: 67| 8B 02		 @@2:	 mov	 ax,gs:[edx+0]
1  1763	    0B98  65: 67| 8B 5A	02		 mov	 bx,gs:[edx+2]
1  1764	    0B9D  85 DB				 test	 bx,bx
1  1765	    0B9F  75 17	90 90			 jnz	 @@4
1  1766	    0BA3  3D 454C			 cmp	 ax,'EL'		 ; 'LE'	type
1  1767	    0BA6  74 1C	90 90			 jz	 @@3
1  1768	    0BAA  3D 584C			 cmp	 ax,'XL'		 ; 'LX'	type
1  1769	    0BAD  74 15	90 90			 jz	 @@3
1  1770	    0BB1  3D 434C			 cmp	 ax,'CL'		 ; 'LC'	type
1  1771	    0BB4  74 0E	90 90			 jz	 @@3
1  1772	    0BB8  66| 83 C2 02		 @@4:	 add	 edx,2
1  1773	    0BBC  66| 83 C5 02			 add	 ebp,2			 ; increment pointer in	file
1  1774	    0BC0  E2 D2				 loop	 @@2
1  1775	    0BC2  EB B8				 jmp	 @@1
1  1776	    0BC4  C3			 @@3:	 ret
1  1777
1  1778
1  1779
1  1780
1  1781
1  1782					 ;=============================================================================
1  1783	    0BC5			 close_exec:
1  1784	    0BC5  2E: 8B 1E 3688r		 mov	 bx,cs:_exec_handle
**Error** TEXT\CLIENT\misc.asm(779) Undefined symbol: @AREA1_DW
1  1785	    0BCA  B4 3E				 mov	 ah,3Eh
1  1786	    0BCC  CD 21				 int	 21h
1  1787	    0BCE  C3				 ret
1  1788
1  1789
1  1790					 ;=============================================================================
1  1791	    0BCF			 seek_from_start:
1  1792	    0BCF  53 66| 51 66|	52 66|+		 push	 bx ecx	edx eax
   1793		  50
1  1794	    0BD6  66| 8B CA			 mov	 ecx,edx
1  1795	    0BD9  66| C1 E9 10			 shr	 ecx,16
1  1796	    0BDD  2E: 8B 1E 3688r		 mov	 bx,cs:_exec_handle
**Error** TEXT\CLIENT\misc.asm(790) Undefined symbol: @AREA1_DW
1  1797	    0BE2  B8 4200			 mov	 ax,4200h
1  1798	    0BE5  CD 21				 int	 21h
1  1799	    0BE7  66| 58 66| 5A	66| 59+		 pop	 eax edx ecx bx
   1800		  5B
1  1801	    0BEE  0F 82	F8A2			 jc	 file_errorm
1  1802	    0BF2  C3				 ret
1  1803
1  1804
1  1805					 ;=============================================================================
1  1806	    0BF3			 load_fs_block:
1  1807	    0BF3  53 1E	0F A0			 push	 bx ds fs
1  1808	    0BF7  1F				 pop	 ds
1  1809	    0BF8  EB 06	90			 jmp	 @load_block
1  1810	    0BFB			 load_gs_block:
1  1811	    0BFB  53 1E	0F A8			 push	 bx ds gs
1  1812	    0BFF  1F				 pop	 ds
1  1813	    0C00			 @load_block:
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 33
dos32a.asm



1  1814	    0C00  2E: 8B 1E 3688r		 mov	 bx,cs:_exec_handle
**Error** TEXT\CLIENT\misc.asm(807) Undefined symbol: @AREA1_DW
1  1815	    0C05  B4 3F				 mov	 ah,3Fh
1  1816	    0C07  CD 21				 int	 21h
1  1817	    0C09  1F 5B				 pop	 ds bx
1  1818	    0C0B  0F 82	F885			 jc	 file_errorm
1  1819	    0C0F  C3				 ret
1  1820
1  1821
1  1822					 ;=============================================================================
1  1823	    0C10			 verbose_getmem:
1  1824	    0C10  5D				 pop	 bp
1  1825	    0C11  B8 FF90			 mov	 ax,0FF90h
1  1826	    0C14  CD 21				 int	 21h
1  1827	    0C16  66| C1 E8 0A			 shr	 eax,10
1  1828	    0C1A  66| A9 FFFF0000		 test	 eax,0FFFF0000h
1  1829	    0C20  BA 3CD6r			 mov	 dx,offs v_msg04
1  1830	    0C23  74 09	90 90			 jz	 @@1
1  1831	    0C27  BA 3CD9r			 mov	 dx,offs v_msg05
1  1832	    0C2A  66| C1 E8 0A			 shr	 eax,10
1  1833	    0C2E  52			 @@1:	 push	 dx
1  1834	    0C2F  50				 push	 ax
1  1835	    0C30  B4 48				 mov	 ah,48h
1  1836	    0C32  BB FFFF			 mov	 bx,-1
1  1837	    0C35  CD 21				 int	 21h
1  1838	    0C37  C1 EB	06			 shr	 bx,6
1  1839	    0C3A  53				 push	 bx
1  1840	    0C3B  FF E5				 jmp	 bp
1  1841
1  1842	    0C3D			 verbose_showsys:
1  1843	    0C3D  F6 06	34EDr 10 90		 test	 _misc_byte2,00010000b
1  1844	    0C43  74 2A	90 90			 jz	 @@done
1  1845	    0C47  E8 FFC6			 call	 verbose_getmem
1  1846	    0C4A  66| 0F B6 06 34F1r		 movzx	 eax,_sys_type
1  1847	    0C50  66| 67| 8D 84	80    +		 lea	 eax,v_msg02[eax*4+eax]
   1848		  00003CB9r
1  1849	    0C59  50				 push	 ax
1  1850	    0C5A  0F B6	06 34F0r		 movzx	 ax,_cpu_type
1  1851	    0C5F  6B C0	64			 imul	 ax,100
1  1852	    0C62  05 0056			 add	 ax,86
1  1853	    0C65  50				 push	 ax
1  1854	    0C66  BA 3C80r			 mov	 dx,offs v_msg01
1  1855	    0C69  E8 F6DC			 call	 prints
1  1856	    0C6C  83 C4	0A			 add	 sp,10
1  1857	    0C6F  C3			 @@done: ret
1  1858
1  1859	    0C70			 verbose_showloadhdr:
1  1860	    0C70  F6 06	34EDr 10 90		 test	 _misc_byte2,00010000b
1  1861	    0C76  74 1E	90 90			 jz	 @@done
1  1862	    0C7A  66| 0F B6 06 36E8r		 movzx	 eax,_app_type
**Error** TEXT\CLIENT\misc.asm(854) Undefined symbol: @AREA1_DB
*Warning* TEXT\CLIENT\misc.asm(854) Argument needs type	override
1  1863	    0C80  66| 67| 8D 84	40    +		 lea	 eax,v_msg03[eax*2+eax]
   1864		  00003CCDr
1  1865	    0C89  50				 push	 ax
1  1866	    0C8A  68 3104r			 push	 offs start
1  1867	    0C8D  BA 3CDCr			 mov	 dx,offs v_msg10
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 34
dos32a.asm



1  1868	    0C90  E8 F6B5			 call	 prints
1  1869	    0C93  83 C4	04			 add	 sp,4
1  1870	    0C96  C3			 @@done: ret
1  1871
1  1872	    0C97			 verbose_showloadobj:
1  1873	    0C97  F6 06	34EDr 10 90		 test	 _misc_byte2,00010000b
1  1874	    0C9D  74 22	90 90			 jz	 @@done
1  1875	    0CA1  66| 60			 pushad
1  1876	    0CA3  8B C2				 mov	 ax,dx
1  1877	    0CA5  66| C1 EA 10			 shr	 edx,16
1  1878	    0CA9  66| C1 E3 0C			 shl	 ebx,12
1  1879	    0CAD  52				 push	 dx
1  1880	    0CAE  50				 push	 ax
1  1881	    0CAF  66| 55			 push	 ebp
1  1882	    0CB1  66| 53			 push	 ebx
1  1883	    0CB3  66| 57			 push	 edi
1  1884	    0CB5  51				 push	 cx
1  1885	    0CB6  BA 3CFDr			 mov	 dx,offs v_msg11
1  1886	    0CB9  E8 F68C			 call	 prints
1  1887	    0CBC  83 C4	12			 add	 sp,18
1  1888	    0CBF  66| 61			 popad
1  1889	    0CC1  C3			 @@done: ret
1  1890
1  1891	    0CC2			 verbose_showstartup:
1  1892	    0CC2  F6 06	34EDr 10 90		 test	 _misc_byte2,00010000b
1  1893	    0CC8  74 3F	90 90			 jz	 @@done
1  1894	    0CCC  FF 36	3514r			 push	 word ptr _seg_env
1  1895	    0CD0  26: FF 36 002C		 push	 word ptr es:[002Ch]
1  1896	    0CD5  FF 36	3524r			 push	 word ptr _sel_es
1  1897	    0CD9  E8 FF34			 call	 verbose_getmem
1  1898	    0CDC  66| A1 36BCr			 mov	 eax,_app_eip
**Error** TEXT\CLIENT\misc.asm(889) Undefined symbol: @AREA1_DD
1  1899	    0CE0  66| 2B 06 36C4r		 sub	 eax,_unreloc_eip
**Error** TEXT\CLIENT\misc.asm(890) Undefined symbol: @AREA1_DD
1  1900	    0CE5  66| 50			 push	 eax
1  1901	    0CE7  FF 36	36B4r			 push	 word ptr _app_eip_object
**Error** TEXT\CLIENT\misc.asm(892) Undefined symbol: @AREA1_DD
1  1902	    0CEB  68 3F3Cr			 push	 offset	excmsgB
1  1903	    0CEE  66| FF 36 36C0r		 push	 dword ptr _app_esp
**Error** TEXT\CLIENT\misc.asm(894) Undefined symbol: @AREA1_DD
1  1904	    0CF3  FF 36	3536r			 push	 word ptr _sel32_ss
1  1905	    0CF7  66| FF 36 36BCr		 push	 dword ptr _app_eip
**Error** TEXT\CLIENT\misc.asm(896) Undefined symbol: @AREA1_DD
1  1906	    0CFC  FF 36	3532r			 push	 word ptr _sel32_cs
1  1907	    0D00  BA 3D39r			 mov	 dx,offs v_msg12
1  1908	    0D03  E8 F642			 call	 prints
1  1909	    0D06  83 C4	20			 add	 sp,32
1  1910	    0D09  C3			 @@done: ret
1  1911
1  1912
1  1913	    0D0A			 win_focus_vm:				 ; Windows - set focus on specified VM
1  1914	    0D0A  F6 06	34EDr 02 90		 test	 _misc_byte2,00000010b
1  1915	    0D10  74 09	90 90			 jz	 @@done
1  1916	    0D14  33 DB				 xor	 bx,bx
1  1917	    0D16  B8 168B			 mov	 ax,168Bh
1  1918	    0D19  CD 2F				 int	 2Fh
1  1919	    0D1B  C3			 @@done: ret
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 35
dos32a.asm



1  1920
1  1921
1  1922					 PopState
1  1923
   1924					 include TEXT\CLIENT\debug.asm
1  1925					 ;
1  1926					 ; Copyright (C) 1996-2002 Supernar Systems, Ltd. All rights reserved.
1  1927					 ;
1  1928					 ; Redistribution  and	use  in	source and  binary  forms, with	or without
1  1929					 ; modification,  are permitted	provided that the following conditions are
1  1930					 ; met:
1  1931					 ;
1  1932					 ; 1.  Redistributions	of  source code	 must  retain  the above copyright
1  1933					 ; notice, this	list of	conditions and the following disclaimer.
1  1934					 ;
1  1935					 ; 2.  Redistributions	in binary form	must reproduce the above copyright
1  1936					 ; notice,  this  list of conditions and  the  following disclaimer in the
1  1937					 ; documentation and/or	other materials	provided with the distribution.
1  1938					 ;
1  1939					 ; 3. The end-user documentation included with the redistribution, if any,
1  1940					 ; must	include	the following acknowledgment:
1  1941					 ;
1  1942					 ; "This product uses DOS/32 Advanced DOS Extender technology."
1  1943					 ;
1  1944					 ; Alternately,	 this acknowledgment may appear	in the software	itself,	if
1  1945					 ; and wherever	such third-party acknowledgments normally appear.
1  1946					 ;
1  1947					 ; 4.  Products	derived	from this software  may	not be called "DOS/32A"	or
1  1948					 ; "DOS/32 Advanced".
1  1949					 ;
1  1950					 ; THIS	 SOFTWARE AND DOCUMENTATION IS PROVIDED	 "AS IS" AND ANY EXPRESSED
1  1951					 ; OR  IMPLIED	WARRANTIES,  INCLUDING,	BUT  NOT  LIMITED  TO, THE IMPLIED
1  1952					 ; WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
1  1953					 ; DISCLAIMED.	IN  NO	EVENT SHALL THE	 AUTHORS  OR  COPYRIGHT	HOLDERS	BE
1  1954					 ; LIABLE  FOR	ANY DIRECT, INDIRECT,  INCIDENTAL,  SPECIAL, EXEMPLARY,	OR
1  1955					 ; CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT NOT	LIMITED	TO, PROCUREMENT	OF
1  1956					 ; SUBSTITUTE  GOODS  OR  SERVICES;  LOSS OF  USE,  DATA,  OR  PROFITS;	OR
1  1957					 ; BUSINESS  INTERRUPTION) HOWEVER CAUSED AND  ON ANY THEORY OF	LIABILITY,
1  1958					 ; WHETHER IN CONTRACT,	STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE	OR
1  1959					 ; OTHERWISE)  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN	IF
1  1960					 ; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
1  1961					 ;
1  1962					 ;
1  1963
1  1964					 PushState
1  1965
1  1966
1  1967					 .386p
1  1968					 ;=============================================================================
1  1969					 ; IN:	 AL = interrupt	number / extended error	number
1  1970					 ;			 interrupt	 exception
1  1971					 ;			 ----------------------------
1  1972					 ;	 SS:[ESP] =	  AX	 +0	  AX	 +0
1  1973					 ;			  -		  ec	 +2
1  1974					 ;			  EIP	 +2	  EIP	 +6
1  1975					 ;			  xx:CS	 +6	  xx:CS	 +10
1  1976					 ;			  EFL	 +10	  EFL	 +14
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 36
dos32a.asm



1  1977					 ;
1  1978					 ;=============================================================================
1  1979	    0D1C			 critical_handler:
1  1980	    0D1C  FA				 cli				 ; immediately disable interrupts
1  1981	    0D1D  FC				 cld				 ; clear direction flag
1  1982	    0D1E  66| 83 FC 40			 cmp	 esp,40h		 ; check if low	on stack
1  1983	    0D22  73 09	90 90			 jae	 critical_handler_start	 ; if not, proceed
1  1984	    0D26  66| 2E: 0F B2	26    +		 lss	 esp,fword ptr cs:_sel_esp
   1985		  3526r
1  1986
1  1987	    0D2D			 critical_handler_start:
1  1988	    0D2D  50				 push	 ax
1  1989	    0D2E  8C D8				 mov	 ax,ds
1  1990	    0D30  2E: 8E 1E 3522r		 mov	 ds,cs:_sel_ds		 ; get system's	DS
1  1991	    0D35  A3 36DAr			 mov	 _int_temp,ax		 ; store application's DS
**Error** TEXT\CLIENT\debug.asm(66) Undefined symbol: @AREA1_DW
1  1992	    0D38  B0 20				 mov	 al,20h
1  1993	    0D3A  E6 20				 out	 20h,al			 ; send	EOI to the interrupt controller
1  1994	    0D3C  E6 A0				 out	 0A0h,al
1  1995	    0D3E  A1 34F6r			 mov	 ax,_pic_mask		 ; restore PIC mask
1  1996	    0D41  E6 A1				 out	 0A1h,al
1  1997	    0D43  8A C4				 mov	 al,ah
1  1998	    0D45  E6 21				 out	 21h,al
1  1999	    0D47  58				 pop	 ax
1  2000	    0D48  A3 36D8r			 mov	 word ptr _int_number,ax ; store INT number and	Last INT number
**Error** TEXT\CLIENT\debug.asm(75) Undefined symbol: @AREA1_DB
1  2001	    0D4B  3C 08				 cmp	 al,08h			 ; if INT 00h-07h, no errcode
1  2002	    0D4D  72 5B	90 90			 jb	 @@1
1  2003	    0D51  3C 09				 cmp	 al,09h			 ; if INT 09h, no errcode
1  2004	    0D53  74 55	90 90			 jz	 @@1
1  2005	    0D57  3C 0F				 cmp	 al,0Fh			 ; if INT 0Fh, no errcode
1  2006	    0D59  74 4F	90 90			 jz	 @@1
1  2007	    0D5D  0F 87	0188			 ja	 @@next			 ; if extended error, goto next	handler
1  2008
1  2009	    0D61  1E				 push	 ds			 ; check for software INT
1  2010	    0D62  66| 56			 push	 esi
1  2011	    0D64  67| 0F 02 74 24 0C		 lar	 si,[esp+6+6]		 ; get CS: rights assuming no errcode
1  2012	    0D6A  75 29	90 90			 jnz	 @@0			 ; if CS: not valid, jump
1  2013	    0D6E  67| 0F 00 64 24 0C		 verr	 word ptr [esp+6+6]	 ; verify selector read	access
1  2014	    0D74  75 1F	90 90			 jnz	 @@0			 ; if non-readable, jump
1  2015	    0D78  F7 D6				 not	 si			 ; invert Present bit
1  2016	    0D7A  F7 C6	8000			 test	 si,8000h		 ; test	Present	bit
1  2017	    0D7E  75 15	90 90			 jnz	 @@0			 ; if segment was not present, jump
1  2018	    0D82  8A E0				 mov	 ah,al
1  2019	    0D84  B0 CD				 mov	 al,0CDh		 ; AX =	##h, 0CDh (INT ##h instruction)
1  2020	    0D86  67| 8E 5C 24 0C		 mov	 ds,[esp+6+6]
1  2021	    0D8B  66| 67| 8B 74	24 08		 mov	 esi,[esp+6+2]
1  2022	    0D91  67| 3B 46 FE			 cmp	 ax,[esi-2]
1  2023	    0D95  66| 5E		 @@0:	 pop	 esi
1  2024	    0D97  1F				 pop	 ds
1  2025	    0D98  74 10	90 90			 jz	 @@1			 ; it is software interrupt, jump
1  2026
1  2027					 ; Exception with error	code
1  2028					 ;---------------------------
1  2029	    0D9C  58				 pop	 ax			 ; restore application's AX
1  2030	    0D9D  66| 8F 06 36DCr		 pop	 _int_errcode		 ; remove error_code from stack
**Error** TEXT\CLIENT\debug.asm(105) Undefined symbol: @AREA1_DD
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 37
dos32a.asm



*Warning* TEXT\CLIENT\debug.asm(105) Argument needs type override
**Error** TEXT\CLIENT\debug.asm(105) Forward reference needs override
1  2031	    0DA1  C6 06	36E6r 01 90		 mov	 _int_erravail,1
**Error** TEXT\CLIENT\debug.asm(106) Undefined symbol: @AREA1_DB
*Warning* TEXT\CLIENT\debug.asm(106) Argument needs type override
1  2032	    0DA7  EB 08	90			 jmp	 @@2
1  2033
1  2034					 ; Exception without error code
1  2035					 ;------------------------------
1  2036	    0DAA  58			 @@1:	 pop	 ax			 ; restore application's AX
1  2037	    0DAB  C6 06	36E6r 00 90		 mov	 _int_erravail,0
**Error** TEXT\CLIENT\debug.asm(112) Undefined symbol: @AREA1_DB
*Warning* TEXT\CLIENT\debug.asm(112) Argument needs type override
1  2038
1  2039
1  2040					 ;=============================================================================
1  2041					 ; now make stack frame	look like this:	 (relative to EBP)
1  2042					 ;	 GS	 -50
1  2043					 ;	 FS	 -48
1  2044					 ;	 SS	 -46
1  2045					 ;	 ES	 -44
1  2046					 ;	 PUSHAD	 -12
1  2047					 ;	 EIP	 -8
1  2048					 ;	 xx:CS	 -4
1  2049					 ;	 EFL	 -0
1  2050					 ;-----------------------------------------------------------------------------
1  2051	    0DB1  66| 60		 @@2:	 pushad
1  2052	    0DB3  FF 36	36DAr			 push	 _int_temp		 ; push	application's DS
**Error** TEXT\CLIENT\debug.asm(127) Undefined symbol: @AREA1_DW
*Warning* TEXT\CLIENT\debug.asm(127) Argument needs type override
1  2053	    0DB7  06 16	0F A0 0F A8		 push	 es ss fs gs
1  2054
1  2055	    0DBD  66| 33 C0			 xor	 eax,eax
1  2056	    0DC0  0F 23	F8			 mov	 dr7,eax		 ; reset any breakpoints
1  2057	    0DC3  8C 16	36E4r			 mov	 _int_ss,ss		 ; store application's SS:ESP
**Error** TEXT\CLIENT\debug.asm(132) Undefined symbol: @AREA1_DD
1  2058	    0DC7  66| 89 26 36E0r		 mov	 _int_esp,esp
**Error** TEXT\CLIENT\debug.asm(133) Undefined symbol: @AREA1_DD
1  2059	    0DCC  8C D0				 mov	 ax,ss
1  2060	    0DCE  3B 06	352Ar			 cmp	 ax,_sel_ss		 ; call	from DOS/32A segment?
1  2061	    0DD2  66| 8B FC			 mov	 edi,esp
1  2062	    0DD5  74 2B	90 90			 jz	 @@2a			 ; yes,	do not copy stack
1  2063
1  2064	    0DD9  66| 67| 8D 74	24 36		 lea	 esi,[esp+36h]		 ; SS:ESI=source on stack
1  2065	    0DDF  66| C4 3E 3526r		 les	 edi,fword ptr _sel_esp	 ; ES:EDI=destination new stack
1  2066	    0DE4  66| 83 EF 02			 sub	 edi,2			 ; adjust EDI (1st dec stk, then push)
1  2067	    0DE8  66| B9 0000001C		 mov	 ecx,1Ch
1  2068	    0DEE  FD				 std
1  2069	    0DEF  F3> 36: 67| A5		 rep	 movs word ptr es:[edi],ss:[esi] ; move	pushed regs to main stk
1  2070	    0DF3  66| 83 C7 02			 add	 edi,2
1  2071	    0DF7  FC				 cld
1  2072	    0DF8  2E: 8E 16 352Ar		 mov	 ss,cs:_sel_ss		 ; switch to system's SS:ESP
1  2073	    0DFD  66| 67| 8D 67	FE		 lea	 esp,[edi-2]		 ; align ESP on	4 bytes	boundary
1  2074
1  2075	    0E02  66| 67| 8D 6F	32	 @@2a:	 lea	 ebp,[edi+32h]
1  2076	    0E07  66| 67| 83 45	E4 0C		 add	 dword ptr [ebp-28],0Ch	 ; adjust application's	ESP by 12 bytes
1  2077
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 38
dos32a.asm



1  2078	    0E0D  A0 36D8r			 mov	 al,_int_number
**Error** TEXT\CLIENT\debug.asm(153) Undefined symbol: @AREA1_DB
1  2079	    0E10  3C 01				 cmp	 al,1
1  2080	    0E12  0F 84	0125			 jz	 trap_point
1  2081	    0E16  3C 03				 cmp	 al,3
1  2082	    0E18  0F 84	0140			 jz	 break_point
1  2083
1  2084	    0E1C  50				 push	 ax
1  2085	    0E1D  E8 F77F			 call	 restore_pit
1  2086	    0E20  E8 0405			 call	 tone
1  2087	    0E23  E8 F6EE			 call	 restore_inttab
1  2088	    0E26  E8 0449			 call	 scr_on
1  2089	    0E29  58				 pop	 ax
1  2090	    0E2A  BA 3629r			 mov	 dx,offs errmsg3	 ; 'DOS/32A run-time:'
1  2091	    0E2D  68 6001			 push	 6001h			 ; manually push error code
1  2092	    0E30  E8 F515			 call	 prints
1  2093	    0E33  5B				 pop	 bx
1  2094
1  2095	    0E34  33 DB				 xor	 bx,bx
1  2096	    0E36  8A D8				 mov	 bl,al
1  2097	    0E38  03 DB				 add	 bx,bx
1  2098	    0E3A  66| 67| FF 75	F8		 push	 dword ptr [ebp-08h]	 ; show	EIP
1  2099	    0E3F  67| FF 75 FC			 push	 word ptr [ebp-04h]	 ; show	CS:
1  2100	    0E43  FF B7	34CAr			 push	 word ptr i_msg[bx]	 ; int name
1  2101	    0E47  50				 push	 ax			 ; int number
1  2102
1  2103	    0E48  BA 3DB2r			 mov	 dx,offs excmsgE	 ; assume 'exception'
1  2104	    0E4B  67| 8B 5D FC			 mov	 bx,[ebp-04h]		 ; get CS:
1  2105	    0E4F  0F 02	CB			 lar	 cx,bx			 ; check if valid selector
1  2106	    0E52  75 21	90 90			 jnz	 @@2b
1  2107	    0E56  8E C3				 mov	 es,bx
1  2108	    0E58  8A E0				 mov	 ah,al
1  2109	    0E5A  B0 CD				 mov	 al,0CDh
1  2110	    0E5C  66| 67| 8B 75	F8		 mov	 esi,[ebp-08h]		 ; get EIP
1  2111	    0E61  26: 67| 3B 46	FE		 cmp	 ax,es:[esi-2]		 ; check at CS:[EIP] for INT instruct.
1  2112	    0E66  75 0D	90 90			 jnz	 @@2b
1  2113	    0E6A  BA 3DBCr			 mov	 dx,offs excmsgI	 ; 'unexpected interrupt'
1  2114	    0E6D  B8 3DD1r			 mov	 ax,offs excmsgS	 ; replace name	by 'software interrupt'
1  2115	    0E70  67| 89 44 24 02		 mov	 [esp+2],ax
1  2116
1  2117	    0E75  52			 @@2b:	 push	 dx
1  2118	    0E76  BA 3DE4r			 mov	 dx,offs excmsg1	 ; main	string
1  2119	    0E79  E8 F4CC			 call	 prints
1  2120	    0E7C  83 C4	0C			 add	 sp,12
1  2121
1  2122	    0E7F  B8 0006			 mov	 ax,0006h		 ; get base of application's CS:
1  2123	    0E82  67| 8B 5D FC			 mov	 bx,[ebp-04h]
1  2124	    0E86  CD 31				 int	 31h
1  2125	    0E88  66| C1 E1 10			 shl	 ecx,16
1  2126	    0E8C  8B CA				 mov	 cx,dx			 ; ECX=CS's Base
1  2127	    0E8E  66| 67| 8B 45	F8		 mov	 eax,[ebp-08h]		 ; EAX=offset of faulting instruction
1  2128	    0E93  E8 0365			 call	 check_faultsel		 ; check if fault occured in app's seg
1  2129	    0E96  72 0B	90 90			 jc	 @@3			 ; if not, show	linear address
1  2130
1  2131	    0E9A  66| 50			 push	 eax		 ;******** calculate unrelocated addr
1  2132	    0E9C  56				 push	 si
1  2133	    0E9D  BA 3E29r			 mov	 dx,offs excmsg3	 ; 'unrelocated...'
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 39
dos32a.asm



1  2134	    0EA0  EB 08	90			 jmp	 @@4
1  2135
1  2136	    0EA3  66| 50		 @@3:	 push	 eax
1  2137	    0EA5  6A 00				 push	 0000h
1  2138	    0EA7  BA 3E0Cr			 mov	 dx,offs excmsg2	 ; 'linear...'
1  2139	    0EAA  E8 F49B		 @@4:	 call	 prints
1  2140	    0EAD  83 C4	06			 add	 sp,6
1  2141
1  2142	    0EB0  80 3E	36E6r 00		 cmp	 _int_erravail,0	 ; if error code present, show it
**Error** TEXT\CLIENT\debug.asm(217) Undefined symbol: @AREA1_DB
*Warning* TEXT\CLIENT\debug.asm(217) Argument needs type override
1  2143	    0EB5  74 0E	90 90			 jz	 @@5
1  2144	    0EB9  66| FF 36 36DCr		 push	 _int_errcode		 ; show	error code
**Error** TEXT\CLIENT\debug.asm(219) Undefined symbol: @AREA1_DD
*Warning* TEXT\CLIENT\debug.asm(219) Argument needs type override
**Error** TEXT\CLIENT\debug.asm(219) Forward reference needs override
1  2145	    0EBD  BA 3E4Br			 mov	 dx,offs excmsg4
1  2146	    0EC0  E8 F485			 call	 prints
1  2147	    0EC3  66| 58			 pop	 eax
1  2148
1  2149	    0EC5  E8 F477		 @@5:	 call	 printcr
1  2150	    0EC8  F6 06	34EDr 10 90		 test	 _misc_byte2,00010000b
1  2151	    0ECE  74 11	90 90			 jz	 @@6
1  2152	    0ED2  BA 3F48r			 mov	 dx,offs excmsgC
1  2153	    0ED5  FF 36	3530r			 push	 _process_id
1  2154	    0ED9  68 3104r			 push	 offs start
1  2155	    0EDC  E8 F469			 call	 prints
1  2156	    0EDF  66| 58			 pop	 eax
1  2157
1  2158	    0EE1  E8 015C		 @@6:	 call	 show_status
1  2159	    0EE4  B0 FF			 @@done: mov	 al,-1			 ; exit	with error code	0FFh
1  2160	    0EE6  E9 F5E7			 jmp	 exit386
1  2161
1  2162					 ;
1  2163					 ; extended error handler
1  2164					 ;
1  2165	    0EE9  66| 2E: 0F B2	26    +	 @@next: lss	 esp,fword ptr cs:_sel_esp
   2166		  3526r
1  2167	    0EF0  50				 push	 ax
1  2168	    0EF1  E8 F6AB			 call	 restore_pit
1  2169	    0EF4  E8 0331			 call	 tone			 ; handle extended errors
1  2170	    0EF7  E8 F61A			 call	 restore_inttab
1  2171	    0EFA  E8 0375			 call	 scr_on
1  2172	    0EFD  58				 pop	 ax
1  2173	    0EFE  8B D0				 mov	 dx,ax
1  2174
1  2175	    0F00  B8 6002			 mov	 ax,6002h
1  2176	    0F03  80 FA	81			 cmp	 dl,81h		 ; RM virtual stack overflow
1  2177	    0F06  74 2E	90 90			 jz	 @@x1
1  2178
1  2179	    0F0A  B0 03				 mov	 al,03h
1  2180	    0F0C  80 FA	82			 cmp	 dl,82h		 ; PM virtual stack overflow
1  2181	    0F0F  74 25	90 90			 jz	 @@x1
1  2182
1  2183	    0F13  66| C1 C6 10			 rol	 esi,16
1  2184	    0F17  8B FE				 mov	 di,si
1  2185	    0F19  66| C1 EE 10			 shr	 esi,16
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 40
dos32a.asm



1  2186	    0F1D  B0 04				 mov	 al,04h
1  2187	    0F1F  80 FA	83			 cmp	 dl,83h		 ; extended memory check failure
1  2188	    0F22  74 12	90 90			 jz	 @@x1
1  2189
1  2190	    0F26  B0 05				 mov	 al,05h
1  2191	    0F28  80 FA	84			 cmp	 dl,84h		 ; DOS/4G API call failure
1  2192	    0F2B  74 09	90 90			 jz	 @@x1
1  2193
1  2194					 ;	 mov	 al,06h
1  2195					 ;	 cmp	 dl,85h		 ; invalid selector limit failure
1  2196					 ;	 mov	 si,bp
1  2197					 ;	 jz	 @@x1
1  2198
1  2199	    0F2F  B0 00				 mov	 al,00h
1  2200	    0F31  0F B6	36 36D8r		 movzx	 si,byte ptr _int_number
**Error** TEXT\CLIENT\debug.asm(274) Undefined symbol: @AREA1_DB
1  2201	    0F36  E8 F338		 @@x1:	 call	 report_error
1  2202	    0F39  EB A9				 jmp	 @@done
1  2203
1  2204
1  2205
1  2206					 ;-----------------------------------------------------------------------------
1  2207	    0F3B			 trap_point:
1  2208	    0F3B  0F 21	F0			 mov	 eax,dr6		 ; check if breakpoint on one of DRs
1  2209	    0F3E  24 0F				 and	 al,0Fh
1  2210	    0F40  75 08	90 90			 jnz	 null_protect
1  2211	    0F44  BA 3E6Dr			 mov	 dx,offs excmsg5
1  2212	    0F47  EB 1C	90			 jmp	 brkpnt_common
1  2213	    0F4A			 null_protect:
1  2214	    0F4A  E8 02DB			 call	 tone
1  2215	    0F4D  E8 0322			 call	 scr_on
1  2216	    0F50  66| 33 C0			 xor	 eax,eax
1  2217	    0F53  0F 23	F0			 mov	 dr6,eax
1  2218	    0F56  BA 3EDDr			 mov	 dx,offs nulmsg0
1  2219	    0F59  EB 0A	90			 jmp	 brkpnt_common
1  2220	    0F5C			 break_point:
1  2221	    0F5C  E8 02C9			 call	 tone
1  2222	    0F5F  E8 0310			 call	 scr_on
1  2223	    0F62  BA 3EA4r			 mov	 dx,offs excmsg6
1  2224	    0F65			 brkpnt_common:
1  2225	    0F65  52				 push	 dx
1  2226	    0F66  B8 0006			 mov	 ax,0006h		 ; get base of application's CS:
1  2227	    0F69  67| 8B 5D FC			 mov	 bx,[ebp-04h]
1  2228	    0F6D  CD 31				 int	 31h
1  2229	    0F6F  66| C1 E1 10			 shl	 ecx,16
1  2230	    0F73  8B CA				 mov	 cx,dx			 ; ECX=CS's Base
1  2231	    0F75  66| 67| 8B 45	F8		 mov	 eax,[ebp-08h]		 ; EAX=offset of faulting instruction
1  2232	    0F7A  E8 027E			 call	 check_faultsel		 ; check if fault occured in app's seg
1  2233	    0F7D  5A				 pop	 dx
1  2234	    0F7E  72 0B	90 90			 jc	 @@1			 ; if not, show	linear address
1  2235
1  2236	    0F82  66| 50			 push	 eax		 ;******** calculate unrelocated addr
1  2237	    0F84  56				 push	 si
1  2238	    0F85  68 3F3Cr			 push	 offs excmsgB		 ; unrelocated
1  2239	    0F88  EB 08	90			 jmp	 @@2
1  2240
1  2241	    0F8B  66| 50		 @@1:	 push	 eax
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 41
dos32a.asm



1  2242	    0F8D  6A 00				 push	 0000h
1  2243	    0F8F  68 3F35r			 push	 offs excmsgA		 ; linear
1  2244
1  2245	    0F92  66| 67| FF 75	F8	 @@2:	 push	 dword ptr [ebp-08h]	 ; show	EIP
1  2246	    0F97  67| FF 75 FC			 push	 word ptr [ebp-04h]	 ; show	CS:
1  2247	    0F9B  E8 F3AA			 call	 prints
1  2248	    0F9E  83 C4	0E			 add	 sp,14
1  2249	    0FA1  E8 009C			 call	 show_status
1  2250	    0FA4  BA 3F16r			 mov	 dx,offs excmsg7
1  2251	    0FA7  E8 F39E			 call	 prints
1  2252
1  2253	    0FAA  B3 09			 @@loop: mov	 bl,09h
1  2254	    0FAC  B8 0200			 mov	 ax,0200h
1  2255	    0FAF  CD 31				 int	 31h
1  2256	    0FB1  51 52				 push	 cx dx
1  2257	    0FB3  1E				 push	 ds
1  2258	    0FB4  8E 1E	352Ar			 mov	 ds,_sel_ss
1  2259	    0FB8  BE 0824			 mov	 si,STACKSIZE*16+9*4
1  2260	    0FBB  8B 14				 mov	 dx,ds:[si+0]
1  2261	    0FBD  8B 4C	02			 mov	 cx,ds:[si+2]
1  2262	    0FC0  1F				 pop	 ds
1  2263	    0FC1  B8 0201			 mov	 ax,0201h
1  2264	    0FC4  CD 31				 int	 31h
1  2265	    0FC6  FB				 sti
1  2266	    0FC7  33 C0				 xor	 ax,ax
1  2267	    0FC9  CD 16				 int	 16h
1  2268	    0FCB  FA				 cli
1  2269	    0FCC  5A 59				 pop	 dx cx
1  2270	    0FCE  50				 push	 ax
1  2271	    0FCF  B3 09				 mov	 bl,09h
1  2272	    0FD1  B8 0201			 mov	 ax,0201h
1  2273	    0FD4  CD 31				 int	 31h
1  2274	    0FD6  58				 pop	 ax
1  2275	    0FD7  24 DF				 and	 al,0DFh
1  2276	    0FD9  3C 41				 cmp	 al,'A'
1  2277	    0FDB  74 19	90 90			 jz	 @@ab
1  2278	    0FDF  3C 50				 cmp	 al,'P'
1  2279	    0FE1  74 21	90 90			 jz	 @@pr
1  2280	    0FE5  3C 54				 cmp	 al,'T'
1  2281	    0FE7  74 39	90 90			 jz	 @@tr
1  2282	    0FEB  B8 0400			 mov	 ax,0400h
1  2283	    0FEE  B9 0100			 mov	 cx,0100h
1  2284	    0FF1  E8 0248			 call	 beep
1  2285	    0FF4  EB B4				 jmp	 @@loop
1  2286	    0FF6  E8 F5A6		 @@ab:	 call	 restore_pit
1  2287	    0FF9  E8 F335			 call	 printc
1  2288	    0FFC  E8 F340			 call	 printcr
1  2289	    0FFF  B0 FF				 mov	 al,-1
1  2290	    1001  E9 F4CC			 jmp	 exit386
1  2291	    1004  E8 F32A		 @@pr:	 call	 printc
1  2292	    1007  E8 F335			 call	 printcr
1  2293	    100A  FA				 cli
1  2294	    100B  66| 0F B2 26 36E0r		 lss	 esp,fword ptr _int_esp
**Error** TEXT\CLIENT\debug.asm(368) Undefined symbol: @AREA1_DD
1  2295	    1011  0F A9	0F A1 17 07 1F		 pop	 gs fs ss es ds
1  2296	    1018  66| 61			 popad
1  2297	    101A  67| 80 64 24 09 FE		 and	 byte ptr ss:[esp+9],0FEh
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 42
dos32a.asm



1  2298	    1020  66| CF			 iretd
1  2299	    1022  E8 F30C		 @@tr:	 call	 printc
1  2300	    1025  E8 F317			 call	 printcr
1  2301	    1028  FA				 cli
1  2302	    1029  66| 0F B2 26 36E0r		 lss	 esp,fword ptr _int_esp
**Error** TEXT\CLIENT\debug.asm(376) Undefined symbol: @AREA1_DD
1  2303	    102F  0F A9	0F A1 17 07 1F		 pop	 gs fs ss es ds
1  2304	    1036  66| 61			 popad
1  2305	    1038  67| 80 4C 24 09 01		 or	 byte ptr ss:[esp+9],001h
1  2306	    103E  66| CF			 iretd
1  2307
1  2308
1  2309
1  2310
1  2311					 ;=============================================================================
1  2312	    1040			 show_status:
1  2313	    1040  E8 0465			 call	 @show_status_1
1  2314	    1043  67| 8B 45 FC			 mov	 ax,[ebp-4]
1  2315	    1047  E8 0469			 call	 @show_status_2
1  2316	    104A  66| 67| 8B 5D	00		 mov	 ebx,[ebp]			 ; show	EFLAGS
1  2317	    104F  E8 048A			 call	 @show_status_3
1  2318
1  2319	    1052  67| 0F 02 45 FC		 lar	 ax,[ebp-4]			 ; check if CS:	is accessible
1  2320	    1057  75 1A	90 90			 jnz	 @@1
1  2321	    105B  67| 0F 00 65 FC		 verr	 word ptr [ebp-4]
1  2322	    1060  75 11	90 90			 jnz	 @@1
1  2323	    1064  67| 8E 65 FC			 mov	 fs,[ebp-4]			 ; show	instructions at	CS:EIP
1  2324	    1068  66| 67| 8B 5D	F8		 mov	 ebx,[ebp-8]
1  2325	    106D  E8 0495			 call	 @show_status_4
1  2326	    1070  EB 12	90			 jmp	 @@2
1  2327	    1073  BA 40B7r		 @@1:	 mov	 dx,offs selmsg1		 ; invalid CS:
1  2328	    1076  67| FF 75 FC			 push	 word ptr [ebp-4]		 ; show	heximal	CS:
1  2329	    107A  E8 F2CB			 call	 prints
1  2330	    107D  58				 pop	 ax
1  2331	    107E  BA 4098r			 mov	 dx,offs dbgmsgA		 ; show	'Invalid Selector'
1  2332	    1081  E8 F2C4			 call	 prints
1  2333	    1084  E8 F2B8		 @@2:	 call	 printcr
1  2334	    1087  67| 0F 02 45 D2		 lar	 ax,[ebp-46]			 ; check if SS:	is accessible
1  2335	    108C  75 0E	90 90			 jnz	 @@3
1  2336	    1090  67| 8E 45 D2			 mov	 es,[ebp-46]			 ; load	ES:ESI with stack ptr
1  2337	    1094  66| 67| 8B 75	E4		 mov	 esi,[ebp-28]
1  2338	    1099  EB 08	90			 jmp	 @@4
1  2339	    109C  8E 06	3522r		 @@3:	 mov	 es,_sel_ds			 ; load	ES:ESI with dummy ptr
1  2340	    10A0  66| 33 F6			 xor	 esi,esi			 ; that	will not trigger errors
1  2341
1  2342	    10A3  66| 26: 67| FF 36	 @@4:	 push	 dword ptr es:[esi+0]		 ; STK[0]
1  2343	    10A8  A0 36D9r			 mov	 al,_int_number+1
**Error** TEXT\CLIENT\debug.asm(417) Undefined symbol: @AREA1_DB
1  2344	    10AB  50				 push	 ax				 ; Last	INT
1  2345	    10AC  66| 67| FF 75	DC		 push	 dword ptr [ebp-36]		 ; EAX
1  2346	    10B1  66| 67| FF 75	F4		 push	 dword ptr [ebp-12]		 ; ESI
1  2347	    10B6  BA 3FAAr			 mov	 dx,offs dbgmsg4
1  2348	    10B9  E8 F28C			 call	 prints
1  2349	    10BC  83 C4	0E			 add	 sp,14
1  2350
1  2351	    10BF  66| 26: 67| FF 76 04		 push	 dword ptr es:[esi+4]		 ; STK[4]
1  2352	    10C5  0F 20	C0			 mov	 eax,cr0
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 43
dos32a.asm



1  2353	    10C8  66| 50			 push	 eax				 ; CR0
1  2354	    10CA  66| 67| FF 75	D8		 push	 dword ptr [ebp-40]		 ; EBX
1  2355	    10CF  66| 67| FF 75	E8		 push	 dword ptr [ebp-24]		 ; EDI
1  2356	    10D4  BA 3FEAr			 mov	 dx,offs dbgmsg5
1  2357	    10D7  E8 F26E			 call	 prints
1  2358	    10DA  83 C4	10			 add	 sp,16
1  2359
1  2360	    10DD  66| 26: 67| FF 76 08		 push	 dword ptr es:[esi+8]		 ; STK[8]
1  2361	    10E3  0F 20	D0			 mov	 eax,cr2
1  2362	    10E6  66| 50			 push	 eax				 ; CR2
1  2363	    10E8  66| 67| FF 75	E0		 push	 dword ptr [ebp-32]		 ; ECX
1  2364	    10ED  66| 67| FF 75	F0		 push	 dword ptr [ebp-16]		 ; EBP
1  2365	    10F2  BA 4024r			 mov	 dx,offs dbgmsg6
1  2366	    10F5  E8 F250			 call	 prints
1  2367	    10F8  83 C4	10			 add	 sp,16
1  2368
1  2369	    10FB  66| 26: 67| FF 76 0C		 push	 dword ptr es:[esi+12]		 ; STK[12]
1  2370	    1101  0F 20	D8			 mov	 eax,cr3
1  2371	    1104  66| 50			 push	 eax				 ; CR3
1  2372	    1106  66| 67| FF 75	E4		 push	 dword ptr [ebp-28]		 ; EDX
1  2373	    110B  66| 67| FF 75	EC		 push	 dword ptr [ebp-20]		 ; ESP
1  2374	    1110  BA 405Er			 mov	 dx,offs dbgmsg7
1  2375	    1113  E8 F232			 call	 prints
1  2376	    1116  83 C4	10			 add	 sp,16
1  2377
1  2378	    1119  BA 40B7r			 mov	 dx,offs selmsg1
1  2379	    111C  67| 8B 45 FC			 mov	 ax,[ebp-4]			 ; CS: selector
1  2380	    1120  E8 0032			 call	 show_selector
1  2381	    1123  BA 40C2r			 mov	 dx,offs selmsg2
1  2382	    1126  67| 8B 45 D6			 mov	 ax,[ebp-42]			 ; DS: selector
1  2383	    112A  E8 0028			 call	 show_selector
1  2384	    112D  BA 40CDr			 mov	 dx,offs selmsg3
1  2385	    1130  67| 8B 45 D4			 mov	 ax,[ebp-44]			 ; ES: selector
1  2386	    1134  E8 001E			 call	 show_selector
1  2387	    1137  BA 40D8r			 mov	 dx,offs selmsg4
1  2388	    113A  67| 8B 45 D2			 mov	 ax,[ebp-46]			 ; SS: selector
1  2389	    113E  E8 0014			 call	 show_selector
1  2390	    1141  BA 40E3r			 mov	 dx,offs selmsg5
1  2391	    1144  67| 8B 45 D0			 mov	 ax,[ebp-48]			 ; FS: selector
1  2392	    1148  E8 000A			 call	 show_selector
1  2393	    114B  BA 40EEr			 mov	 dx,offs selmsg6
1  2394	    114E  67| 8B 45 CE			 mov	 ax,[ebp-50]			 ; GS: selector
1  2395	    1152  EB 01	90			 jmp	 show_selector
1  2396
1  2397
1  2398					 ;-----------------------------------------------------------------------------
1  2399	    1155			 show_selector:
1  2400	    1155  50				 push	 ax
1  2401	    1156  E8 F1EF			 call	 prints
1  2402	    1159  58				 pop	 ax
1  2403	    115A  85 C0				 test	 ax,ax				 ; check if NULL selector
1  2404	    115C  75 0B	90 90			 jnz	 @@1
1  2405	    1160  BA 40A9r			 mov	 dx,offs dbgmsgB
1  2406	    1163  E8 F1E2			 call	 prints
1  2407	    1166  E9 F1D6			 jmp	 printcr
1  2408
1  2409	    1169  83 EC	08		 @@1:	 sub	 sp,8				 ; get selector	info
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 44
dos32a.asm



1  2410	    116C  8E 06	352Ar			 mov	 es,_sel_ss
1  2411	    1170  66| 8B FC			 mov	 edi,esp
1  2412	    1173  8B D8				 mov	 bx,ax
1  2413	    1175  B8 000B			 mov	 ax,000Bh
1  2414	    1178  CD 31				 int	 31h
1  2415	    117A  73 0E	90 90			 jnc	 @@2				 ; branch if selector is OK
1  2416	    117E  83 C4	08			 add	 sp,8				 ; invalid selector
1  2417	    1181  BA 4098r			 mov	 dx,offs dbgmsgA
1  2418	    1184  E8 F1C1			 call	 prints
1  2419	    1187  E9 F1B5			 jmp	 printcr
1  2420
1  2421	    118A  26: 67| 8B 47	05	 @@2:	 mov	 ax,word ptr es:[edi+5]		 ; explain selector
1  2422	    118F  8B D0				 mov	 dx,ax
1  2423	    1191  50				 push	 ax				 ; Acc
1  2424
1  2425	    1192  D0 E8				 shr	 al,1
1  2426	    1194  25 0007			 and	 ax,07h
1  2427	    1197  50				 push	 ax				 ; Type
1  2428
1  2429	    1198  8A CE				 mov	 cl,dh
1  2430	    119A  C0 E9	06			 shr	 cl,6
1  2431	    119D  80 E1	01			 and	 cl,1
1  2432	    11A0  B8 0010			 mov	 ax,16
1  2433	    11A3  D3 E0				 shl	 ax,cl
1  2434	    11A5  50				 push	 ax				 ; Seg:	USE16/USE32
1  2435
1  2436	    11A6  8A C2				 mov	 al,dl
1  2437	    11A8  C0 E8	03			 shr	 al,3
1  2438	    11AB  66| 83 E0 01			 and	 eax,01h
1  2439	    11AF  66| 67| 8D 84	80    +		 lea	 eax,selmsg8[eax*4+eax]
   2440		  00004138r
1  2441	    11B8  50				 push	 ax				 ; Seg:	DATA/CODE
1  2442
1  2443	    11B9  8A C6				 mov	 al,dh
1  2444	    11BB  C0 E8	07			 shr	 al,7
1  2445	    11BE  66| 83 E0 01			 and	 eax,01h
1  2446	    11C2  66| 67| 8D 84	80    +		 lea	 eax,selmsg9[eax+eax*4]
   2447		  0000412Er
1  2448	    11CB  50				 push	 ax				 ; Granularity
1  2449
1  2450	    11CC  8A C6				 mov	 al,dh
1  2451	    11CE  66| 83 E0 0F			 and	 eax,0Fh
1  2452	    11D2  66| C1 E0 10			 shl	 eax,16
1  2453	    11D6  26: 67| 8B 07			 mov	 ax,word ptr es:[edi+0]
1  2454	    11DA  66| 50			 push	 eax				 ; Limit
1  2455	    11DC  26: 67| 8A 67	07		 mov	 ah,byte ptr es:[edi+7]
1  2456	    11E1  26: 67| 8A 47	04		 mov	 al,byte ptr es:[edi+4]
1  2457	    11E6  66| C1 E0 10			 shl	 eax,16
1  2458	    11EA  26: 67| 8B 47	02		 mov	 ax,word ptr es:[edi+2]
1  2459	    11EF  66| 50			 push	 eax				 ; Base
1  2460	    11F1  BA 40F9r			 mov	 dx,offs selmsg0
1  2461	    11F4  E8 F151			 call	 prints
1  2462	    11F7  83 C4	1A			 add	 sp,26
1  2463	    11FA  C3				 ret
1  2464
1  2465
1  2466
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 45
dos32a.asm



1  2467					 ;-----------------------------------------------------------------------------
1  2468	    11FB			 check_faultsel:
1  2469	    11FB  66| 03 C1			 add	 eax,ecx		 ; linear addr = CS_base+EIP_offset
1  2470	    11FE  66| 51			 push	 ecx
1  2471	    1200  66| 8B 0E 3698r		 mov	 ecx,_app_num_objects
**Error** TEXT\CLIENT\debug.asm(543) Undefined symbol: @AREA1_DD
1  2472	    1205  E3 0E				 jcxz	 @@2
1  2473	    1207  67| 3B 1C 4D	      +	 @@1:	 cmp	 bx,_app_buf_allocsel[ecx*2]
   2474		  00000074r
1  2475	    120F  74 08	90 90			 jz	 @@3
1  2476	    1213  E2 F2				 loop	 @@1
1  2477	    1215  F9			 @@2:	 stc
1  2478	    1216  EB 0D	90			 jmp	 @@done
1  2479	    1219  66| 67| 2B 04	8D    +	 @@3:	 sub	 eax,_app_buf_allocbase[ecx*4]
   2480		  000000F4r
1  2481	    1222  8B F1				 mov	 si,cx
1  2482	    1224  F8				 clc
1  2483	    1225  66| 59		 @@done: pop	 ecx
1  2484	    1227  C3				 ret
1  2485
1  2486
1  2487
1  2488
1  2489					 .8086
1  2490					 ;=============================================================================
1  2491	    1228  50 51			 tone:	 push	 ax cx
1  2492	    122A  B8 0500			 mov	 ax,0500h
1  2493	    122D  B9 0110			 mov	 cx,0110h
1  2494	    1230  E8 0009			 call	 beep
1  2495	    1233  B8 0300			 mov	 ax,0300h
1  2496	    1236  E8 0003			 call	 beep
1  2497	    1239  59 58				 pop	 cx ax
1  2498	    123B  C3				 ret
1  2499
1  2500					 ;=============================================================================
1  2501	    123C  2E: F6 06 34ECr 02  +	 beep:	 test	 cs:_misc_byte,00000010b
   2502		  90
1  2503	    1243  74 2C				 jz	 @@done
1  2504	    1245  51 52	50			 push	 cx dx ax		 ; AX=frequency, CX=time
1  2505	    1248  B0 B6				 mov	 al,0B6h		 ; set frequency
1  2506	    124A  E6 43				 out	 43h,al
1  2507	    124C  58				 pop	 ax
1  2508	    124D  E6 42				 out	 42h,al			 ; fLow
1  2509	    124F  8A C4				 mov	 al,ah
1  2510	    1251  E6 42				 out	 42h,al			 ; fHigh
1  2511	    1253  E4 61				 in	 al,61h			 ; beep	on
1  2512	    1255  0C 03				 or	 al,03h
1  2513	    1257  E6 61				 out	 61h,al
1  2514	    1259  E4 40			 @@loop: in	 al,40h
1  2515	    125B  E4 40				 in	 al,40h
1  2516	    125D  8A E0				 mov	 ah,al
1  2517	    125F  E4 40			 @@0:	 in	 al,40h
1  2518	    1261  E4 40				 in	 al,40h
1  2519	    1263  3A E0				 cmp	 ah,al
1  2520	    1265  74 F8				 je	 @@0
1  2521	    1267  E2 F0				 loop	 @@loop
1  2522	    1269  E4 61				 in	 al,61h			 ; beep	off
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 46
dos32a.asm



1  2523	    126B  24 FC				 and	 al,not	03h
1  2524	    126D  E6 61				 out	 61h,al
1  2525	    126F  5A 59				 pop	 dx cx
1  2526	    1271  C3			 @@done: ret
1  2527
1  2528
1  2529					 ;=============================================================================
1  2530	    1272  50 53	51 52		 scr_on: push	 ax bx cx dx
1  2531	    1276  2E: F6 06 34ECr 40  +		 test	 cs:_misc_byte,01000000b
   2532		  90
1  2533	    127D  74 05				 jz	 @@1
1  2534	    127F  B8 0003			 mov	 ax,0003h
1  2535	    1282  CD 10				 int	 10h			 ; set default videomode
1  2536	    1284  BA 03C4		 @@1:	 mov	 dx,03C4h		 ; turn	on VGA screen
1  2537	    1287  B0 01				 mov	 al,01
1  2538	    1289  EE				 out	 dx,al
1  2539	    128A  42				 inc	 dx
1  2540	    128B  EC				 in	 al,dx
1  2541	    128C  24 DF				 and	 al,0DFh
1  2542	    128E  EE				 out	 dx,al
1  2543	    128F  5A 59	5B 58			 pop	 dx cx bx ax
1  2544	    1293  C3				 ret
1  2545
1  2546
1  2547
1  2548
1  2549					 .386p
1  2550					 ;=============================================================================
1  2551	    1294  6A 00			 _exc00: push	 00h
1  2552	    1296  EB 0D	90			 jmp	 _exc_common
1  2553	    1299  6A 06			 _exc06: push	 06h
1  2554	    129B  EB 08	90			 jmp	 _exc_common
1  2555	    129E  6A 0D			 _exc0D: push	 0Dh
1  2556	    12A0  EB 03	90			 jmp	 _exc_common
1  2557	    12A3  6A 0E			 _exc0E: push	 0Eh
1  2558
1  2559
1  2560	    12A5			 _exc_common:
1  2561	    12A5  FA				 cli
1  2562	    12A6  FC				 cld
1  2563	    12A7  66| 60			 pushad				 ; push	regs on	application's stack
1  2564	    12A9  8C D0				 mov	 ax,ss
1  2565	    12AB  66| 8B D4			 mov	 edx,esp
1  2566	    12AE  66| 2E: 0F B2	26    +		 lss	 esp,fword ptr cs:_sel_esp	 ; switch to internal 16bit stk
   2567		  3526r
1  2568	    12B5  1E 06	0F A0 0F A8		 push	 ds es fs gs		 ; now push the	segment	regs
1  2569
1  2570	    12BB  8E C0				 mov	 es,ax
1  2571	    12BD  66| 0F B7 D8			 movzx	 ebx,ax
1  2572	    12C1  66| 0F 02 DB			 lar	 ebx,ebx
1  2573	    12C5  66| F7 C3 00400000		 test	 ebx,00400000h
1  2574	    12CC  66| 8B EA			 mov	 ebp,edx
1  2575	    12CF  75 06	90 90			 jnz	 @@0
1  2576	    12D3  66| 0F B7 EA			 movzx	 ebp,dx
1  2577	    12D7  2E: 8E 1E 3522r	 @@0:	 mov	 ds,cs:_sel_ds
1  2578
1  2579	    12DC  E8 F2C0			 call	 restore_pit
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 47
dos32a.asm



1  2580	    12DF  E8 FF46			 call	 tone
1  2581	    12E2  E8 FF8D			 call	 scr_on
1  2582
1  2583	    12E5  BA 3629r			 mov	 dx,offs errmsg3	 ; 'DOS/32A run-time:'
1  2584	    12E8  68 6001			 push	 6001h			 ; manually push error code
1  2585	    12EB  E8 F05A			 call	 prints
1  2586	    12EE  58				 pop	 ax
1  2587
1  2588	    12EF  26: 67| 8B 45	20		 mov	 ax,es:[ebp+20h]
1  2589	    12F4  8B D8				 mov	 bx,ax
1  2590	    12F6  03 DB				 add	 bx,bx
1  2591	    12F8  66| 26: 67| FF 75 2E		 push	 dword ptr es:[ebp+2Eh]	 ; show	EIP
1  2592	    12FE  26: 67| FF 75	32		 push	 word ptr es:[ebp+32h]	 ; show	CS:
1  2593	    1303  FF B7	34CAr			 push	 word ptr i_msg[bx]	 ; int name
1  2594	    1307  50				 push	 ax			 ; int number
1  2595	    1308  68 3DB2r			 push	 offs excmsgE		 ; "exception"
1  2596	    130B  BA 3DE4r			 mov	 dx,offs excmsg1	 ; main	string
1  2597	    130E  E8 F037			 call	 prints
1  2598	    1311  83 C4	0C			 add	 sp,12
1  2599
1  2600	    1314  B8 0006			 mov	 ax,0006h		 ; get base of application's CS:
1  2601	    1317  26: 67| 8B 5D	32		 mov	 bx,es:[ebp+32h]
1  2602	    131C  CD 31				 int	 31h
1  2603	    131E  66| C1 E1 10			 shl	 ecx,16
1  2604	    1322  8B CA				 mov	 cx,dx			 ; ECX=CS's Base
1  2605	    1324  66| 26: 67| 8B 45 2E		 mov	 eax,es:[ebp+2Eh]	 ; EAX=offset of faulting instruction
1  2606	    132A  E8 FECE			 call	 check_faultsel		 ; check if fault occured in app's seg
1  2607	    132D  72 0B	90 90			 jc	 @@3			 ; if not, show	linear address
1  2608
1  2609	    1331  66| 50			 push	 eax		 ;******** calculate unrelocated addr
1  2610	    1333  56				 push	 si
1  2611	    1334  BA 3E29r			 mov	 dx,offs excmsg3	 ; 'unrelocated...'
1  2612	    1337  EB 08	90			 jmp	 @@4
1  2613
1  2614	    133A  66| 50		 @@3:	 push	 eax
1  2615	    133C  6A 00				 push	 0
1  2616	    133E  BA 3E0Cr			 mov	 dx,offs excmsg2	 ; 'linear...'
1  2617	    1341  E8 F004		 @@4:	 call	 prints
1  2618	    1344  83 C4	06			 add	 sp,6
1  2619
1  2620	    1347  26: 67| 80 7D	20 08		 cmp	 byte ptr es:[ebp+20h],08h ; if	error code present, show it
1  2621	    134D  72 10	90 90			 jb	 @@5
1  2622	    1351  66| 26: 67| FF 75 2A		 push	 dword ptr es:[ebp+2Ah]	 ; show	error code
1  2623	    1357  BA 3E4Br			 mov	 dx,offs excmsg4
1  2624	    135A  E8 EFEB			 call	 prints
1  2625	    135D  66| 58			 pop	 eax
1  2626	    135F  E8 EFDD		 @@5:	 call	 printcr
1  2627
1  2628	    1362  F6 06	34EDr 10 90		 test	 _misc_byte2,00010000b
1  2629	    1368  74 11	90 90			 jz	 show_statusx
1  2630	    136C  BA 3F48r			 mov	 dx,offs excmsgC
1  2631	    136F  FF 36	3530r			 push	 _process_id
1  2632	    1373  68 3104r			 push	 offs start
1  2633	    1376  E8 EFCF			 call	 prints
1  2634	    1379  66| 58			 pop	 eax
1  2635
1  2636	    137B			 show_statusx:
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 48
dos32a.asm



1  2637	    137B  E8 012A			 call	 @show_status_1
1  2638	    137E  26: 67| 8B 45	32		 mov	 ax,es:[ebp+32h]
1  2639	    1383  E8 012D			 call	 @show_status_2
1  2640	    1386  66| 26: 67| 8B 5D 36		 mov	 ebx,es:[ebp+36h]		 ; show	EFLAGS
1  2641	    138C  E8 014D			 call	 @show_status_3
1  2642
1  2643	    138F  26: 67| 0F 02	45 32		 lar	 ax,es:[ebp+32h]		 ; check if CS:	is accessible
1  2644	    1395  75 1D	90 90			 jnz	 @@1
1  2645	    1399  26: 67| 0F 00	65 32		 verr	 word ptr es:[ebp+32h]
1  2646	    139F  75 13	90 90			 jnz	 @@1
1  2647	    13A3  26: 67| 8E 65	32		 mov	 fs,es:[ebp+32h]		 ; show	instructions at	CS:EIP
1  2648	    13A8  66| 26: 67| 8B 5D 2E		 mov	 ebx,es:[ebp+2Eh]
1  2649	    13AE  E8 0154			 call	 @show_status_4
1  2650	    13B1  EB 13	90			 jmp	 @@2
1  2651	    13B4  BA 40B7r		 @@1:	 mov	 dx,offs selmsg1		 ; invalid CS:
1  2652	    13B7  26: 67| FF 75	32		 push	 word ptr es:[ebp+32h]		 ; show	heximal	CS:
1  2653	    13BC  E8 EF89			 call	 prints
1  2654	    13BF  58				 pop	 ax
1  2655	    13C0  BA 4098r			 mov	 dx,offs dbgmsgA		 ; show	'Invalid Selector'
1  2656	    13C3  E8 EF82			 call	 prints
1  2657	    13C6  E8 EF76		 @@2:	 call	 printcr
1  2658	    13C9  26: 67| 0F 02	45 3E		 lar	 ax,es:[ebp+3Eh]		 ; check if SS:	is accessible
1  2659	    13CF  75 10	90 90			 jnz	 @@3
1  2660	    13D3  26: 67| 8E 65	3E		 mov	 fs,es:[ebp+3Eh]		 ; load	ES:ESI with stack ptr
1  2661	    13D8  66| 26: 67| 8B 75 3A		 mov	 esi,es:[ebp+3Ah]
1  2662	    13DE  EB 08	90			 jmp	 @@4
1  2663	    13E1  8E 26	3522r		 @@3:	 mov	 fs,_sel_ds			 ; load	ES:ESI with dummy ptr
1  2664	    13E5  66| 33 F6			 xor	 esi,esi			 ; that	will not trigger errors
1  2665
1  2666	    13E8  66| 64: 67| FF 36	 @@4:	 push	 dword ptr fs:[esi+0]		 ; STK[0]
1  2667	    13ED  6A 00				 push	 0				 ; Last	INT
1  2668	    13EF  66| 26: 67| FF 75 04		 push	 dword ptr es:[ebp+04h]		 ; ESI
1  2669	    13F5  66| 26: 67| FF 75 1C		 push	 dword ptr es:[ebp+1Ch]		 ; EAX
1  2670	    13FB  BA 3FAAr			 mov	 dx,offs dbgmsg4
1  2671	    13FE  E8 EF47			 call	 prints
1  2672	    1401  83 C4	0E			 add	 sp,14
1  2673
1  2674	    1404  66| 64: 67| FF 76 04		 push	 dword ptr fs:[esi+4]		 ; STK[4]
1  2675	    140A  66| 6A 00			 push	 large 0			 ; CR0
1  2676	    140D  66| 26: 67| FF 75 00		 push	 dword ptr es:[ebp+00h]		 ; EDI
1  2677	    1413  66| 26: 67| FF 75 10		 push	 dword ptr es:[ebp+10h]		 ; EBX
1  2678	    1419  BA 3FEAr			 mov	 dx,offs dbgmsg5
1  2679	    141C  E8 EF29			 call	 prints
1  2680	    141F  83 C4	10			 add	 sp,16
1  2681
1  2682	    1422  66| 64: 67| FF 76 08		 push	 dword ptr fs:[esi+8]		 ; STK[8]
1  2683	    1428  66| 6A 00			 push	 large 0			 ; CR2
1  2684	    142B  66| 26: 67| FF 75 08		 push	 dword ptr es:[ebp+08h]		 ; EBP
1  2685	    1431  66| 26: 67| FF 75 18		 push	 dword ptr es:[ebp+18h]		 ; ECX
1  2686	    1437  BA 4024r			 mov	 dx,offs dbgmsg6
1  2687	    143A  E8 EF0B			 call	 prints
1  2688	    143D  83 C4	10			 add	 sp,16
1  2689
1  2690	    1440  66| 64: 67| FF 76 0C		 push	 dword ptr fs:[esi+12]		 ; STK[12]
1  2691	    1446  66| 6A 00			 push	 large 0			 ; CR3
1  2692	    1449  66| 26: 67| FF 75 3A		 push	 dword ptr es:[ebp+3Ah]		 ; ESP
1  2693	    144F  66| 26: 67| FF 75 14		 push	 dword ptr es:[ebp+14h]		 ; EDX
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 49
dos32a.asm



1  2694	    1455  BA 405Er			 mov	 dx,offs dbgmsg7
1  2695	    1458  E8 EEED			 call	 prints
1  2696	    145B  83 C4	10			 add	 sp,16
1  2697
1  2698	    145E  8C C0				 mov	 ax,es
1  2699	    1460  8E E0				 mov	 fs,ax
1  2700	    1462  BA 40B7r			 mov	 dx,offs selmsg1
1  2701	    1465  64: 67| 8B 45	32		 mov	 ax,fs:[ebp+32h]		 ; CS: selector
1  2702	    146A  E8 FCE8			 call	 show_selector
1  2703	    146D  BA 40C2r			 mov	 dx,offs selmsg2
1  2704	    1470  67| 8B 44 24 06		 mov	 ax,[esp+06h]			 ; DS: selector
1  2705	    1475  E8 FCDD			 call	 show_selector
1  2706	    1478  BA 40CDr			 mov	 dx,offs selmsg3
1  2707	    147B  67| 8B 44 24 04		 mov	 ax,[esp+04h]			 ; ES: selector
1  2708	    1480  E8 FCD2			 call	 show_selector
1  2709	    1483  BA 40D8r			 mov	 dx,offs selmsg4
1  2710	    1486  64: 67| 8B 45	3E		 mov	 ax,fs:[ebp+3Eh]		 ; SS: selector
1  2711	    148B  E8 FCC7			 call	 show_selector
1  2712	    148E  BA 40E3r			 mov	 dx,offs selmsg5
1  2713	    1491  67| 8B 44 24 02		 mov	 ax,[esp+02h]			 ; FS: selector
1  2714	    1496  E8 FCBC			 call	 show_selector
1  2715	    1499  BA 40EEr			 mov	 dx,offs selmsg6
1  2716	    149C  67| 8B 04 24			 mov	 ax,[esp+00h]			 ; GS: selector
1  2717	    14A0  E8 FCB2			 call	 show_selector
1  2718
1  2719	    14A3  B0 FF				 mov	 al,-1
1  2720	    14A5  E9 F028			 jmp	 exit386
1  2721
1  2722
1  2723
1  2724					 ;=============================================================================
1  2725	    14A8			 @show_status_1:
1  2726	    14A8  B0 3D				 mov	 al,'='
1  2727	    14AA  B9 0048			 mov	 cx,72
1  2728	    14AD  E8 EE81		 @@0:	 call	 printc
1  2729	    14B0  E2 FB				 loop	 @@0
1  2730	    14B2  C3				 ret
1  2731
1  2732					 ;-----------------------------------------------------------------------------
1  2733	    14B3			 @show_status_2:
1  2734	    14B3  3D 0008			 cmp	 ax,0008h		 ; note: kernel	selector hardcoded!
1  2735	    14B6  BA 4142r			 mov	 dx,offs selmsgX	 ; exception came from "KERNEL"
1  2736	    14B9  74 1B	90 90			 jz	 @@0
1  2737	    14BD  3B 06	3520r			 cmp	 ax,_sel_cs
1  2738	    14C1  BA 414Ar			 mov	 dx,offs selmsgY	 ; exception came from "CLIENT"
1  2739	    14C4  74 10	90 90			 jz	 @@0
1  2740	    14C8  3B 06	3532r			 cmp	 ax,_sel32_cs
1  2741	    14CC  BA 4152r			 mov	 dx,offs selmsgZ	 ; exception came from "APP/32"
1  2742	    14CF  74 05	90 90			 jz	 @@0
1  2743	    14D3  BA 415Ar			 mov	 dx,offs selmsgW	 ; where do all	they come from?
1  2744	    14D6  E8 EE6F		 @@0:	 call	 prints
1  2745	    14D9  E9 EE63			 jmp	 printcr
1  2746
1  2747
1  2748					 ;-----------------------------------------------------------------------------
1  2749	    14DC			 @show_status_3:
1  2750	    14DC  66| 8B F3			 mov	 esi,ebx
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 50
dos32a.asm



1  2751	    14DF  B1 08				 mov	 cl,8
1  2752	    14E1  66| 33 C0			 xor	 eax,eax
1  2753	    14E4  66| 33 D2			 xor	 edx,edx
1  2754	    14E7  D0 EB			 @@0:	 shr	 bl,1
1  2755	    14E9  66| C1 D8 04			 rcr	 eax,4
1  2756	    14ED  D0 EF				 shr	 bh,1
1  2757	    14EF  66| C1 DA 04			 rcr	 edx,4
1  2758	    14F3  E2 F2				 loop	 @@0
1  2759	    14F5  66| 50			 push	 eax
1  2760	    14F7  66| 52			 push	 edx
1  2761	    14F9  66| 56			 push	 esi
1  2762	    14FB  BA 3F6Br			 mov	 dx,offs dbgmsg1
1  2763	    14FE  E8 EE47			 call	 prints
1  2764	    1501  83 C4	0C			 add	 sp,12
1  2765	    1504  C3				 ret
1  2766
1  2767					 ;-----------------------------------------------------------------------------
1  2768	    1505			 @show_status_4:
1  2769	    1505  B1 0A				 mov	 cl,10
1  2770	    1507  64: 67| 8A 43	09	 @@0:	 mov	 al,fs:[ebx+9]
1  2771	    150C  50				 push	 ax
1  2772	    150D  66| 4B			 dec	 ebx
1  2773	    150F  E2 F6				 loop	 @@0
1  2774	    1511  BA 3F81r			 mov	 dx,offs dbgmsg2
1  2775	    1514  E8 EE31			 call	 prints
1  2776	    1517  83 C4	14			 add	 sp,10*2
1  2777	    151A  C3				 ret
1  2778
1  2779
1  2780					 PopState
1  2781
   2782					 include TEXT\CLIENT\int10h.asm
1  2783					 ;
1  2784					 ; Copyright (C) 1996-2002 Supernar Systems, Ltd. All rights reserved.
1  2785					 ;
1  2786					 ; Redistribution  and	use  in	source and  binary  forms, with	or without
1  2787					 ; modification,  are permitted	provided that the following conditions are
1  2788					 ; met:
1  2789					 ;
1  2790					 ; 1.  Redistributions	of  source code	 must  retain  the above copyright
1  2791					 ; notice, this	list of	conditions and the following disclaimer.
1  2792					 ;
1  2793					 ; 2.  Redistributions	in binary form	must reproduce the above copyright
1  2794					 ; notice,  this  list of conditions and  the  following disclaimer in the
1  2795					 ; documentation and/or	other materials	provided with the distribution.
1  2796					 ;
1  2797					 ; 3. The end-user documentation included with the redistribution, if any,
1  2798					 ; must	include	the following acknowledgment:
1  2799					 ;
1  2800					 ; "This product uses DOS/32 Advanced DOS Extender technology."
1  2801					 ;
1  2802					 ; Alternately,	 this acknowledgment may appear	in the software	itself,	if
1  2803					 ; and wherever	such third-party acknowledgments normally appear.
1  2804					 ;
1  2805					 ; 4.  Products	derived	from this software  may	not be called "DOS/32A"	or
1  2806					 ; "DOS/32 Advanced".
1  2807					 ;
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 51
dos32a.asm



1  2808					 ; THIS	 SOFTWARE AND DOCUMENTATION IS PROVIDED	 "AS IS" AND ANY EXPRESSED
1  2809					 ; OR  IMPLIED	WARRANTIES,  INCLUDING,	BUT  NOT  LIMITED  TO, THE IMPLIED
1  2810					 ; WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
1  2811					 ; DISCLAIMED.	IN  NO	EVENT SHALL THE	 AUTHORS  OR  COPYRIGHT	HOLDERS	BE
1  2812					 ; LIABLE  FOR	ANY DIRECT, INDIRECT,  INCIDENTAL,  SPECIAL, EXEMPLARY,	OR
1  2813					 ; CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT NOT	LIMITED	TO, PROCUREMENT	OF
1  2814					 ; SUBSTITUTE  GOODS  OR  SERVICES;  LOSS OF  USE,  DATA,  OR  PROFITS;	OR
1  2815					 ; BUSINESS  INTERRUPTION) HOWEVER CAUSED AND  ON ANY THEORY OF	LIABILITY,
1  2816					 ; WHETHER IN CONTRACT,	STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE	OR
1  2817					 ; OTHERWISE)  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN	IF
1  2818					 ; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
1  2819					 ;
1  2820					 ;
1  2821
1  2822					 PushState
1  2823
1  2824
1  2825					 .386p
1  2826					 ;=============================================================================
1  2827	    151B  FC			 _int10: cld
1  2828	    151C  1E 06				 push	 ds es
1  2829	    151E  66| 60			 pushad
1  2830
1  2831	    1520  80 FC	1B			 cmp	 ah,1Bh
1  2832	    1523  74 36	90 90			 jz	 @v_1Bh
1  2833	    1527  80 FC	1C			 cmp	 ah,1Ch
1  2834	    152A  0F 84	007F			 jz	 @v_1Ch
1  2835	    152E  3D 4F00			 cmp	 ax,4F00h
1  2836	    1531  0F 84	0104			 jz	 @v_4F00h
1  2837	    1535  3D 4F01			 cmp	 ax,4F01h
1  2838	    1538  0F 84	00FD			 jz	 @v_4F01h
1  2839	    153C  3D 4F04			 cmp	 ax,4F04h
1  2840	    153F  0F 84	018D			 jz	 @v_4F04h
1  2841	    1543  3D 4F09			 cmp	 ax,4F09h
1  2842	    1546  0F 84	01F9			 jz	 @v_4F09h
1  2843	    154A  3D 4F0A			 cmp	 ax,4F0Ah
1  2844	    154D  0F 84	0266			 jz	 @v_4F0Ah
1  2845
1  2846	    1551  66| 61			 popad
1  2847	    1553  07 1F				 pop	 es ds
1  2848	    1555  66				 db	 66h
1  2849	    1556  2E: FF 2E 355Ar		 jmp	 cs:_int10_ip
1  2850
1  2851
1  2852
1  2853					 ;=============================================================================
1  2854					 ; VGA:	Read Functionality Information
1  2855					 ; In:	 BX = implementation type
1  2856					 ;	 ES:EDI	= 64 byte buffer
1  2857					 ; Out:	 AL = 1Bh if function supported	by VGA BIOS
1  2858					 ;	 BX = implementation type
1  2859					 ;	 ES:EDI	= 64 byte buffer
1  2860					 ;
1  2861	    155B  66| 83 EC 32		 @v_1Bh: sub	 esp,32h
1  2862	    155F  66| 8B EC			 mov	 ebp,esp
1  2863	    1562  67| 89 45 1C			 mov	 [ebp+1Ch],ax		 ; store AX
1  2864	    1566  67| 89 5D 10			 mov	 [ebp+10h],bx		 ; store BX
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 52
dos32a.asm



1  2865	    156A  2E: 8E 1E 3522r		 mov	 ds,cs:_sel_ds
1  2866	    156F  A1 3516r			 mov	 ax,_seg_buf
1  2867	    1572  67| 89 45 22			 mov	 word ptr [ebp+22h],ax	 ; store ES
1  2868	    1576  67| C7 45 00 0000		 mov	 word ptr [ebp+00h],0	 ; store DI
1  2869	    157C  E8 F08A			 call	 int10h
1  2870	    157F  66| B9 00000010		 mov	 ecx,16
1  2871	    1585  66| 8B 36 3542r		 mov	 esi,_lobufbase
1  2872	    158A  F3> 66| 67| A5		 rep	 movs dword ptr	es:[edi],[esi]
1  2873	    158E  66| 67| 0F B7	45 1C		 movzx	 eax,word ptr [ebp+1Ch]	 ; get AX
1  2874	    1594  66| 67| 0F B7	5D 10		 movzx	 ebx,word ptr [ebp+10h]	 ; get BX
1  2875	    159A  66| 83 C4 32			 add	 esp,32h
1  2876	    159E  66| 67| 89 44	24 1C		 mov	 [esp+1Ch],eax		 ; return EAX
1  2877	    15A4  66| 67| 89 5C	24 10		 mov	 [esp+10h],ebx		 ; return EBX
1  2878	    15AA  E9 0FCE			 jmp	 @__ok
1  2879
1  2880
1  2881					 ;=============================================================================
1  2882					 ; VGA:	Save/Restore VGA Video State
1  2883					 ; In:	 AL = subfunction:
1  2884					 ;		 00h - get state buffer	size
1  2885					 ;		 Return: EBX = number of 64-byte blocks	needed
1  2886					 ;		 01h - save video states
1  2887					 ;		 02h - restore video states
1  2888					 ;	 ECX = states to save/restore
1  2889					 ;	 ES:EBX	= pointer to save/restore buffer
1  2890					 ; Out:	 AL = 1Ch if function supported	by VGA BIOS
1  2891					 ;
1  2892	    15AD  84 C0			 @v_1Ch: test	 al,al
1  2893	    15AF  74 11	90 90			 jz	 @v_1Ch_00
1  2894	    15B3  3C 01				 cmp	 al,01h
1  2895	    15B5  74 2A	90 90			 jz	 @v_1Ch_01
1  2896	    15B9  3C 02				 cmp	 al,02h
1  2897	    15BB  74 4E	90 90			 jz	 @v_1Ch_02
1  2898	    15BF  E9 0280			 jmp	 @v_err
1  2899
1  2900	    15C2			 @v_1Ch_00:
1  2901	    15C2  66| 9C			 pushfd
1  2902	    15C4  66				 db	 66h
1  2903	    15C5  2E: FF 1E 355Ar		 call	 cs:_int10_ip
1  2904	    15CA  66| 0F B7 C0			 movzx	 eax,ax
1  2905	    15CE  66| 0F B7 DB			 movzx	 ebx,bx
1  2906	    15D2  66| 67| 89 44	24 1C		 mov	 [esp+1Ch],eax
1  2907	    15D8  66| 67| 89 5C	24 10		 mov	 [esp+10h],ebx
1  2908	    15DE  E9 0F9A			 jmp	 @__ok
1  2909
1  2910	    15E1			 @v_1Ch_01:
1  2911	    15E1  66| 83 EC 32			 sub	 esp,32h
1  2912	    15E5  66| 8B EC			 mov	 ebp,esp
1  2913	    15E8  E8 0225			 call	 @v_std
1  2914	    15EB  E8 F01B			 call	 int10h
1  2915	    15EE  66| 8B 36 3542r		 mov	 esi,_lobufbase
1  2916	    15F3  66| 8B FB			 mov	 edi,ebx
1  2917	    15F6  B8 1C00			 mov	 ax,1C00h
1  2918	    15F9  33 DB				 xor	 bx,bx
1  2919	    15FB  CD 10				 int	 10h
1  2920	    15FD  66| 8B CB			 mov	 ecx,ebx
1  2921	    1600  66| C1 E1 04			 shl	 ecx,4
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 53
dos32a.asm



1  2922	    1604  F3> 66| 67| A5		 rep	 movs dword ptr	es:[edi],[esi]
1  2923	    1608  E9 0224			 jmp	 @v_ok
1  2924
1  2925	    160B			 @v_1Ch_02:
1  2926	    160B  66| 83 EC 32			 sub	 esp,32h
1  2927	    160F  66| 8B EC			 mov	 ebp,esp
1  2928	    1612  E8 01FB			 call	 @v_std
1  2929	    1615  66| 8B F3			 mov	 esi,ebx
1  2930	    1618  66| 8B 3E 3542r		 mov	 edi,_lobufbase
1  2931	    161D  B8 1C00			 mov	 ax,1C00h
1  2932	    1620  33 DB				 xor	 bx,bx
1  2933	    1622  CD 10				 int	 10h
1  2934	    1624  66| 8B CB			 mov	 ecx,ebx
1  2935	    1627  66| C1 E1 04			 shl	 ecx,4
1  2936	    162B  1E 06				 push	 ds es
1  2937	    162D  1F 07				 pop	 ds es
1  2938	    162F  F3> 66| 67| A5		 rep	 movs dword ptr	es:[edi],[esi]
1  2939	    1633  E8 EFD3			 call	 int10h
1  2940	    1636  E9 01F6			 jmp	 @v_ok
1  2941
1  2942
1  2943					 ;=============================================================================
1  2944					 ; VESA: Get SuperVGA Information
1  2945					 ; In:	 ES:EDI	= 512 byte buffer
1  2946					 ; Out:	 AL = 4Fh if function supported	by VESA	BIOS
1  2947					 ;	 AH = 00h if function was successful
1  2948					 ;	 ES:EDI	= 512 byte buffer
1  2949					 ;
1  2950					 ;=============================================================================
1  2951					 ; VESA: Get SuperVGA Mode Information
1  2952					 ; In:	 CX = VideoMode
1  2953					 ;	 ES:EDI	= 256 byte buffer
1  2954					 ; Out:	 AL = 4Fh if function supported	by VESA	BIOS
1  2955					 ;	 AH = 00h if function was successful
1  2956					 ;	 ES:EDI	= 256 byte buffer
1  2957					 ;
1  2958	    1639			 @v_4F00h:
1  2959	    1639			 @v_4F01h:
1  2960	    1639  66| 83 EC 32			 sub	 esp,32h
1  2961	    163D  66| 8B EC			 mov	 ebp,esp
1  2962	    1640  67| 89 45 1C			 mov	 [ebp+1Ch],ax		 ; store AX
1  2963	    1644  67| 89 4D 18			 mov	 [ebp+18h],cx		 ; store CX
1  2964	    1648  8B D0				 mov	 dx,ax
1  2965	    164A  2E: 8E 1E 3522r		 mov	 ds,cs:_sel_ds
1  2966	    164F  A1 3516r			 mov	 ax,_seg_buf
1  2967	    1652  67| 89 45 22			 mov	 word ptr [ebp+22h],ax	 ; store ES
1  2968	    1656  67| C7 45 00 0000		 mov	 word ptr [ebp+00h],0	 ; store DI
1  2969	    165C  E8 EFAA			 call	 int10h
1  2970	    165F  66| 8B 36 3542r		 mov	 esi,_lobufbase
1  2971	    1664  84 D2				 test	 dl,dl
1  2972	    1666  66| B9 00000040		 mov	 ecx,64
1  2973	    166C  75 30	90 90			 jnz	 @@1
1  2974
1  2975	    1670  66| 67| 8D 5E	06		 lea	 ebx,[esi+06h]		 ; offset of OEM Str
1  2976	    1675  E8 002D			 call	 @@mod
1  2977	    1678  66| 67| 8D 5E	0E		 lea	 ebx,[esi+0Eh]		 ; offset of VideoMode Ptr
1  2978	    167D  E8 0025			 call	 @@mod
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 54
dos32a.asm



1  2979	    1680  66| 67| 8D 5E	16		 lea	 ebx,[esi+16h]		 ; offset of OEM Version Ptr
1  2980	    1685  E8 001D			 call	 @@mod
1  2981	    1688  66| 67| 8D 5E	1A		 lea	 ebx,[esi+1Ah]		 ; offset of OEM Name Ptr
1  2982	    168D  E8 0015			 call	 @@mod
1  2983	    1690  66| 67| 8D 5E	1E		 lea	 ebx,[esi+1Eh]		 ; offset of OEM Revision Ptr
1  2984	    1695  E8 000D			 call	 @@mod
1  2985	    1698  66| B9 00000080		 mov	 ecx,128
1  2986	    169E  F3> 66| 67| A5	 @@1:	 rep	 movs dword ptr	es:[edi],[esi]
1  2987	    16A2  E9 018A			 jmp	 @v_ok
1  2988
1  2989	    16A5  66| 67| 0F B7	13	 @@mod:	 movzx	 edx,word ptr [ebx+00h]	 ; get low word	(offset)
1  2990	    16AA  66| 67| 0F B7	43 02		 movzx	 eax,word ptr [ebx+02h]	 ; get high word (segment)
1  2991	    16B0  66| C1 E0 04			 shl	 eax,4			 ; convert real	mode seg:off
1  2992	    16B4  66| 03 C2			 add	 eax,edx		 ; to linear ptr relative to zero
1  2993	    16B7  67| 8B 53 02			 mov	 dx,[ebx+02h]
1  2994	    16BB  3B 16	3516r			 cmp	 dx,_seg_buf
1  2995	    16BF  75 0A	90 90			 jnz	 @@ok
1  2996	    16C3  66| 2B 06 353Er		 sub	 eax,_lobufzero		 ; since the structure will be moved
1  2997	    16C8  66| 03 C7			 add	 eax,edi		 ; from	buffer,	we must	adjust ptr
1  2998	    16CB  66| 67| 89 03		 @@ok:	 mov	 [ebx+00h],eax
1  2999	    16CF  C3				 ret
1  3000
1  3001
1  3002					 ;=============================================================================
1  3003					 ; VESA: Save/Restore SuperVGA Video State
1  3004					 ; In:	 DL = subfunction:
1  3005					 ;		 00h - get state buffer	size
1  3006					 ;		 Return: BX = number of	64-byte	blocks needed
1  3007					 ;		 01h - save video states
1  3008					 ;		 02h - restore video states
1  3009					 ;	 ECX = states to save/restore
1  3010					 ;	 ES:EBX	= pointer to save/restore buffer
1  3011					 ; Out:	 AL = 4Fh if function supported	by VESA	BIOS
1  3012					 ;	 AH = 00h if function was successful
1  3013					 ;
1  3014	    16D0			 @v_4F04h:
1  3015	    16D0  84 D2				 test	 dl,dl
1  3016	    16D2  0F 84	FEEC			 jz	 @v_1Ch_00
1  3017	    16D6  80 FA	01			 cmp	 dl,01h
1  3018	    16D9  74 0C	90 90			 jz	 @v_4F04h_01
1  3019	    16DD  80 FA	02			 cmp	 dl,02h
1  3020	    16E0  74 31	90 90			 jz	 @v_4F04h_02
1  3021	    16E4  E9 015B			 jmp	 @v_err
1  3022
1  3023	    16E7			 @v_4F04h_01:
1  3024	    16E7  66| 83 EC 32			 sub	 esp,32h
1  3025	    16EB  66| 8B EC			 mov	 ebp,esp
1  3026	    16EE  E8 011F			 call	 @v_std
1  3027	    16F1  E8 EF15			 call	 int10h
1  3028	    16F4  66| 8B 36 3542r		 mov	 esi,_lobufbase
1  3029	    16F9  66| 8B FB			 mov	 edi,ebx
1  3030	    16FC  B8 4F04			 mov	 ax,4F04h
1  3031	    16FF  32 D2				 xor	 dl,dl
1  3032	    1701  33 DB				 xor	 bx,bx
1  3033	    1703  CD 10				 int	 10h
1  3034	    1705  66| 8B CB			 mov	 ecx,ebx
1  3035	    1708  66| C1 E1 04			 shl	 ecx,4
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 55
dos32a.asm



1  3036	    170C  F3> 66| 67| A5		 rep	 movs dword ptr	es:[edi],[esi]
1  3037	    1710  E9 011C			 jmp	 @v_ok
1  3038
1  3039	    1713			 @v_4F04h_02:
1  3040	    1713  66| 83 EC 32			 sub	 esp,32h
1  3041	    1717  66| 8B EC			 mov	 ebp,esp
1  3042	    171A  E8 00F3			 call	 @v_std
1  3043	    171D  66| 8B F3			 mov	 esi,ebx
1  3044	    1720  66| 8B 3E 3542r		 mov	 edi,_lobufbase
1  3045	    1725  B8 4F04			 mov	 ax,4F04h
1  3046	    1728  32 D2				 xor	 dl,dl
1  3047	    172A  33 DB				 xor	 bx,bx
1  3048	    172C  CD 10				 int	 10h
1  3049	    172E  66| 8B CB			 mov	 ecx,ebx
1  3050	    1731  66| C1 E1 04			 shl	 ecx,4
1  3051	    1735  1E 06				 push	 ds es
1  3052	    1737  1F 07				 pop	 ds es
1  3053	    1739  F3> 66| 67| A5		 rep	 movs dword ptr	es:[edi],[esi]
1  3054	    173D  E8 EEC9			 call	 int10h
1  3055	    1740  E9 00EC			 jmp	 @v_ok
1  3056
1  3057
1  3058					 ;=============================================================================
1  3059					 ; VESA: Load/Unload Palette Data
1  3060					 ; In:	 BL = subfunction:
1  3061					 ;		 00h - set palette data
1  3062					 ;		 01h - get palette data
1  3063					 ;		 02h - set 2nd palette data
1  3064					 ;		 03h - get 2nd palette data
1  3065					 ;		 80h - set palette data	during VR
1  3066					 ;	 ECX = number of palette registers to update
1  3067					 ;	 EDX = first palette register to update
1  3068					 ;	 ES:EDI	= pointer to buffer
1  3069					 ; Out:	 AL = 4Fh if function supported	by VESA	BIOS
1  3070					 ;	 AH = 00h if function was successful
1  3071					 ;
1  3072	    1743			 @v_4F09h:
1  3073	    1743  80 FB	03			 cmp	 bl,03h
1  3074	    1746  76 09	90 90			 jbe	 @@0
1  3075	    174A  80 FB	80			 cmp	 bl,80h
1  3076	    174D  0F 85	00F1			 jnz	 @v_err
1  3077	    1751  66| 83 EC 32		 @@0:	 sub	 esp,32h
1  3078	    1755  66| 8B EC			 mov	 ebp,esp
1  3079	    1758  67| 89 45 1C			 mov	 [ebp+1Ch],ax
1  3080	    175C  67| 89 4D 18			 mov	 [ebp+18h],cx
1  3081	    1760  67| 89 55 14			 mov	 [ebp+14h],dx
1  3082	    1764  67| 89 5D 10			 mov	 [ebp+10h],bx
1  3083	    1768  2E: 8E 1E 3522r		 mov	 ds,cs:_sel_ds
1  3084	    176D  A1 3516r			 mov	 ax,_seg_buf
1  3085	    1770  67| 89 45 22			 mov	 word ptr [ebp+22h],ax
1  3086	    1774  67| C7 45 00 0000		 mov	 word ptr [ebp+00h],0
1  3087	    177A  84 DB				 test	 bl,bl
1  3088	    177C  74 14	90 90			 jz	 @@1
1  3089	    1780  FE CB				 dec	 bl
1  3090	    1782  74 24	90 90			 jz	 @@2
1  3091	    1786  FE CB				 dec	 bl
1  3092	    1788  74 08	90 90			 jz	 @@1
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 56
dos32a.asm



1  3093	    178C  FE CB				 dec	 bl
1  3094	    178E  74 18	90 90			 jz	 @@2
1  3095	    1792  66| 8B F7		 @@1:	 mov	 esi,edi
1  3096	    1795  66| 8B 3E 3542r		 mov	 edi,_lobufbase
1  3097	    179A  1E 06				 push	 ds es
1  3098	    179C  1F 07				 pop	 ds es
1  3099	    179E  F3> 66| 67| A5		 rep	 movs dword ptr	es:[edi],[esi]
1  3100	    17A2  E8 EE64			 call	 int10h
1  3101	    17A5  E9 0087			 jmp	 @v_ok
1  3102	    17A8  E8 EE5E		 @@2:	 call	 int10h
1  3103	    17AB  66| 8B 36 3542r		 mov	 esi,_lobufbase
1  3104	    17B0  F3> 66| 67| A5		 rep	 movs dword ptr	es:[edi],[esi]
1  3105	    17B4  EB 79	90			 jmp	 @v_ok
1  3106
1  3107
1  3108					 ;=============================================================================
1  3109					 ; VESA: Get Protected Mode Interface
1  3110					 ; In:	 BL = 00h - return protected mode table
1  3111					 ; Out:	 AL = 4Fh if function supported	by VESA	BIOS
1  3112					 ;	 AH = 00h if function was successful
1  3113					 ;	 ES = protected	mode selector of table
1  3114					 ;	 EDI = offset of table
1  3115					 ;	 ECX = length of table
1  3116					 ;
1  3117	    17B7			 @v_4F0Ah:
1  3118	    17B7  66| 83 EC 32			 sub	 esp,32h
1  3119	    17BB  66| 8B EC			 mov	 ebp,esp
1  3120	    17BE  67| 89 45 1C			 mov	 [ebp+1Ch],ax
1  3121	    17C2  67| 89 5D 10			 mov	 [ebp+10h],bx
1  3122	    17C6  E8 EE40			 call	 int10h
1  3123	    17C9  66| 67| 0F B7	45 1C		 movzx	 eax,word ptr [ebp+1Ch]	 ; get AX
1  3124	    17CF  66| 67| 0F B7	4D 18		 movzx	 ecx,word ptr [ebp+18h]	 ; get CX
1  3125	    17D5  66| 67| 0F B7	55 22		 movzx	 edx,word ptr [ebp+22h]	 ; get ES segment
1  3126	    17DB  66| 67| 0F B7	7D 00		 movzx	 edi,word ptr [ebp+00h]	 ; get DI pointer
1  3127	    17E1  3D 004F			 cmp	 ax,004Fh		 ; check that there was	no error
1  3128	    17E4  75 49	90 90			 jnz	 @v_ok
1  3129	    17E8  66| C1 E2 04			 shl	 edx,4
1  3130	    17EC  66| 03 FA			 add	 edi,edx		 ; convert seg:off to linear addr
1  3131	    17EF  66| 83 C4 32			 add	 esp,32h
1  3132	    17F3  66| 67| 89 44	24 1C		 mov	 [esp+1Ch],eax		 ; set EAX
1  3133	    17F9  66| 67| 89 4C	24 18		 mov	 [esp+18h],ecx		 ; set ECX
1  3134	    17FF  66| 67| 89 3C	24		 mov	 [esp+00h],edi		 ; set EDI
1  3135	    1804  2E: A1 352Cr			 mov	 ax,cs:_sel_zero
1  3136	    1808  67| 89 44 24 20		 mov	 [esp+20h],ax		 ; set ES
1  3137	    180D  E9 0D6B			 jmp	 @__ok
1  3138
1  3139
1  3140
1  3141
1  3142					 ;-----------------------------------------------------------------------------
1  3143	    1810  67| 89 45 1C		 @v_std: mov	 [ebp+1Ch],ax		 ; store AX
1  3144	    1814  67| 89 4D 18			 mov	 [ebp+18h],cx		 ; store CX
1  3145	    1818  67| 89 55 14			 mov	 [ebp+14h],dx		 ; store DX
1  3146	    181C  2E: 8E 1E 3522r		 mov	 ds,cs:_sel_ds
1  3147	    1821  A1 3516r			 mov	 ax,_seg_buf
1  3148	    1824  67| 89 45 22			 mov	 word ptr [ebp+22h],ax	 ; store ES
1  3149	    1828  67| C7 45 10 0000		 mov	 word ptr [ebp+10h],0	 ; store BX
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 57
dos32a.asm



1  3150	    182E  C3				 ret
1  3151	    182F  66| 67| 0F B7	45 1C	 @v_ok:	 movzx	 eax,word ptr [ebp+1Ch]
1  3152	    1835  66| 83 C4 32			 add	 esp,32h
1  3153	    1839  66| 67| 89 44	24 1C		 mov	 [esp+1Ch],eax
1  3154	    183F  E9 0D39			 jmp	 @__ok
1  3155	    1842  66| 67| C7 44	24 1C +	 @v_err: mov	 dword ptr [esp+1Ch],-1
   3156		  FFFFFFFF
1  3157	    184C  E9 0D2C			 jmp	 @__ok
1  3158
1  3159
1  3160					 PopState
1  3161
   3162					 include TEXT\CLIENT\int21h.asm
1  3163					 ;
1  3164					 ; Copyright (C) 1996-2002 Supernar Systems, Ltd. All rights reserved.
1  3165					 ;
1  3166					 ; Redistribution  and	use  in	source and  binary  forms, with	or without
1  3167					 ; modification,  are permitted	provided that the following conditions are
1  3168					 ; met:
1  3169					 ;
1  3170					 ; 1.  Redistributions	of  source code	 must  retain  the above copyright
1  3171					 ; notice, this	list of	conditions and the following disclaimer.
1  3172					 ;
1  3173					 ; 2.  Redistributions	in binary form	must reproduce the above copyright
1  3174					 ; notice,  this  list of conditions and  the  following disclaimer in the
1  3175					 ; documentation and/or	other materials	provided with the distribution.
1  3176					 ;
1  3177					 ; 3. The end-user documentation included with the redistribution, if any,
1  3178					 ; must	include	the following acknowledgment:
1  3179					 ;
1  3180					 ; "This product uses DOS/32 Advanced DOS Extender technology."
1  3181					 ;
1  3182					 ; Alternately,	 this acknowledgment may appear	in the software	itself,	if
1  3183					 ; and wherever	such third-party acknowledgments normally appear.
1  3184					 ;
1  3185					 ; 4.  Products	derived	from this software  may	not be called "DOS/32A"	or
1  3186					 ; "DOS/32 Advanced".
1  3187					 ;
1  3188					 ; THIS	 SOFTWARE AND DOCUMENTATION IS PROVIDED	 "AS IS" AND ANY EXPRESSED
1  3189					 ; OR  IMPLIED	WARRANTIES,  INCLUDING,	BUT  NOT  LIMITED  TO, THE IMPLIED
1  3190					 ; WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
1  3191					 ; DISCLAIMED.	IN  NO	EVENT SHALL THE	 AUTHORS  OR  COPYRIGHT	HOLDERS	BE
1  3192					 ; LIABLE  FOR	ANY DIRECT, INDIRECT,  INCIDENTAL,  SPECIAL, EXEMPLARY,	OR
1  3193					 ; CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT NOT	LIMITED	TO, PROCUREMENT	OF
1  3194					 ; SUBSTITUTE  GOODS  OR  SERVICES;  LOSS OF  USE,  DATA,  OR  PROFITS;	OR
1  3195					 ; BUSINESS  INTERRUPTION) HOWEVER CAUSED AND  ON ANY THEORY OF	LIABILITY,
1  3196					 ; WHETHER IN CONTRACT,	STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE	OR
1  3197					 ; OTHERWISE)  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN	IF
1  3198					 ; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
1  3199					 ;
1  3200					 ;
1  3201
1  3202					 PushState
1  3203
1  3204
1  3205					 .386p
1  3206					 ;=============================================================================
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 58
dos32a.asm



1  3207	    184F  FC			 _int21: cld
1  3208	    1850  2E: F7 06 34F2r 0100		 test	 cs:_sys_misc,0100h	 ; check for CTRL-C flag
1  3209	    1857  0F 85	0140			 jnz	 _ctrl_c
1  3210
1  3211	    185B  1E 06				 push	 ds es
1  3212	    185D  66| 60			 pushad
1  3213
1  3214	    185F  80 FC	09			 cmp	 ah,09h		 ; Print string:	 DS:EDX
1  3215	    1862  0F 84	013B			 jz	 @__09h
1  3216
1  3217	    1866  80 FC	1A			 cmp	 ah,1Ah		 ; Set DTA buffer:	 DS:EDX
1  3218	    1869  0F 84	017B			 jz	 @__1Ah
1  3219	    186D  80 FC	1B			 cmp	 ah,1Bh		 ; Get DefDrive	Info:	 -> AL,	DS:EBX,	ECX EDX
1  3220	    1870  0F 84	01A7			 jz	 @__1Bh
1  3221	    1874  80 FC	1C			 cmp	 ah,1Ch		 ; Get Drive Info:	 AL, (-> ---//---)
1  3222	    1877  0F 84	01A0			 jz	 @__1Ch
1  3223	    187B  80 FC	1F			 cmp	 ah,1Fh		 ; Get DefDrive	PB:	 -> AL,	DS:EBX
1  3224	    187E  0F 84	01CC			 jz	 @__1Fh
1  3225
1  3226	    1882  80 FC	25			 cmp	 ah,25h		 ; Set INT vector:	 AL, DS:EDX
1  3227	    1885  0F 84	01EC			 jz	 @__25h
1  3228
1  3229	    1889  80 FC	2F			 cmp	 ah,2Fh		 ; Get DTA buffer:	 -> ES:EBX
1  3230	    188C  0F 84	01F5			 jz	 @__2Fh
1  3231	    1890  80 FC	31			 cmp	 ah,31h		 ; Go TSR		 AL
1  3232	    1893  0F 84	0205			 jz	 @__31h
1  3233	    1897  80 FC	32			 cmp	 ah,32h		 ; Get Drive PB:	 AL, (-> DS:EBX)
1  3234	    189A  0F 84	01B0			 jz	 @__32h
1  3235	    189E  80 FC	34			 cmp	 ah,34h		 ; Get InDOS flag:	 -> ES:EBX
1  3236	    18A1  0F 84	021F			 jz	 @__34h
1  3237
1  3238	    18A5  80 FC	35			 cmp	 ah,35h		 ; Get INT vector:	 AL, ES:EBX
1  3239	    18A8  0F 84	0234			 jz	 @__35h
1  3240
1  3241	    18AC  80 FC	39			 cmp	 ah,39h		 ; Create DIR:		 DS:EDX
1  3242	    18AF  0F 84	0242			 jz	 @__39h
1  3243	    18B3  80 FC	3A			 cmp	 ah,3Ah		 ; Remove DIR:		 DS:EDX
1  3244	    18B6  0F 84	023B			 jz	 @__3Ah
1  3245	    18BA  80 FC	3B			 cmp	 ah,3Bh		 ; Change DIR:		 DS:EDX
1  3246	    18BD  0F 84	0234			 jz	 @__3Bh
1  3247
1  3248	    18C1  80 FC	3C			 cmp	 ah,3Ch		 ; Create file:		 CX, DS:EDX
1  3249	    18C4  0F 84	023D			 jz	 @__3Ch
1  3250	    18C8  80 FC	3D			 cmp	 ah,3Dh		 ; Open	file:		 AL, DS:EDX
1  3251	    18CB  0F 84	0236			 jz	 @__3Dh
1  3252	    18CF  80 FC	3F			 cmp	 ah,3Fh		 ; Read	file:		 BX, ECX, DS:EDX
1  3253	    18D2  0F 84	023F			 jz	 @__3Fh
1  3254	    18D6  80 FC	40			 cmp	 ah,40h		 ; Write file:		 BX, ECX, DS:EDX
1  3255	    18D9  0F 84	0313			 jz	 @__40h
1  3256	    18DD  80 FC	41			 cmp	 ah,41h		 ; Delete file:		 DS:EDX
1  3257	    18E0  0F 84	0211			 jz	 @__41h
1  3258	    18E4  80 FC	42			 cmp	 ah,42h		 ; Move	file ptr:	 AL, BX, EDX, (->EAX)
1  3259	    18E7  0F 84	03E7			 jz	 @__42h
1  3260	    18EB  80 FC	43			 cmp	 ah,43h		 ; Change file attr:	 CX, DS:EDX
1  3261	    18EE  0F 84	03F6			 jz	 @__43h
1  3262
1  3263	    18F2  80 FC	47			 cmp	 ah,47h		 ; Get DIR:		 DL, DS:ESI
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 59
dos32a.asm



1  3264	    18F5  0F 84	0408			 jz	 @__47h
1  3265
1  3266	    18F9  80 FC	48			 cmp	 ah,48h		 ; Alloc mem:		 BX (->AX)
1  3267	    18FC  0F 84	045B			 jz	 @__48h
1  3268	    1900  80 FC	49			 cmp	 ah,49h		 ; Dealloc mem:		 ES
1  3269	    1903  0F 84	0481			 jz	 @__49h
1  3270	    1907  80 FC	4A			 cmp	 ah,4Ah		 ; Realloc mem:		 BX
1  3271	    190A  0F 84	049C			 jz	 @__4Ah
1  3272
1  3273	    190E  80 FC	4B			 cmp	 ah,4Bh		 ; Execute Prog:	 AL, DS:EDX, ES:EBX
1  3274	    1911  0F 84	04B7			 jz	 @__4Bh
1  3275	    1915  80 FC	4C			 cmp	 ah,4Ch		 ; Terminate Prog:	 AL
1  3276	    1918  0F 84	060A			 jz	 @__4Ch
1  3277
1  3278	    191C  80 FC	4E			 cmp	 ah,4Eh		 ; Find	file:		 CX, DS:EDX
1  3279	    191F  0F 84	0684			 jz	 @__4Eh
1  3280	    1923  80 FC	4F			 cmp	 ah,4Fh		 ; Find	next file:	 -
1  3281	    1926  0F 84	06AF			 jz	 @__4Fh
1  3282	    192A  80 FC	51			 cmp	 ah,51h		 ; Get PSP segment:	 (->BX)
1  3283	    192D  0F 84	06F9			 jz	 @__51h
1  3284	    1931  80 FC	56			 cmp	 ah,56h		 ; Rename file:		 DS:EDX, ES:EDI
1  3285	    1934  0F 84	0702			 jz	 @__56h
1  3286	    1938  80 FC	5A			 cmp	 ah,5Ah		 ; Create temp file:	 CX, DS:EDX
1  3287	    193B  0F 84	01B6			 jz	 @__5Ah
1  3288	    193F  80 FC	5B			 cmp	 ah,5Bh		 ; Create new file:	 CX, DS:EDX
1  3289	    1942  0F 84	01AF			 jz	 @__5Bh
1  3290	    1946  80 FC	62			 cmp	 ah,62h		 ; Get PSP selector:	 (->BX)
1  3291	    1949  0F 84	0769			 jz	 @__62h
1  3292
1  3293	    194D  80 FC	FF			 cmp	 ah,0FFh	 ; Rational DOS/4G call
1  3294	    1950  0F 84	0858			 jz	 @__FFh
1  3295
1  3296	    1954  80 FC	71			 cmp	 ah,71h		 ; Windows 95 long filename extensions
1  3297	    1957  75 38	90 90			 jnz	 @__go21
1  3298	    195B  3C 39				 cmp	 al,39h		 ; Win95 Create	DIR:	 DS:EDX
1  3299	    195D  0F 84	0194			 jz	 @__39h
1  3300	    1961  3C 3A				 cmp	 al,3Ah		 ; Win95 Remove	DIR:	 DS:EDX
1  3301	    1963  0F 84	018E			 jz	 @__3Ah
1  3302	    1967  3C 3B				 cmp	 al,3Bh		 ; Win95 Change	DIR:	 DS:EDX
1  3303	    1969  0F 84	0188			 jz	 @__3Bh
1  3304	    196D  3C 41				 cmp	 al,41h		 ; Win95 Delete	file:	 DS:EDX, CX, SI
1  3305	    196F  0F 84	0182			 jz	 @__41h
1  3306	    1973  3C 43				 cmp	 al,43h		 ; Win95 Change	attr:	 DS:EDX, BL, CX
1  3307	    1975  0F 84	036F			 jz	 @__43h
1  3308	    1979  3C 47				 cmp	 al,47h		 ; Win95 Get curr DIR:	 DS:ESI, DL
1  3309	    197B  0F 84	0382			 jz	 @__47h
1  3310	    197F  3C 56				 cmp	 al,56h		 ; Win95 Rename	file:	 DS:EDX, ES:EDI
1  3311	    1981  0F 84	06B5			 jz	 @__56h
1  3312	    1985  3C 60				 cmp	 al,60h		 ; Win95 True name:
1  3313	    1987  0F 84	073B			 jz	 @_7160
1  3314	    198B  3C 6C				 cmp	 al,6Ch		 ; Win95 C/Open	file:
1  3315	    198D  0F 84	07B2			 jz	 @_716C
1  3316
1  3317	    1991  66| 61		 @__go21:popad
1  3318	    1993  07 1F				 pop	 es ds
1  3319	    1995  66				 db	 66h
1  3320	    1996  2E: FF 2E 3562r		 jmp	 cs:_int21_ip
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 60
dos32a.asm



1  3321
1  3322
1  3323	    199B  B8 4CFF		 _ctrl_c:mov	 ax,4CFFh	 ; exit	on CTRL-C with code 255
1  3324	    199E  E9 0585			 jmp	 @__4Ch
1  3325
1  3326
1  3327
1  3328
1  3329					 ;=============================================================================
1  3330					 ; Print String
1  3331					 ;  In:	 DS:EDX	= offset of string
1  3332					 ;  Out: -
1  3333					 ;
1  3334	    19A1  1E			 @__09h: push	 ds
1  3335	    19A2  07				 pop	 es
1  3336	    19A3  66| 83 EC 32			 sub	 esp,32h
1  3337	    19A7  66| 8B EC			 mov	 ebp,esp
1  3338	    19AA  67| 89 45 1C			 mov	 [ebp+1Ch],ax
1  3339	    19AE  66| 8B F2			 mov	 esi,edx
1  3340	    19B1  66| 8B FA			 mov	 edi,edx
1  3341	    19B4  B0 24				 mov	 al,'$'
1  3342	    19B6  66| 83 C9 FF			 or	 ecx,-1
1  3343	    19BA  F2> 67| AE			 repne	 scas byte ptr es:[edi]
1  3344	    19BD  66| F7 D1			 not	 ecx
1  3345	    19C0  2E: 8E 06 3522r		 mov	 es,cs:_sel_ds
1  3346	    19C5  66| 2E: 8B 3E	3542r		 mov	 edi,cs:_lobufbase
1  3347	    19CB  F3> 67| A4			 rep	 movs byte ptr es:[edi],[esi]
1  3348	    19CE  67| AA			 stos	 byte ptr es:[edi]
1  3349	    19D0  2E: A1 3516r			 mov	 ax,cs:_seg_buf
1  3350	    19D4  67| 89 45 24			 mov	 word ptr [ebp+24h],ax
1  3351	    19D8  67| C7 45 14 0000		 mov	 word ptr [ebp+14h],00h
1  3352	    19DE  E8 EC36			 call	 int21h
1  3353	    19E1  66| 83 C4 32			 add	 esp,32h
1  3354	    19E5  E9 0B93			 jmp	 @__ok
1  3355
1  3356
1  3357
1  3358					 ;=============================================================================
1  3359					 ; Set DTA buffer
1  3360					 ;  In:	 DS:EDX	= sel:offs
1  3361					 ;  Out: -
1  3362					 ;
1  3363	    19E8  2E: 8E 06 3522r	 @__1Ah: mov	 es,cs:_sel_ds
1  3364	    19ED  26: 8C 1E 3554r		 mov	 es:_app_dta_sel,ds
1  3365	    19F2  66| 26: 89 16	3556r		 mov	 es:_app_dta_off,edx
1  3366	    19F8  66| 83 EC 32			 sub	 esp,32h
1  3367	    19FC  66| 8B EC			 mov	 ebp,esp
1  3368	    19FF  67| 89 45 1C			 mov	 [ebp+1Ch],ax
1  3369	    1A03  2E: A1 3518r			 mov	 ax,cs:_seg_dta
1  3370	    1A07  67| 89 45 24			 mov	 word ptr [ebp+24h],ax
1  3371	    1A0B  67| C7 45 14 0000		 mov	 word ptr [ebp+14h],0
1  3372	    1A11  E8 EC03			 call	 int21h
1  3373	    1A14  66| 83 C4 32			 add	 esp,32h
1  3374	    1A18  E9 0B60			 jmp	 @__ok
1  3375
1  3376
1  3377
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 61
dos32a.asm



1  3378					 ;=============================================================================
1  3379					 ; Get Default Drive Info
1  3380					 ;  In:	 -
1  3381					 ;  Out: AL = sectors per cluster
1  3382					 ;	 DS:EBX	= addr of FAT
1  3383					 ;	 ECX = bytes per sector
1  3384					 ;	 EDX = number of clusters on drive
1  3385					 ;
1  3386	    1A1B			 @__1Bh:
1  3387	    1A1B  E8 0AF8		 @__1Ch: call	 @__all
1  3388	    1A1E  67| 88 44 24 1C		 mov	 [esp+1Ch],al
1  3389	    1A23  3C FF				 cmp	 al,0FFh
1  3390	    1A25  74 24	90 90			 jz	 @@done
1  3391	    1A29  66| 67| 89 54	24 14		 mov	 [esp+14h],edx
1  3392	    1A2F  66| 67| 89 4C	24 18		 mov	 [esp+18h],ecx
1  3393	    1A35  66| C1 E6 04			 shl	 esi,4
1  3394	    1A39  66| 03 DE			 add	 ebx,esi
1  3395	    1A3C  66| 67| 89 5C	24 10		 mov	 [esp+10h],ebx
1  3396	    1A42  2E: A1 352Cr			 mov	 ax,cs:_sel_zero
1  3397	    1A46  67| 89 44 24 22		 mov	 [esp+22h],ax
1  3398	    1A4B  E9 0B2D		 @@done: jmp	 @__ok
1  3399
1  3400
1  3401
1  3402					 ;=============================================================================
1  3403					 ; Get Drive Info
1  3404					 ;  In:	 DL = Drive number
1  3405					 ;  Out: AL = sectors per cluster
1  3406					 ;	 DS:EBX	= addr of FAT
1  3407					 ;	 ECX = bytes per sector
1  3408					 ;	 EDX = number of clusters on drive
1  3409					 ;
1  3410					 ;@__1Ch:	 jmp	 @__1Bh
1  3411
1  3412
1  3413
1  3414					 ;=============================================================================
1  3415					 ; Get DefDrive	Parameter Block
1  3416					 ;  In:	 -
1  3417					 ;  Out: AL = status
1  3418					 ;	 DS:EBX	= addr of DPB
1  3419					 ;
1  3420	    1A4E			 @__1Fh:
1  3421	    1A4E  E8 0AC5		 @__32h: call	 @__all
1  3422	    1A51  67| 88 44 24 1C		 mov	 [esp+1Ch],al
1  3423	    1A56  3C FF				 cmp	 al,0FFh
1  3424	    1A58  74 18	90 90			 jz	 @@done
1  3425	    1A5C  66| C1 E6 04			 shl	 esi,4
1  3426	    1A60  66| 03 DE			 add	 ebx,esi
1  3427	    1A63  66| 67| 89 5C	24 10		 mov	 [esp+10h],ebx
1  3428	    1A69  2E: A1 352Cr			 mov	 ax,cs:_sel_zero
1  3429	    1A6D  67| 89 44 24 22		 mov	 [esp+22h],ax
1  3430	    1A72  E9 0B06		 @@done: jmp	 @__ok
1  3431
1  3432
1  3433
1  3434					 ;=============================================================================
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 62
dos32a.asm



1  3435					 ; Set INT vector
1  3436					 ;  In:	 AL = INT vector, DS:EDX = sel:offs
1  3437					 ;  Out: -
1  3438					 ;
1  3439	    1A75  8A D8			 @__25h: mov	 bl,al
1  3440	    1A77  8C D9				 mov	 cx,ds
1  3441	    1A79  B8 0205			 mov	 ax,0205h
1  3442	    1A7C  CD 31				 int	 31h
1  3443	    1A7E  0F 82	0B05			 jc	 @__err
1  3444	    1A82  E9 0AF6			 jmp	 @__ok
1  3445
1  3446
1  3447
1  3448					 ;=============================================================================
1  3449					 ; Get DTA buffer
1  3450					 ;  In:	 -
1  3451					 ;  Out: ES:EBX	= addr of DTA
1  3452					 ;
1  3453	    1A85  2E: A1 3554r		 @__2Fh: mov	 ax,cs:_app_dta_sel
1  3454	    1A89  67| 89 44 24 20		 mov	 [esp+20h],ax
1  3455	    1A8E  66| 2E: A1 3556r		 mov	 eax,cs:_app_dta_off
1  3456	    1A93  66| 67| 89 44	24 10		 mov	 [esp+10h],eax
1  3457	    1A99  E9 0ADF			 jmp	 @__ok
1  3458
1  3459
1  3460
1  3461					 ;=============================================================================
1  3462					 ; Go TSR
1  3463					 ;  In:	 AL = exit code
1  3464					 ;  Out: -
1  3465					 ;
1  3466	    1A9C  66| 83 EC 32		 @__31h: sub	 esp,32h
1  3467	    1AA0  66| 8B EC			 mov	 ebp,esp
1  3468
1  3469	    1AA3  2E: 8B 1E 353Ar		 mov	 bx,cs:_membase
1  3470	    1AA8  2E: 03 1E 34F4r		 add	 bx,cs:_buf_size
1  3471	    1AAD  2E: 2B 1E 3510r		 sub	 bx,cs:_seg_es
1  3472	    1AB2  67| 89 45 1C			 mov	 [ebp+1Ch],ax
1  3473	    1AB6  67| 89 5D 14			 mov	 [ebp+14h],bx
1  3474	    1ABA  E8 EB5A			 call	 int21h
1  3475
1  3476	    1ABD  66| 83 C4 32			 add	 esp,32h
1  3477	    1AC1  E9 0AB7			 jmp	 @__ok
1  3478
1  3479
1  3480
1  3481					 ;=============================================================================
1  3482					 ; Get Drive Parameter Block
1  3483					 ;  In:	 DL = drive number
1  3484					 ;  Out: AL = status
1  3485					 ;	 DS:EBX	= addr of DPB
1  3486					 ;
1  3487					 ;@__32h:	 jmp	 @__1Fh
1  3488
1  3489
1  3490
1  3491					 ;=============================================================================
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 63
dos32a.asm



1  3492					 ; Get InDOS flag address
1  3493					 ;  In:	 -
1  3494					 ;  Out: ES:EBX	= addr of InDOS	flag
1  3495					 ;
1  3496	    1AC4  E8 0A4F		 @__34h: call	 @__all
1  3497	    1AC7  66| C1 E7 04			 shl	 edi,4
1  3498	    1ACB  66| 03 DF			 add	 ebx,edi
1  3499	    1ACE  66| 67| 89 5C	24 10		 mov	 [esp+10h],ebx
1  3500	    1AD4  2E: A1 352Cr			 mov	 ax,cs:_sel_zero
1  3501	    1AD8  67| 89 44 24 20		 mov	 [esp+20h],ax
1  3502	    1ADD  E9 0A9B			 jmp	 @__ok
1  3503
1  3504
1  3505
1  3506					 ;=============================================================================
1  3507					 ; Get INT vector
1  3508					 ;  In:	 AL = INT vector
1  3509					 ;  Out: ES:EBX	= sel:offs
1  3510					 ;
1  3511	    1AE0  8A D8			 @__35h: mov	 bl,al
1  3512	    1AE2  B8 0204			 mov	 ax,0204h
1  3513	    1AE5  CD 31				 int	 31h
1  3514	    1AE7  67| 89 4C 24 20		 mov	 [esp+20h],cx
1  3515	    1AEC  66| 67| 89 54	24 10		 mov	 [esp+10h],edx
1  3516	    1AF2  E9 0A86			 jmp	 @__ok
1  3517
1  3518
1  3519
1  3520					 ;=============================================================================
1  3521					 ; Create Directory
1  3522					 ;  In:	 DS:EDX	= directory name
1  3523					 ;  Out: -
1  3524					 ;
1  3525	    1AF5			 @__39h:
1  3526	    1AF5			 @__3Ah:
1  3527	    1AF5			 @__3Bh:
1  3528	    1AF5			 @__41h:
1  3529	    1AF5			 @__5Ah:
1  3530	    1AF5			 @__5Bh:
1  3531	    1AF5  E8 09EC			 call	 @__std
1  3532	    1AF8  0F 84	0A7F			 jz	 @__ok
1  3533	    1AFC  66| 67| 89 44	24 1C		 mov	 [esp+1Ch],eax
1  3534	    1B02  E9 0A82			 jmp	 @__err
1  3535
1  3536
1  3537
1  3538					 ;=============================================================================
1  3539					 ; Remove Directory
1  3540					 ;  In:	 DS:EDX	= directory name
1  3541					 ;  Out: -
1  3542					 ;
1  3543					 ;@__3Ah:	 jmp	 @__39h
1  3544
1  3545
1  3546
1  3547					 ;=============================================================================
1  3548					 ; Change Directory
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 64
dos32a.asm



1  3549					 ;  In:	 DS:EDX	= directory name
1  3550					 ;  Out: -
1  3551					 ;
1  3552					 ;@__3Bh:	 jmp	 @__39h
1  3553
1  3554
1  3555
1  3556					 ;=============================================================================
1  3557					 ; Create File
1  3558					 ;  In:	 DS:EDX	= file name, ECX = attributes
1  3559					 ;  Out: EAX = file handle
1  3560					 ;
1  3561	    1B05			 @__3Ch:
1  3562	    1B05  E8 09DC		 @__3Dh: call	 @__std
1  3563	    1B08  66| 67| 89 44	24 1C		 mov	 [esp+1Ch],eax
1  3564	    1B0E  0F 84	0A69			 jz	 @__ok
1  3565	    1B12  E9 0A72			 jmp	 @__err
1  3566
1  3567
1  3568
1  3569					 ;=============================================================================
1  3570					 ; Open	File
1  3571					 ;  In:	 DS:EDX	= file name, AL	= access mode
1  3572					 ;  Out: EAX = file handle
1  3573					 ;
1  3574					 ;@__3Dh:	 jmp	 @__3Ch
1  3575
1  3576
1  3577
1  3578					 ;=============================================================================
1  3579					 ; Read	from File
1  3580					 ;  In:	 DS:EDX	= addr,	ECX = size, EBX	= handle
1  3581					 ;  Out: EAX = bytes read
1  3582					 ;
1  3583	    1B15  1E			 @__3Fh: push	 ds
1  3584	    1B16  07				 pop	 es
1  3585	    1B17  2E: 8E 1E 3522r		 mov	 ds,cs:_sel_ds			 ; DS=_TEXT16
1  3586	    1B1C  66| 83 EC 32			 sub	 esp,32h
1  3587	    1B20  66| 8B EC			 mov	 ebp,esp
1  3588	    1B23  67| 89 5D 10			 mov	 [ebp+10h],bx			 ; store handle	in structure
1  3589	    1B27  66| 8B FA			 mov	 edi,edx			 ; ES:EDI=destination
1  3590	    1B2A  66| 8B D9			 mov	 ebx,ecx			 ; EBX=bytes to	read
1  3591	    1B2D  66| 33 D2			 xor	 edx,edx			 ; EDX=counter bytes read
1  3592	    1B30  66| 3B 0E 3546r		 cmp	 ecx,_lobufsize
1  3593	    1B35  76 75	90 90			 jbe	 @@low
1  3594	    1B39  A1 3516r		 @@0:	 mov	 ax,_seg_buf
1  3595	    1B3C  67| 89 45 24			 mov	 word ptr [ebp+24h],ax		 ; store DS in structure
1  3596	    1B40  67| C7 45 14 0000		 mov	 word ptr [ebp+14h],0		 ; store DX in structure
1  3597	    1B46  67| C6 45 1D 3F		 mov	 byte ptr [ebp+1Dh],3Fh		 ; store AH in structure
1  3598	    1B4B  66| 8B C3			 mov	 eax,ebx
1  3599	    1B4E  66| 3B 06 3546r		 cmp	 eax,_lobufsize
1  3600	    1B53  76 06	90 90			 jbe	 @@1
1  3601	    1B57  66| A1 3546r			 mov	 eax,_lobufsize
1  3602	    1B5B  67| 89 45 18		 @@1:	 mov	 [ebp+18h],ax			 ; store CX in structure
1  3603	    1B5F  E8 EAB5			 call	 int21h				 ; DOS read from file
1  3604	    1B62  66| 67| 0F B7	45 1C		 movzx	 eax,word ptr [ebp+1Ch]		 ; EAX=bytes read
1  3605	    1B68  67| F6 45 20 01		 test	 byte ptr [ebp+20h],1		 ; check for error
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 65
dos32a.asm



1  3606	    1B6D  75 30	90 90			 jnz	 @@err
1  3607	    1B71  66| 8B C8			 mov	 ecx,eax			 ; ECX=EAX for string copy
1  3608	    1B74  66| 8B 36 3542r		 mov	 esi,_lobufbase
1  3609	    1B79  E3 17				 jcxz	 @@done				 ; if ECX=0, 0 bytes read, done
1  3610	    1B7B  C1 E9	02			 shr	 cx,2
1  3611	    1B7E  F3> 66| 67| A5		 rep	 movs dword ptr	es:[edi],[esi]	 ; copy	buffer
1  3612	    1B82  8A C8				 mov	 cl,al
1  3613	    1B84  80 E1	03			 and	 cl,03h
1  3614	    1B87  F3> 67| A4			 rep	 movs byte ptr es:[edi],[esi]
1  3615	    1B8A  66| 03 D0			 add	 edx,eax			 ; adjust bytes	read
1  3616	    1B8D  66| 2B D8			 sub	 ebx,eax			 ; adjust bytes	to read
1  3617	    1B90  77 A7				 ja	 @@0
1  3618	    1B92  66| 83 C4 32		 @@done: add	 esp,32h
1  3619	    1B96  66| 67| 89 54	24 1C		 mov	 [esp+1Ch],edx			 ; store bytes count
1  3620	    1B9C  E9 09DC			 jmp	 @__ok
1  3621	    1B9F  66| 83 C4 32		 @@err:	 add	 esp,32h
1  3622	    1BA3  66| 67| 89 44	24 1C		 mov	 [esp+1Ch],eax			 ; error reading, store	errcode
1  3623	    1BA9  E9 09DB			 jmp	 @__err
1  3624
1  3625	    1BAC  A1 3516r		 @@low:	 mov	 ax,_seg_buf
1  3626	    1BAF  67| 89 45 24			 mov	 word ptr [ebp+24h],ax		 ; store DS in structure
1  3627	    1BB3  67| 89 4D 18			 mov	 word ptr [ebp+18h],cx		 ; store CX in structure
1  3628	    1BB7  67| C7 45 14 0000		 mov	 word ptr [ebp+14h],0		 ; store DX in structure
1  3629	    1BBD  67| C6 45 1D 3F		 mov	 byte ptr [ebp+1Dh],3Fh		 ; store AH in structure
1  3630	    1BC2  E8 EA52			 call	 int21h				 ; DOS read from file
1  3631	    1BC5  66| 67| 0F B7	45 1C		 movzx	 eax,word ptr [ebp+1Ch]		 ; EAX=bytes read
1  3632	    1BCB  67| F6 45 20 01		 test	 byte ptr [ebp+20h],1		 ; check for error
1  3633	    1BD0  75 CD				 jnz	 @@err
1  3634	    1BD2  66| 8B C8			 mov	 ecx,eax			 ; ECX=EAX for string copy
1  3635	    1BD5  66| 8B 36 3542r		 mov	 esi,_lobufbase
1  3636	    1BDA  E3 B6				 jcxz	 @@done				 ; if ECX=0, 0 bytes read, done
1  3637	    1BDC  C1 E9	02			 shr	 cx,2
1  3638	    1BDF  F3> 66| 67| A5		 rep	 movs dword ptr	es:[edi],[esi]	 ; copy	buffer
1  3639	    1BE3  8A C8				 mov	 cl,al
1  3640	    1BE5  80 E1	03			 and	 cl,03h
1  3641	    1BE8  F3> 67| A4			 rep	 movs byte ptr es:[edi],[esi]
1  3642	    1BEB  66| 03 D0			 add	 edx,eax			 ; adjust bytes	read
1  3643	    1BEE  EB A2				 jmp	 @@done
1  3644
1  3645
1  3646					 ;=============================================================================
1  3647					 ; Write to File
1  3648					 ;  In:	 DS:EDX	= addr,	ECX = size, EBX	= handle
1  3649					 ;  Out: EAX = bytes written
1  3650					 ;
1  3651	    1BF0  2E: 8E 06 3522r	 @__40h: mov	 es,cs:_sel_ds
1  3652	    1BF5  66| 83 EC 32			 sub	 esp,32h
1  3653	    1BF9  66| 8B EC			 mov	 ebp,esp
1  3654	    1BFC  67| 89 5D 10			 mov	 [ebp+10h],bx			 ; store handle	in structure
1  3655	    1C00  66| 8B F2			 mov	 esi,edx			 ; DS:ESI=source
1  3656	    1C03  66| 8B D9			 mov	 ebx,ecx			 ; EBX=bytes to	write
1  3657	    1C06  66| 33 D2			 xor	 edx,edx			 ; EDX=counter bytes written
1  3658	    1C09  66| 2E: 3B 0E	3546r		 cmp	 ecx,cs:_lobufsize
1  3659	    1C0F  76 7C	90 90			 jbe	 @@low
1  3660	    1C13  2E: A1 3516r		 @@0:	 mov	 ax,cs:_seg_buf
1  3661	    1C17  67| 89 45 24			 mov	 word ptr [ebp+24h],ax		 ; store DS in structure
1  3662	    1C1B  67| C7 45 14 0000		 mov	 word ptr [ebp+14h],0		 ; store DX in structure
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 66
dos32a.asm



1  3663	    1C21  67| C6 45 1D 40		 mov	 byte ptr [ebp+1Dh],40h		 ; store AH in structure
1  3664	    1C26  66| 8B C3			 mov	 eax,ebx
1  3665	    1C29  66| 2E: 3B 06	3546r		 cmp	 eax,cs:_lobufsize
1  3666	    1C2F  76 07	90 90			 jbe	 @@1
1  3667	    1C33  66| 2E: A1 3546r		 mov	 eax,cs:_lobufsize
1  3668	    1C38  67| 89 45 18		 @@1:	 mov	 [ebp+18h],ax			 ; store CX in structure
1  3669	    1C3C  66| 8B C8			 mov	 ecx,eax
1  3670	    1C3F  66| 2E: 8B 3E	3542r		 mov	 edi,cs:_lobufbase
1  3671	    1C45  E3 2C				 jcxz	 @@done
1  3672	    1C47  C1 E9	02			 shr	 cx,2
1  3673	    1C4A  F3> 66| 67| A5		 rep	 movs dword ptr	es:[edi],[esi]
1  3674	    1C4E  8A C8				 mov	 cl,al
1  3675	    1C50  80 E1	03			 and	 cl,03h
1  3676	    1C53  F3> 67| A4			 rep	 movs byte ptr es:[edi],[esi]
1  3677	    1C56  66| 8B C8			 mov	 ecx,eax			 ; preserve EAX	in ECX
1  3678	    1C59  E8 E9BB			 call	 int21h				 ; DOS write to	file
1  3679	    1C5C  66| 67| 0F B7	45 1C		 movzx	 eax,word ptr [ebp+1Ch]		 ; EAX=bytes written
1  3680	    1C62  67| F6 45 20 01		 test	 byte ptr [ebp+20h],1		 ; check for error
1  3681	    1C67  75 17	90 90			 jnz	 @@err
1  3682	    1C6B  66| 03 D0			 add	 edx,eax			 ; adjust bytes	written
1  3683	    1C6E  66| 2B D9			 sub	 ebx,ecx			 ; adjust bytes	to write
1  3684	    1C71  77 A0				 ja	 @@0				 ; loop	until done
1  3685	    1C73  66| 83 C4 32		 @@done: add	 esp,32h
1  3686	    1C77  66| 67| 89 54	24 1C		 mov	 [esp+1Ch],edx			 ; store bytes count
1  3687	    1C7D  E9 08FB			 jmp	 @__ok
1  3688	    1C80  66| 83 C4 32		 @@err:	 add	 esp,32h
1  3689	    1C84  66| 67| 89 44	24 1C		 mov	 [esp+1Ch],eax			 ; error writing, store	errcode
1  3690	    1C8A  E9 08FA			 jmp	 @__err
1  3691
1  3692	    1C8D  2E: A1 3516r		 @@low:	 mov	 ax,cs:_seg_buf
1  3693	    1C91  67| 89 45 24			 mov	 word ptr [ebp+24h],ax		 ; store DS in structure
1  3694	    1C95  67| 89 4D 18			 mov	 word ptr [ebp+18h],cx		 ; store CX in structure
1  3695	    1C99  67| C7 45 14 0000		 mov	 word ptr [ebp+14h],0		 ; store DX in structure
1  3696	    1C9F  67| C6 45 1D 40		 mov	 byte ptr [ebp+1Dh],40h		 ; store AH in structure
1  3697	    1CA4  E3 17				 jcxz	 @@l1
1  3698	    1CA6  66| 2E: 8B 3E	3542r		 mov	 edi,cs:_lobufbase
1  3699	    1CAC  8A C1				 mov	 al,cl
1  3700	    1CAE  C1 E9	02			 shr	 cx,2
1  3701	    1CB1  F3> 66| 67| A5		 rep	 movs dword ptr	es:[edi],[esi]
1  3702	    1CB5  8A C8				 mov	 cl,al
1  3703	    1CB7  80 E1	03			 and	 cl,03h
1  3704	    1CBA  F3> 67| A4			 rep	 movs byte ptr es:[edi],[esi]
1  3705	    1CBD  E8 E957		 @@l1:	 call	 int21h				 ; DOS write to	file
1  3706	    1CC0  66| 67| 0F B7	45 1C		 movzx	 eax,word ptr [ebp+1Ch]		 ; EAX=bytes written
1  3707	    1CC6  67| F6 45 20 01		 test	 byte ptr [ebp+20h],1		 ; check for error
1  3708	    1CCB  75 B3				 jnz	 @@err
1  3709	    1CCD  66| 03 D0			 add	 edx,eax			 ; adjust bytes	written
1  3710	    1CD0  EB A1				 jmp	 @@done
1  3711
1  3712
1  3713					 ;=============================================================================
1  3714					 ; Delete File
1  3715					 ;  In:	 DS:EDX	= file name
1  3716					 ;  Out: -
1  3717					 ;
1  3718					 ;@__41h:	 jmp	 @__39h
1  3719
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 67
dos32a.asm



1  3720
1  3721
1  3722					 ;=============================================================================
1  3723					 ; Move	File Ptr
1  3724					 ;  In:	 ECX:EDX = ptr,	AL = mode
1  3725					 ;  Out: EDX:EAX = ptr
1  3726					 ;
1  3727	    1CD2  E8 0841		 @__42h: call	 @__all
1  3728	    1CD5  66| 67| 89 44	24 1C		 mov	 [esp+1Ch],eax
1  3729	    1CDB  0F 85	08A8			 jnz	 @__err
1  3730	    1CDF  66| 67| 89 54	24 14		 mov	 [esp+14h],edx
1  3731	    1CE5  E9 0893			 jmp	 @__ok
1  3732
1  3733
1  3734
1  3735					 ;=============================================================================
1  3736					 ; Change File Attributes
1  3737					 ;  In:	 DS:EDX	= file name
1  3738					 ;  Out: -
1  3739					 ;
1  3740	    1CE8  E8 07F9		 @__43h: call	 @__std
1  3741	    1CEB  74 0B	90 90			 jz	 @@1
1  3742	    1CEF  66| 67| 89 44	24 1C		 mov	 [esp+1Ch],eax
1  3743	    1CF5  E9 088F			 jmp	 @__err
1  3744	    1CF8  66| 67| 89 4C	24 18	 @@1:	 mov	 [esp+18h],ecx
1  3745	    1CFE  E9 087A			 jmp	 @__ok
1  3746
1  3747
1  3748
1  3749					 ;=============================================================================
1  3750					 ; Get Directory
1  3751					 ;  In:	 DL = drive
1  3752					 ;	 DS:ESI	= buffer
1  3753					 ;  Out: -
1  3754					 ;
1  3755	    1D01  66| 83 EC 32		 @__47h: sub	 esp,32h
1  3756	    1D05  66| 8B EC			 mov	 ebp,esp
1  3757	    1D08  67| 89 45 1C			 mov	 [ebp+1Ch],ax
1  3758	    1D0C  67| 89 55 14			 mov	 [ebp+14h],dx
1  3759	    1D10  2E: A1 3516r			 mov	 ax,cs:_seg_buf
1  3760	    1D14  67| 89 45 24			 mov	 [ebp+24h],ax
1  3761	    1D18  67| C7 45 04 0000		 mov	 word ptr [ebp+04h],0
1  3762	    1D1E  E8 E8F6			 call	 int21h
1  3763	    1D21  67| F6 45 20 01		 test	 byte ptr [ebp+20h],1
1  3764	    1D26  75 20	90 90			 jnz	 @@err
1  3765	    1D2A  1E				 push	 ds
1  3766	    1D2B  07				 pop	 es
1  3767	    1D2C  66| 8B FE			 mov	 edi,esi
1  3768	    1D2F  2E: 8E 1E 3522r		 mov	 ds,cs:_sel_ds
1  3769	    1D34  66| 8B 36 3542r		 mov	 esi,_lobufbase
1  3770	    1D39  67| AC		 @@1:	 lods	 byte ptr ds:[esi]
1  3771	    1D3B  67| AA			 stos	 byte ptr es:[edi]
1  3772	    1D3D  84 C0				 test	 al,al
1  3773	    1D3F  75 F8				 jnz	 @@1
1  3774	    1D41  66| 83 C4 32			 add	 esp,32h
1  3775	    1D45  E9 0833			 jmp	 @__ok
1  3776	    1D48  66| 67| 0F B7	45 1C	 @@err:	 movzx	 eax,word ptr [ebp+1Ch]
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 68
dos32a.asm



1  3777	    1D4E  66| 83 C4 32			 add	 esp,32h
1  3778	    1D52  66| 67| 89 44	24 1C		 mov	 [esp+1Ch],eax
1  3779	    1D58  E9 082C			 jmp	 @__err
1  3780
1  3781
1  3782
1  3783					 ;=============================================================================
1  3784					 ; Allocate DOS	Memory
1  3785					 ;  In:	 EBX = bytes to	allocate
1  3786					 ;  Out: EAX = selector
1  3787					 ;
1  3788	    1D5B  B8 0100		 @__48h: mov	 ax,0100h
1  3789	    1D5E  CD 31				 int	 31h
1  3790	    1D60  72 0F	90 90			 jc	 @@1
1  3791	    1D64  66| 0F B7 D2			 movzx	 edx,dx
1  3792	    1D68  66| 67| 89 54	24 1C		 mov	 [esp+1Ch],edx
1  3793	    1D6E  E9 080A			 jmp	 @__ok
1  3794	    1D71  66| 0F B7 C0		 @@1:	 movzx	 eax,ax
1  3795	    1D75  66| 0F B7 DB			 movzx	 ebx,bx
1  3796	    1D79  66| 67| 89 44	24 1C		 mov	 [esp+1Ch],eax
1  3797	    1D7F  66| 67| 89 5C	24 10		 mov	 [esp+10h],ebx
1  3798	    1D85  E9 07FF			 jmp	 @__err
1  3799
1  3800
1  3801
1  3802					 ;=============================================================================
1  3803					 ; Deallocate DOS Memory
1  3804					 ;  In:	 ES = selector
1  3805					 ;  Out: -
1  3806					 ;
1  3807	    1D88  B8 0101		 @__49h: mov	 ax,0101h
1  3808	    1D8B  8C C2				 mov	 dx,es
1  3809	    1D8D  CD 31				 int	 31h
1  3810	    1D8F  73 0F	90 90			 jnc	 @@0
1  3811	    1D93  66| 0F B7 C0			 movzx	 eax,ax
1  3812	    1D97  66| 67| 89 44	24 1C		 mov	 [esp+1Ch],eax
1  3813	    1D9D  E9 07E7			 jmp	 @__err
1  3814	    1DA0  67| C7 44 24 20 0000	 @@0:	 mov	 word ptr [esp+20h],0
1  3815	    1DA7  E9 07D1			 jmp	 @__ok
1  3816
1  3817
1  3818
1  3819					 ;=============================================================================
1  3820					 ; Resize DOS Memory
1  3821					 ;  In:	 ES = selector,	EBX = new size
1  3822					 ;  Out: -
1  3823					 ;
1  3824	    1DAA  B8 0102		 @__4Ah: mov	 ax,0102h
1  3825	    1DAD  8C C2				 mov	 dx,es
1  3826	    1DAF  CD 31				 int	 31h
1  3827	    1DB1  0F 83	07C6			 jnc	 @__ok
1  3828	    1DB5  66| 0F B7 C0			 movzx	 eax,ax
1  3829	    1DB9  66| 0F B7 DB			 movzx	 ebx,bx
1  3830	    1DBD  66| 67| 89 44	24 1C		 mov	 [esp+1Ch],eax
1  3831	    1DC3  66| 67| 89 5C	24 10		 mov	 [esp+10h],ebx
1  3832	    1DC9  E9 07BB			 jmp	 @__err
1  3833
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 69
dos32a.asm



1  3834
1  3835
1  3836					 ;=============================================================================
1  3837					 ; Execute Program (sub-func AL=00h)
1  3838					 ;  In:	 AL = 00h
1  3839					 ;	 DS:EDX	= path name
1  3840					 ;	 ES:EBX	= parameter block
1  3841					 ;  Out: -
1  3842					 ;
1  3843	    1DCC  84 C0			 @__4Bh: test	 al,al			 ; only	subfunction AL=00h supported
1  3844	    1DCE  0F 85	07B5			 jnz	 @__err
1  3845	    1DD2  66| 2E: 81 3E	3546r +		 cmp	 cs:_lobufsize,0400h	 ; buffer size must be at least	1Kb
   3846		  00000400
**Error** TEXT\CLIENT\int21h.asm(683) Forward reference	needs override
1  3847	    1DD9  0F 82	07AA			 jb	 @__err			 ; if less, return -1
1  3848
1  3849	    1DDD  66| 83 EC 32			 sub	 esp,32h
1  3850	    1DE1  66| 8B EC			 mov	 ebp,esp
1  3851	    1DE4  67| 89 45 1C			 mov	 [ebp+1Ch],ax		 ; put AX in structure
1  3852
1  3853	    1DE8  06				 push	 es
1  3854	    1DE9  2E: 8E 06 3522r		 mov	 es,cs:_sel_ds
1  3855	    1DEE  66| 2E: 8B 3E	3542r		 mov	 edi,cs:_lobufbase
1  3856	    1DF4  66| 8B F2			 mov	 esi,edx
1  3857	    1DF7  66| 81 C7 00000100		 add	 edi,100h
1  3858	    1DFE  67| AC		 @@1:	 lods	 byte ptr ds:[esi]	 ; copy	Path\Name into buffer
1  3859	    1E00  67| AA			 stos	 byte ptr es:[edi]
1  3860	    1E02  84 C0				 test	 al,al
1  3861	    1E04  75 F8				 jnz	 @@1
1  3862	    1E06  07				 pop	 es
1  3863
1  3864	    1E07  1E 06				 push	 ds es
1  3865	    1E09  66| 26: 67| 8B 73 06		 mov	 esi,es:[ebx+06h]
1  3866	    1E0F  66| 2E: 8B 3E	3542r		 mov	 edi,cs:_lobufbase
1  3867	    1E15  26: 67| 8E 5B	0A		 mov	 ds,es:[ebx+0Ah]
1  3868	    1E1A  2E: 8E 06 3522r		 mov	 es,cs:_sel_ds
1  3869	    1E1F  66| 81 C7 00000180		 add	 edi,180h
1  3870	    1E26  66| 67| 0F B6	0E		 movzx	 ecx,byte ptr ds:[esi]
1  3871	    1E2B  41				 inc	 cx
1  3872	    1E2C  41				 inc	 cx
1  3873	    1E2D  F3> 67| A4			 rep	 movs byte ptr es:[edi],[esi]	 ; copy	command	line
1  3874	    1E30  07 1F				 pop	 es ds
1  3875
1  3876	    1E32  1E 06				 push	 ds es
1  3877	    1E34  66| 26: 67| 8B 3B		 mov	 edi,es:[ebx+00h]	 ; get environment
1  3878	    1E39  26: 67| 8B 43	04		 mov	 ax,es:[ebx+04h]
1  3879	    1E3E  85 C0				 test	 ax,ax			 ; check env selector is 0
1  3880	    1E40  74 32	90 90			 jz	 @@3			 ; if yes, jump
1  3881	    1E44  8E C0				 mov	 es,ax
1  3882	    1E46  33 C0				 xor	 ax,ax
1  3883	    1E48  66| 8B F7			 mov	 esi,edi
1  3884	    1E4B  66| 83 C9 FF			 or	 ecx,-1
1  3885	    1E4F  F2> 67| AE		 @@2:	 repne	 scas byte ptr es:[edi]
1  3886	    1E52  66| 49			 dec	 ecx
1  3887	    1E54  67| AE			 scas	 byte ptr es:[edi]
1  3888	    1E56  75 F7				 jnz	 @@2
1  3889	    1E58  66| F7 D1			 not	 ecx
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 70
dos32a.asm



1  3890	    1E5B  B8 0100			 mov	 ax,0100h		 ; allocate mem	for environment
1  3891	    1E5E  8B D9				 mov	 bx,cx
1  3892	    1E60  C1 EB	04			 shr	 bx,4
1  3893	    1E63  43				 inc	 bx
1  3894	    1E64  CD 31				 int	 31h
1  3895	    1E66  72 3D	90 90			 jc	 @@4
1  3896	    1E6A  06				 push	 es
1  3897	    1E6B  1F				 pop	 ds
1  3898	    1E6C  8E C2				 mov	 es,dx
1  3899	    1E6E  66| 33 FF			 xor	 edi,edi
1  3900	    1E71  F3> 67| A4			 rep	 movs byte ptr es:[edi],[esi]	 ; copy	environment
1  3901	    1E74  2E: 8E 1E 3522r	 @@3:	 mov	 ds,cs:_sel_ds
1  3902	    1E79  66| 8B 3E 3542r		 mov	 edi,_lobufbase
1  3903	    1E7E  67| 89 07			 mov	 word ptr [edi+00h],ax
1  3904	    1E81  A1 3516r			 mov	 ax,_seg_buf
1  3905	    1E84  67| C7 47 02 0180		 mov	 word ptr [edi+02h],180h
1  3906	    1E8A  67| 89 47 04			 mov	 word ptr [edi+04h],ax
1  3907	    1E8E  A1 3510r			 mov	 ax,_seg_es
1  3908	    1E91  67| C7 47 06 005C		 mov	 word ptr [edi+06h],5Ch
1  3909	    1E97  67| 89 47 08			 mov	 word ptr [edi+08h],ax
1  3910	    1E9B  67| C7 47 0A 006C		 mov	 word ptr [edi+0Ah],6Ch
1  3911	    1EA1  67| 89 47 0C			 mov	 word ptr [edi+0Ch],ax
1  3912	    1EA5  07 1F			 @@4:	 pop	 es ds
1  3913	    1EA7  72 6C	90 90			 jc	 @@err
1  3914
1  3915	    1EAB  52				 push	 dx			 ; save	env selector
1  3916	    1EAC  2E: 8E 1E 3522r		 mov	 ds,cs:_sel_ds
1  3917	    1EB1  A1 3516r			 mov	 ax,_seg_buf
1  3918	    1EB4  67| 89 45 22			 mov	 word ptr [ebp+22h],ax
1  3919	    1EB8  67| 89 45 24			 mov	 word ptr [ebp+24h],ax
1  3920	    1EBC  67| C7 45 10 0000		 mov	 word ptr [ebp+10h],0000h
1  3921	    1EC2  67| C7 45 14 0100		 mov	 word ptr [ebp+14h],0100h
1  3922
1  3923	    1EC8  80 3E	34F1r 03		 cmp	 _sys_type,3
1  3924	    1ECD  74 0D	90 90			 jz	 @@5
1  3925	    1ED1  0F 20	C0			 mov	 eax,cr0
1  3926	    1ED4  66| 8B F8			 mov	 edi,eax
1  3927	    1ED7  24 FB				 and	 al,0FBh
1  3928	    1ED9  0F 22	C0			 mov	 cr0,eax
1  3929	    1EDC  E8 E87D		 @@5:	 call	 uninstall_client_ints
1  3930	    1EDF  E8 E735			 call	 int21h
1  3931	    1EE2  E8 E80C			 call	 install_client_ints
1  3932	    1EE5  80 3E	34F1r 03		 cmp	 _sys_type,3
1  3933	    1EEA  74 05	90 90			 jz	 @@6
1  3934	    1EEE  0F 22	C7			 mov	 cr0,edi
1  3935
1  3936	    1EF1  5A			 @@6:	 pop	 dx				 ; restore env sel
1  3937	    1EF2  B8 0101			 mov	 ax,0101h
1  3938	    1EF5  CD 31				 int	 31h
1  3939
1  3940	    1EF7  66| 67| 0F B7	45 1C		 movzx	 eax,word ptr [ebp+1Ch]		 ; get return code
1  3941	    1EFD  67| F6 45 20 01		 test	 byte ptr [ebp+20h],01h		 ; check carry flag
1  3942	    1F02  66| 67| 8D 64	24 32		 lea	 esp,[esp+32h]
1  3943	    1F08  66| 67| 89 44	24 1C		 mov	 [esp+1Ch],eax			 ; put return code in AX
1  3944	    1F0E  0F 85	0675			 jnz	 @__err				 ; if error, set carry on ret
1  3945	    1F12  E9 0666			 jmp	 @__ok
1  3946
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 71
dos32a.asm



1  3947	    1F15  66| 83 C4 32		 @@err:	 add	 esp,32h
1  3948	    1F19  66| 67| C7 44	24 1C +		 mov	 dword ptr [esp+1Ch],-1
   3949		  FFFFFFFF
1  3950	    1F23  E9 0661			 jmp	 @__err
1  3951
1  3952
1  3953
1  3954					 ;=============================================================================
1  3955					 ; Terminate Program
1  3956					 ;  In:	 AL = error code
1  3957					 ;  Out: -
1  3958					 ;
1  3959	    1F26  FA			 @__4Ch: cli				 ; disable interrupts
1  3960	    1F27  FC				 cld
1  3961	    1F28  2E: 8E 1E 3522r		 mov	 ds,cs:_sel_ds		 ; restore SEG registers
1  3962	    1F2D  8E 06	3524r			 mov	 es,_sel_es
1  3963	    1F31  66| 0F B2 26 3526r		 lss	 esp,fword ptr _sel_esp	 ; set default stack
1  3964	    1F37  50				 push	 ax
1  3965	    1F38  A1 352Er			 mov	 ax,_sel_env
1  3966	    1F3B  26: A3 002C			 mov	 es:[002Ch],ax		 ; restore default environment
1  3967
1  3968	    1F3F  80 3E	34F1r 03		 cmp	 _sys_type,3		 ; if under DPMI, do not clear DRx
1  3969	    1F44  74 08	90 90			 jz	 @@1
1  3970	    1F48  66| 33 C0			 xor	 eax,eax
1  3971	    1F4B  0F 23	F8			 mov	 dr7,eax
1  3972
1  3973	    1F4E  06			 @@1:	 push	 es			 ; undefine Mouse ISR
1  3974	    1F4F  B8 000C			 mov	 ax,000Ch
1  3975	    1F52  66| 33 D2			 xor	 edx,edx
1  3976	    1F55  8B CA				 mov	 cx,dx
1  3977	    1F57  8E C2				 mov	 es,dx
1  3978	    1F59  CD 33				 int	 33h
1  3979	    1F5B  07				 pop	 es
1  3980
1  3981	    1F5C  8B 16	3500r			 mov	 dx,_mus_backoff	 ; free	mouse callback
1  3982	    1F60  8B 0E	3502r			 mov	 cx,_mus_backseg
1  3983	    1F64  8B C1				 mov	 ax,cx
1  3984	    1F66  0B C2				 or	 ax,dx
1  3985	    1F68  74 07	90 90			 jz	 @@2
1  3986	    1F6C  B8 0304			 mov	 ax,0304h
1  3987	    1F6F  CD 31				 int	 31h
1  3988
1  3989	    1F71  66| 8B 0E 3698r	 @@2:	 mov	 ecx,_app_num_objects	 ; deallocate selectors
**Error** TEXT\CLIENT\int21h.asm(825) Undefined	symbol:	@AREA1_DD
1  3990	    1F76  E3 0F				 jcxz	 @@4
1  3991	    1F78  B8 0001		 @@3:	 mov	 ax,0001h
1  3992	    1F7B  67| 8B 1C 4D	      +		 mov	 bx,_app_buf_allocsel[ecx*2]
   3993		  00000074r
1  3994	    1F83  CD 31				 int	 31h
1  3995	    1F85  E2 F1				 loop	 @@3
1  3996
1  3997	    1F87  E8 E5D0		 @@4:	 call	 check_inttab
1  3998	    1F8A  E8 E587			 call	 restore_inttab
1  3999	    1F8D  E8 E7CC			 call	 uninstall_client_ints
1  4000
1  4001	    1F90  B8 0001		 @@5:	 mov	 ax,0001h			 ; free	ZERO selector
1  4002	    1F93  2E: 8B 1E 352Cr		 mov	 bx,cs:_sel_zero
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 72
dos32a.asm



1  4003	    1F98  CD 31				 int	 31h
1  4004
1  4005	    1F9A  33 C0				 xor	 ax,ax
1  4006	    1F9C  8E E0				 mov	 fs,ax
1  4007	    1F9E  8E E8				 mov	 gs,ax
1  4008	    1FA0  58				 pop	 ax
1  4009	    1FA1  66				 db	 66h				 ; 32-bit jump
1  4010	    1FA2  2E: FF 2E 3562r		 jmp	 cs:_int21_ip			 ; exit	with errorcode in AL
1  4011
1  4012
1  4013
1  4014					 ;=============================================================================
1  4015					 ; Find	First File
1  4016					 ;  In:	 CX = file attributes
1  4017					 ;	 DS:EDX	= file name
1  4018					 ;  Out: -
1  4019					 ;
1  4020	    1FA7  E8 053A		 @__4Eh: call	 @__std
1  4021	    1FAA  75 24	90 90			 jnz	 @@err
1  4022	    1FAE  2E: 8E 1E 354Er		 mov	 ds,cs:_dta_sel
1  4023	    1FB3  66| 2E: 8B 36	3550r		 mov	 esi,cs:_dta_off
1  4024	    1FB9  2E: 8E 06 3554r		 mov	 es,cs:_app_dta_sel
1  4025	    1FBE  66| 2E: 8B 3E	3556r		 mov	 edi,cs:_app_dta_off
1  4026	    1FC4  66| B9 0000002B		 mov	 ecx,2Bh
1  4027	    1FCA  F3> 67| A4			 rep	 movs byte ptr es:[edi],[esi]
1  4028	    1FCD  E9 05AB			 jmp	 @__ok
1  4029	    1FD0  66| 67| 89 44	24 1C	 @@err:	 mov	 [esp+1Ch],eax
1  4030	    1FD6  E9 05AE			 jmp	 @__err
1  4031
1  4032
1  4033
1  4034					 ;=============================================================================
1  4035					 ; Find	Next File
1  4036					 ;  In:	 -
1  4037					 ;  Out: -
1  4038					 ;
1  4039	    1FD9  2E: 8E 1E 3554r	 @__4Fh: mov	 ds,cs:_app_dta_sel
1  4040	    1FDE  66| 2E: 8B 36	3556r		 mov	 esi,cs:_app_dta_off
1  4041	    1FE4  2E: 8E 06 354Er		 mov	 es,cs:_dta_sel
1  4042	    1FE9  66| 2E: 8B 3E	3550r		 mov	 edi,cs:_dta_off
1  4043	    1FEF  66| B9 0000002B		 mov	 ecx,2Bh
1  4044	    1FF5  F3> 67| A4			 rep	 movs byte ptr es:[edi],[esi]
1  4045	    1FF8  E8 051B			 call	 @__all
1  4046	    1FFB  75 24	90 90			 jnz	 @@err
1  4047	    1FFF  2E: 8E 1E 354Er		 mov	 ds,cs:_dta_sel
1  4048	    2004  66| 2E: 8B 36	3550r		 mov	 esi,cs:_dta_off
1  4049	    200A  2E: 8E 06 3554r		 mov	 es,cs:_app_dta_sel
1  4050	    200F  66| 2E: 8B 3E	3556r		 mov	 edi,cs:_app_dta_off
1  4051	    2015  66| B9 0000002B		 mov	 ecx,2Bh
1  4052	    201B  F3> 67| A4			 rep	 movs byte ptr es:[edi],[esi]
1  4053	    201E  E9 055A			 jmp	 @__ok
1  4054	    2021  66| 67| 89 44	24 1C	 @@err:	 mov	 [esp+1Ch],eax
1  4055	    2027  E9 055D			 jmp	 @__err
1  4056
1  4057
1  4058
1  4059					 ;=============================================================================
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 73
dos32a.asm



1  4060					 ; Get PSP Segment
1  4061					 ;  In:	 -
1  4062					 ;  Out: EBX = PSP segment
1  4063					 ;
1  4064	    202A  66| 2E: 0F B7	06    +	 @__51h: movzx	 eax,cs:_seg_es
   4065		  3510r
1  4066	    2031  66| 67| 89 44	24 10		 mov	 [esp+10h],eax
1  4067	    2037  E9 0541			 jmp	 @__ok
1  4068
1  4069
1  4070
1  4071					 ;=============================================================================
1  4072					 ; Rename File
1  4073					 ;  In:	 DS:EDX	= old filename
1  4074					 ;	 ES:EDI	= new filename
1  4075					 ;  Out: -
1  4076					 ;
1  4077	    203A  66| 83 EC 32		 @__56h: sub	 esp,32h
1  4078	    203E  66| 8B EC			 mov	 ebp,esp
1  4079	    2041  67| 89 45 1C			 mov	 [ebp+1Ch],ax
1  4080	    2045  66| 83 C9 FF			 or	 ecx,-1
1  4081	    2049  32 C0				 xor	 al,al
1  4082	    204B  F2> 67| AE			 repne	 scas byte ptr es:[edi]
1  4083	    204E  66| F7 D1			 not	 ecx
1  4084	    2051  66| 2B F9			 sub	 edi,ecx
1  4085	    2054  66| 8B F7			 mov	 esi,edi
1  4086	    2057  1E				 push	 ds
1  4087	    2058  06				 push	 es
1  4088	    2059  1F				 pop	 ds
1  4089	    205A  2E: 8E 06 3522r		 mov	 es,cs:_sel_ds
1  4090	    205F  66| 2E: 8B 3E	3542r		 mov	 edi,cs:_lobufbase
1  4091	    2065  F3> 67| A4			 rep	 movs byte ptr es:[edi],[esi]
1  4092	    2068  1F				 pop	 ds
1  4093	    2069  66| 8B CF			 mov	 ecx,edi
1  4094	    206C  66| 2E: 8B 1E	3542r		 mov	 ebx,cs:_lobufbase
1  4095	    2072  66| 2B CB			 sub	 ecx,ebx
1  4096	    2075  66| 87 CB			 xchg	 ecx,ebx
1  4097	    2078  1E				 push	 ds
1  4098	    2079  07				 pop	 es
1  4099	    207A  66| 8B F2			 mov	 esi,edx
1  4100	    207D  66| 87 F7			 xchg	 esi,edi
1  4101	    2080  66| 83 C9 FF			 or	 ecx,-1
1  4102	    2084  32 C0				 xor	 al,al
1  4103	    2086  F2> 67| AE			 repne	 scas byte ptr es:[edi]
1  4104	    2089  66| F7 D1			 not	 ecx
1  4105	    208C  66| 2B F9			 sub	 edi,ecx
1  4106	    208F  66| 87 F7			 xchg	 esi,edi
1  4107	    2092  2E: 8E 06 3522r		 mov	 es,cs:_sel_ds
1  4108	    2097  F3> 67| A4			 rep	 movs byte ptr es:[edi],[esi]
1  4109	    209A  2E: A1 3516r			 mov	 ax,cs:_seg_buf
1  4110	    209E  67| 89 45 24			 mov	 [ebp+24h],ax
1  4111	    20A2  67| 89 45 22			 mov	 [ebp+22h],ax
1  4112	    20A6  67| C7 45 00 0000		 mov	 word ptr [ebp+00h],0
1  4113	    20AC  67| 89 5D 14			 mov	 [ebp+14h],bx
1  4114	    20B0  E8 E564			 call	 int21h
1  4115	    20B3  E9 04AA			 jmp	 @__tst
1  4116
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 74
dos32a.asm



1  4117
1  4118
1  4119					 ;=============================================================================
1  4120					 ; Create Temp File
1  4121					 ;  In:	 DS:EDX	= file name
1  4122					 ;  Out: -
1  4123					 ;
1  4124					 ;@__5Ah:	 jmp	 @__39h
1  4125
1  4126
1  4127
1  4128					 ;=============================================================================
1  4129					 ; Create New File
1  4130					 ;  In:	 CX = attributes
1  4131					 ;	 DS:EDX	= file name
1  4132					 ;  Out: -
1  4133					 ;
1  4134					 ;@__5Bh:	 jmp	 @__39h
1  4135
1  4136
1  4137
1  4138					 ;=============================================================================
1  4139					 ; Get PSP Selector
1  4140					 ;  In:	 -
1  4141					 ;  Out: BX = PSP selector
1  4142					 ;
1  4143	    20B6  66| 2E: 0F B7	06    +	 @__62h: movzx	 eax,cs:_sel_es
   4144		  3524r
1  4145	    20BD  66| 67| 89 44	24 10		 mov	 [esp+10h],eax
1  4146	    20C3  E9 04B5			 jmp	 @__ok
1  4147
1  4148
1  4149
1  4150					 ;=============================================================================
1  4151					 ; Win95 Get Short (8.3) filename
1  4152					 ;  In:	 CL = 00/01/02h
1  4153					 ;	 CH = SUBST expansion flag
1  4154					 ;	 DS:ESI	= ASCIIZ long filename or path
1  4155					 ;	 ES:EDI	= 261/128/261-byte buffer for short name
1  4156					 ; Out:	 -
1  4157					 ;
1  4158	    20C6  66| 83 EC 32		 @_7160: sub	 esp,32h
1  4159	    20CA  66| 8B EC			 mov	 ebp,esp
1  4160	    20CD  06 66| 57			 push	 es edi
1  4161	    20D0  67| 89 45 1C			 mov	 [ebp+1Ch],ax
1  4162	    20D4  67| 89 4D 18			 mov	 [ebp+18h],cx
1  4163	    20D8  2E: 8E 06 3522r		 mov	 es,cs:_sel_ds
1  4164	    20DD  66| 2E: 8B 3E	3542r		 mov	 edi,cs:_lobufbase
1  4165	    20E3  66| 81 C7 00000200		 add	 edi,0200h
1  4166	    20EA  67| AC		 @@1:	 lods	 byte ptr ds:[esi]
1  4167	    20EC  67| AA			 stos	 byte ptr es:[edi]
1  4168	    20EE  84 C0				 test	 al,al
1  4169	    20F0  75 F8				 jnz	 @@1
1  4170	    20F2  2E: A1 3516r			 mov	 ax,cs:_seg_buf
1  4171	    20F6  67| 89 45 24			 mov	 word ptr [ebp+24h],ax
1  4172	    20FA  67| 89 45 22			 mov	 word ptr [ebp+22h],ax
1  4173	    20FE  67| C7 45 04 0200		 mov	 word ptr [ebp+04h],0200h
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 75
dos32a.asm



1  4174	    2104  67| C7 45 00 0000		 mov	 word ptr [ebp+00h],0000h
1  4175	    210A  E8 E50A			 call	 int21h
1  4176	    210D  06				 push	 es
1  4177	    210E  1F				 pop	 ds
1  4178	    210F  66| 2E: 8B 36	3542r		 mov	 esi,cs:_lobufbase
1  4179	    2115  66| 5F 07			 pop	 edi es
1  4180	    2118  67| F6 45 20 01		 test	 byte ptr [ebp+20h],1
1  4181	    211D  75 11	90 90			 jnz	 @@err
1  4182	    2121  67| AC		 @@2:	 lods	 byte ptr ds:[esi]
1  4183	    2123  67| AA			 stos	 byte ptr es:[edi]
1  4184	    2125  84 C0				 test	 al,al
1  4185	    2127  75 F8				 jnz	 @@2
1  4186	    2129  66| 83 C4 32			 add	 esp,32h
1  4187	    212D  E9 044B			 jmp	 @__ok
1  4188	    2130  66| 67| 0F B7	45 1C	 @@err:	 movzx	 eax,word ptr [ebp+1Ch]
1  4189	    2136  66| 83 C4 32			 add	 esp,32h
1  4190	    213A  66| 67| 89 44	24 1C		 mov	 [esp+1Ch],eax
1  4191	    2140  E9 0444			 jmp	 @__err
1  4192
1  4193
1  4194
1  4195					 ;=============================================================================
1  4196					 ; Win95 Create	or Open	File
1  4197					 ;  In:	 BX = access mode
1  4198					 ;	 CX = attributes
1  4199					 ;	 DX = action
1  4200					 ;	 DI = alias hint
1  4201					 ;	 DS:ESI	= ASCIIZ long filename
1  4202					 ; Out:	 AX = file handle
1  4203					 ;	 CX = action taken
1  4204					 ;
1  4205	    2143  66| 83 EC 32		 @_716C: sub	 esp,32h
1  4206	    2147  66| 8B EC			 mov	 ebp,esp
1  4207	    214A  67| 89 7D 00			 mov	 [ebp+00h],di
1  4208	    214E  67| 89 5D 10			 mov	 [ebp+10h],bx
1  4209	    2152  67| 89 55 14			 mov	 [ebp+14h],dx
1  4210	    2156  67| 89 4D 18			 mov	 [ebp+18h],cx
1  4211	    215A  67| 89 45 1C			 mov	 [ebp+1Ch],ax
1  4212	    215E  2E: A1 3516r			 mov	 ax,cs:_seg_buf
1  4213	    2162  67| 89 45 24			 mov	 word ptr [ebp+24h],ax
1  4214	    2166  67| C7 45 04 0000		 mov	 word ptr [ebp+04h],0
1  4215	    216C  2E: 8E 06 3522r		 mov	 es,cs:_sel_ds
1  4216	    2171  66| 2E: 8B 3E	3542r		 mov	 edi,cs:_lobufbase
1  4217	    2177  67| AC		 @@0:	 lods	 byte ptr ds:[esi]
1  4218	    2179  67| AA			 stos	 byte ptr es:[edi]
1  4219	    217B  84 C0				 test	 al,al
1  4220	    217D  75 F8				 jnz	 @@0
1  4221	    217F  E8 E495			 call	 int21h
1  4222	    2182  66| 67| 0F B7	45 1C		 movzx	 eax,word ptr [ebp+1Ch]
1  4223	    2188  66| 67| 0F B7	4D 18		 movzx	 ecx,word ptr [ebp+18h]
1  4224	    218E  67| F6 45 20 01		 test	 byte ptr [ebp+20h],1
1  4225	    2193  66| 67| 8D 64	24 32		 lea	 esp,[esp+32h]
1  4226	    2199  66| 67| 89 44	24 1C		 mov	 [esp+1Ch],eax
1  4227	    219F  0F 85	03E4			 jnz	 @__err
1  4228	    21A3  66| 67| 89 4C	24 18		 mov	 [esp+18h],ecx
1  4229	    21A9  E9 03CF			 jmp	 @__ok
1  4230
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 76
dos32a.asm



1  4231
1  4232
1  4233
1  4234
1  4235					 ;=============================================================================
1  4236					 ; DOS/4G Identification call
1  4237					 ;  In:	 AX = 0FF00h, DX = 0078h
1  4238					 ;  Out: EAX = 0FFFF3447h '..4G'
1  4239					 ;
1  4240	    21AC  3C 88			 @__FFh: cmp	 al,88h			 ; AX=0FF88h - DOS/32A functional call
1  4241	    21AE  0F 84	007F			 jz	 @_FF88
1  4242	    21B2  3C 89				 cmp	 al,89h			 ; AX=0FF89h - DOS/32A get config
1  4243	    21B4  0F 84	00B5			 jz	 @_FF89
1  4244	    21B8  3C 8A				 cmp	 al,8Ah			 ; AX=0FF8Ah - DOS/32A get info
1  4245	    21BA  0F 84	00E0			 jz	 @_FF8A
1  4246	    21BE  3C 8D				 cmp	 al,8Dh			 ; AX=0FF8Dh - DOS/32A decompress data
1  4247	    21C0  0F 84	0113			 jz	 @_FF8D
1  4248	    21C4  3C 8E				 cmp	 al,8Eh			 ; AX=0FF8Eh - DOS/32A get Client ptrs
1  4249	    21C6  0F 84	012C			 jz	 @_FF8E
1  4250	    21CA  3C 8F				 cmp	 al,8Fh			 ; AX=0FF8Fh - DOS/32A resize DOS buf
1  4251	    21CC  0F 84	0144			 jz	 @_FF8F
1  4252
1  4253	    21D0  3C 80				 cmp	 al,80h			 ; AX=0FF80h - DOS/32A prints (magic)
1  4254	    21D2  0F 84	0151			 jz	 @_FF80
1  4255	    21D6  3C 90				 cmp	 al,90h			 ; AX=0FF90h - DOS/32A get hi mem
1  4256	    21D8  0F 84	0183			 jz	 @_FF90
1  4257	    21DC  3C 91				 cmp	 al,91h			 ; AX=0FF91h - DOS/32A alloc hi	mem
1  4258	    21DE  0F 84	019D			 jz	 @_FF91
1  4259	    21E2  3C 92				 cmp	 al,92h			 ; AX=0FF92h - DOS/32A free hi mem
1  4260	    21E4  0F 84	01A2			 jz	 @_FF92
1  4261	    21E8  3C 93				 cmp	 al,93h			 ; AX=0FF93h - DOS/32A resize hi mem
1  4262	    21EA  0F 84	01AB			 jz	 @_FF93
1  4263
1  4264	    21EE  3C 94				 cmp	 al,94h			 ; AX=0FF94h - DOS/32A get lo mem
1  4265	    21F0  0F 84	01B0			 jz	 @_FF94
1  4266	    21F4  3C 95				 cmp	 al,95h			 ; AX=0FF95h - DOS/32A alloc lo	mem
1  4267	    21F6  0F 84	01BF			 jz	 @_FF95
1  4268	    21FA  3C 96				 cmp	 al,96h			 ; AX=0FF96h - DOS/32A free lo mem
1  4269	    21FC  0F 84	01EE			 jz	 @_FF96
1  4270	    2200  3C 97				 cmp	 al,97h			 ; AX=0FF97h - DOS/32A resize lo mem
1  4271	    2202  0F 84	020D			 jz	 @_FF97
1  4272
1  4273	    2206  3C 98				 cmp	 al,98h			 ; AX=0FF98h - DOS/32A map phys	mem
1  4274	    2208  0F 84	0249			 jz	 @_FF98
1  4275	    220C  3C 99				 cmp	 al,99h			 ; AX=0FF99h - DOS/32A free phys mem
1  4276	    220E  0F 84	0252			 jz	 @_FF99
1  4277	    2212  3C 9A				 cmp	 al,9Ah			 ; AX=0FF9Ah - DOS/32A alloc selector
1  4278	    2214  0F 84	025B			 jz	 @_FF9A
1  4279
1  4280	    2218  83 FA	78			 cmp	 dx,0078h		 ; DX=0078h - DOS/4G functional	call
1  4281	    221B  0F 85	F772			 jnz	 @__go21
1  4282	    221F  2E: 8E 2E 3522r		 mov	 gs,cs:_sel_ds
1  4283	    2224  66| 67| C7 44	24 1C +		 mov	 dword ptr [esp+1Ch],4734FFFFh
   4284		  4734FFFF
1  4285	    222E  E9 034A			 jmp	 @__ok
1  4286
1  4287
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 77
dos32a.asm



1  4288					 ;=============================================================================
1  4289					 ; DOS/32A Identification call
1  4290					 ;  In:	 AX = 0FF88h
1  4291					 ;  Out: EAX = 'ID32'
1  4292					 ;	 EBX = DOS Extender version
1  4293					 ;
1  4294	    2231  66| 83 EC 32		 @_FF88: sub	 esp,32h		 ; DOS/32A internal function
1  4295	    2235  66| 8B EC			 mov	 ebp,esp
1  4296	    2238  67| 89 45 1C			 mov	 [ebp+1Ch],ax
1  4297	    223C  E8 E3D8			 call	 int21h
1  4298	    223F  66| B8 49443332		 mov	 eax,'ID32'
1  4299	    2245  66| 2E: 0F B7	1E    +		 movzx	 ebx,cs:_version
   4300		  34EEr
1  4301	    224C  66| 67| 8B 4D	18		 mov	 ecx,[ebp+18h]
1  4302	    2251  66| 67| 8B 55	14		 mov	 edx,[ebp+14h]
1  4303	    2256  66| 67| 8B 75	04		 mov	 esi,[ebp+04h]
1  4304	    225B  66| 67| 8B 7D	00		 mov	 edi,[ebp+00h]
1  4305	    2260  66| 67| 8B 6C	24 3A		 mov	 ebp,[esp+3Ah]
1  4306	    2266  66| 83 C4 52			 add	 esp,52h
1  4307	    226A  E9 0310			 jmp	 @__exi
1  4308
1  4309					 ;=============================================================================
1  4310					 ; DOS/32A Get Client Configuration
1  4311					 ;  In:	 AX = 0FF89h
1  4312					 ;  Out: EAX = 'ID32'
1  4313					 ;	 EBX = DOS Extender version
1  4314					 ;	 ECX = size of low buffer
1  4315					 ;	 EDX = configuration bits
1  4316					 ;	 ESI = pointer to ID32 config header
1  4317					 ;	 FS = zero selector
1  4318					 ;
1  4319	    226D  66| B8 49443332	 @_FF89: mov	 eax,'ID32'
1  4320	    2273  66| 2E: 0F B7	36    +		 movzx	 esi,cs:_seg_id32
   4321		  351Cr
1  4322	    227A  66| C1 E6 04			 shl	 esi,4
1  4323	    227E  2E: 8E 26 352Cr		 mov	 fs,cs:_sel_zero
1  4324	    2283  66| 2E: 0F B7	1E    +		 movzx	 ebx,cs:_version
   4325		  34EEr
1  4326	    228A  66| 2E: 8B 0E	3546r		 mov	 ecx,cs:_lobufsize
1  4327	    2290  66| 2E: 0F B7	16    +		 movzx	 edx,word ptr cs:_misc_byte
   4328		  34ECr
1  4329	    2297  66| 83 C4 20			 add	 esp,20h
1  4330	    229B  E9 02DF			 jmp	 @__exi
1  4331
1  4332					 ;=============================================================================
1  4333					 ; DOS/32A Get Kernel Configuration
1  4334					 ;  In:	 AX = 0FF8Ah
1  4335					 ;  Out: EAX = 'ID32'
1  4336					 ;	 EBX = DOS Extender version
1  4337					 ;	 CL = CPU type
1  4338					 ;	 CH = System software
1  4339					 ;	 DL = Kernel configuration bits
1  4340					 ;	 ESI = pointer to Kernel config	header
1  4341					 ;	 FS = zero selector
1  4342					 ;
1  4343	    229E  66| B8 49443332	 @_FF8A: mov	 eax,'ID32'
1  4344	    22A4  66| 2E: 0F B7	36    +		 movzx	 esi,cs:_seg_kernel
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 78
dos32a.asm



   4345		  351Er
1  4346	    22AB  66| C1 E6 04			 shl	 esi,4
1  4347	    22AF  66| 81 C6 00000000e		 add	 esi,offs pm32_data
1  4348	    22B6  2E: 8E 26 352Cr		 mov	 fs,cs:_sel_zero
1  4349	    22BB  66| 2E: 0F B7	1E    +		 movzx	 ebx,cs:_version
   4350		  34EEr
1  4351	    22C2  2E: 8A 0E 34F0r		 mov	 cl,cs:_cpu_type
1  4352	    22C7  2E: 8A 2E 34F1r		 mov	 ch,cs:_sys_type
1  4353	    22CC  64: 67| 8A 16			 mov	 dl,fs:[esi+00h]
1  4354	    22D0  66| 83 C4 20			 add	 esp,20h
1  4355	    22D4  E9 02A6			 jmp	 @__exi
1  4356
1  4357					 ;=============================================================================
1  4358					 ; DOS/32A Decompress data
1  4359					 ;  In:	 AX = 0FF8Dh
1  4360					 ;	 DS:EBX	= source address
1  4361					 ;	 DS:EDI	= destination address
1  4362					 ;	 ECX = source size
1  4363					 ;  Out: EAX = destination size
1  4364					 ;
1  4365	    22D7  0F A8	1E		 @_FF8D: push	 gs ds
1  4366	    22DA  0F A9				 pop	 gs
1  4367	    22DC  2E: 8E 1E 3522r		 mov	 ds,cs:_sel_ds
1  4368	    22E1  E8 0D63			 call	 decompress
1  4369	    22E4  66| A1 3694r			 mov	 eax,_codesize
**Error** TEXT\CLIENT\int21h.asm(1195) Undefined symbol: @AREA1_DD
1  4370	    22E8  66| 2B C7			 sub	 eax,edi
1  4371	    22EB  0F A9				 pop	 gs
1  4372	    22ED  66| 67| 89 44	24 1C		 mov	 [esp+1Ch],eax
1  4373	    22F3  E9 0285			 jmp	 @__ok
1  4374
1  4375					 ;=============================================================================
1  4376					 ; DOS/32A Return pointers to Client variables
1  4377					 ;  In:	 AX = 0FF8Eh
1  4378					 ;  Out: GS = Client data selector
1  4379					 ;	 EDX = pointer to "start" == module file name
1  4380					 ;	 ESI = pointer to loaded application sel/base table
1  4381					 ;	 EDI = pointer to Client variables structure
1  4382					 ;
1  4383	    22F6  2E: 8E 2E 3522r	 @_FF8E: mov	 gs,cs:_sel_ds
1  4384	    22FB  66| BA 00003104r		 mov	 edx,offset start
1  4385	    2301  66| BE 00000074r		 mov	 esi,offset _app_buf_allocsel
1  4386	    2307  66| BF 000034ECr		 mov	 edi,offset _misc_byte
1  4387	    230D  66| 83 C4 20			 add	 esp,20h
1  4388	    2311  E9 0269			 jmp	 @__exi
1  4389
1  4390					 ;=============================================================================
1  4391					 ; DOS/32A Resize DOS transfer buffer
1  4392					 ;  In:	 AX = 0FF8Fh
1  4393					 ;	 EBX = new size	of DOS transfer	buffer in bytes
1  4394					 ;  Out: EBX = old size	of DOS transfer	buffer in bytes
1  4395					 ;
1  4396	    2314  2E: 8E 1E 3522r	 @_FF8F: mov	 ds,cs:_sel_ds
1  4397	    2319  66| 87 1E 3546r		 xchg	 _lobufsize,ebx
1  4398	    231E  66| 67| 89 5C	24 10		 mov	 [esp+10h],ebx
1  4399	    2324  E9 0254			 jmp	 @__ok
1  4400
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 79
dos32a.asm



1  4401
1  4402					 ;=============================================================================
1  4403					 ; DOS/32A Print String	(Magic)
1  4404					 ;  In:	 AX = 0FF80h
1  4405					 ;	 EBX = value
1  4406					 ;	 DS:EDX	= pointer to string
1  4407					 ;  Out: -
1  4408					 ;
1  4409	    2327  2E: 8E 06 3522r	 @_FF80: mov	 es,cs:_sel_ds
1  4410	    232C  66| 2E: 8B 3E	3542r		 mov	 edi,cs:_lobufbase
1  4411	    2332  66| 8B F2			 mov	 esi,edx
1  4412	    2335  8B D7				 mov	 dx,di
1  4413	    2337  67| AC		 @@1:	 lods	 byte ptr ds:[esi]
1  4414	    2339  AA				 stosb
1  4415	    233A  84 C0				 test	 al,al
1  4416	    233C  75 F9				 jnz	 @@1
1  4417	    233E  06				 push	 es
1  4418	    233F  1F				 pop	 ds
1  4419	    2340  8C 16	36E4r			 mov	 _int_ss,ss
**Error** TEXT\CLIENT\int21h.asm(1245) Undefined symbol: @AREA1_DD
1  4420	    2344  66| 89 26 36E0r		 mov	 _int_esp,esp
**Error** TEXT\CLIENT\int21h.asm(1246) Undefined symbol: @AREA1_DD
1  4421	    2349  66| 0F B2 26 3526r		 lss	 esp,fword ptr _sel_esp
1  4422	    234F  66| 51			 push	 ecx
1  4423	    2351  66| 53			 push	 ebx
1  4424	    2353  E8 DFF2			 call	 prints
1  4425	    2356  66| 0F B2 26 36E0r		 lss	 esp,fword ptr _int_esp
**Error** TEXT\CLIENT\int21h.asm(1251) Undefined symbol: @AREA1_DD
1  4426	    235C  E9 021C			 jmp	 @__ok
1  4427
1  4428
1  4429					 ;=============================================================================
1  4430					 ; DOS/32A Get Free Extended Memory Information
1  4431					 ;  In:	 AX = 0FF90h
1  4432					 ;  Out: EAX = largest free memory block
1  4433					 ;
1  4434	    235F  16			 @_FF90: push	 ss
1  4435	    2360  07				 pop	 es
1  4436	    2361  66| 83 EC 30			 sub	 esp,30h
1  4437	    2365  66| 8B FC			 mov	 edi,esp
1  4438	    2368  B8 0500			 mov	 ax,0500h
1  4439	    236B  CD 31				 int	 31h
1  4440	    236D  66| 67| 8B 04	24		 mov	 eax,[esp]
1  4441	    2372  66| 83 C4 30			 add	 esp,30h
1  4442	    2376  66| 67| 89 44	24 1C		 mov	 [esp+1Ch],eax
1  4443	    237C  E9 01FC			 jmp	 @__ok
1  4444
1  4445					 ;=============================================================================
1  4446					 ; DOS/32A Allocate Extended Memory
1  4447					 ;  In:	 AX = 0FF91h
1  4448					 ;	 EBX = size of block
1  4449					 ;  Out: EBX = linear address of block
1  4450					 ;	 ESI = handle of block
1  4451					 ;
1  4452	    237F  E8 0103		 @_FF91: call	 @_FF9x1
1  4453	    2382  B8 0501			 mov	 ax,0501h
1  4454	    2385  CD 31				 int	 31h
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 80
dos32a.asm



1  4455	    2387  E9 0108			 jmp	 @_FF9x2
1  4456
1  4457					 ;=============================================================================
1  4458					 ; DOS/32A Free	Extended Memory
1  4459					 ;  In:	 AX = 0FF92h
1  4460					 ;	 ESI = handle of block
1  4461					 ;  Out: -
1  4462					 ;
1  4463	    238A  E8 00F8		 @_FF92: call	 @_FF9x1
1  4464	    238D  B8 0502			 mov	 ax,0502h
1  4465	    2390  CD 31				 int	 31h
1  4466	    2392  0F 82	01F1			 jc	 @__err
1  4467	    2396  E9 01E2			 jmp	 @__ok
1  4468
1  4469					 ;=============================================================================
1  4470					 ; DOS/32A Resize Extended Memory
1  4471					 ;  In:	 AX = 0FF93h
1  4472					 ;	 EBX = new size	of block
1  4473					 ;	 ESI = handle of block
1  4474					 ;  Out: EBX = new linear address of block
1  4475					 ;	 ESI = new handle of block
1  4476					 ;
1  4477	    2399  E8 00E9		 @_FF93: call	 @_FF9x1
1  4478	    239C  B8 0503			 mov	 ax,0503h
1  4479	    239F  CD 31				 int	 31h
1  4480	    23A1  E9 00EE			 jmp	 @_FF9x2
1  4481
1  4482					 ;=============================================================================
1  4483					 ; DOS/32A Get Free DOS	Memory Information
1  4484					 ;  In:	 AX = 0FF94h
1  4485					 ;  Out: EAX = largest free memory block
1  4486					 ;
1  4487	    23A4  B4 48			 @_FF94: mov	 ah,48h
1  4488	    23A6  BB FFFF			 mov	 bx,-1
1  4489	    23A9  E8 016A			 call	 @__all
1  4490	    23AC  66| C1 E3 04			 shl	 ebx,4
1  4491	    23B0  66| 67| 89 5C	24 1C		 mov	 [esp+1Ch],ebx
1  4492	    23B6  E9 01C2			 jmp	 @__ok
1  4493
1  4494					 ;=============================================================================
1  4495					 ; DOS/32A Allocate DOS	Memory
1  4496					 ;  In:	 AX = 0FF94h
1  4497					 ;	 EBX = size of block
1  4498					 ;  Out: EBX = linear address of block
1  4499					 ;	 ESI = handle of block
1  4500					 ;
1  4501	    23B9  66| 83 C3 0F		 @_FF95: add	 ebx,0Fh
1  4502	    23BD  66| C1 EB 04			 shr	 ebx,4
1  4503	    23C1  66| F7 C3 FFFF0000		 test	 ebx,0FFFF0000h
1  4504	    23C8  0F 85	01BB			 jnz	 @__err
1  4505	    23CC  85 DB				 test	 bx,bx
1  4506	    23CE  0F 84	01B5			 jz	 @__err
1  4507	    23D2  B4 48				 mov	 ah,48h
1  4508	    23D4  E8 013F			 call	 @__all
1  4509	    23D7  0F 85	01AC			 jnz	 @__err
1  4510	    23DB  66| 67| 89 44	24 04		 mov	 [esp+04h],eax
1  4511	    23E1  66| C1 E0 04			 shl	 eax,4
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 81
dos32a.asm



1  4512	    23E5  66| 67| 89 44	24 10		 mov	 [esp+10h],eax
1  4513	    23EB  E9 018D			 jmp	 @__ok
1  4514
1  4515					 ;=============================================================================
1  4516					 ; DOS/32A Free	DOS Memory
1  4517					 ;  In:	 AX = 0FF96h
1  4518					 ;	 ESI = handle of block
1  4519					 ;  Out: -
1  4520					 ;
1  4521	    23EE  66| 83 EC 32		 @_FF96: sub	 esp,32h
1  4522	    23F2  66| 8B EC			 mov	 ebp,esp
1  4523	    23F5  67| C6 45 1D 49		 mov	 byte ptr [ebp+1Dh],49h
1  4524	    23FA  67| 89 75 22			 mov	 word ptr [ebp+22h],si
1  4525	    23FE  E8 E216			 call	 int21h
1  4526	    2401  67| F6 45 20 01		 test	 byte ptr [ebp+20h],1
1  4527	    2406  66| 67| 8D 64	24 32		 lea	 esp,[esp+32h]
1  4528	    240C  0F 85	0177			 jnz	 @__err
1  4529	    2410  E9 0168			 jmp	 @__ok
1  4530
1  4531					 ;=============================================================================
1  4532					 ; DOS/32A Resize DOS Memory
1  4533					 ;  In:	 AX = 0FF97h
1  4534					 ;	 EBX = new size	of block
1  4535					 ;	 ESI = handle of block
1  4536					 ;  Out: EBX = new linear address of block
1  4537					 ;	 ESI = new handle of block
1  4538					 ;
1  4539	    2413  66| 83 C3 0F		 @_FF97: add	 ebx,0Fh
1  4540	    2417  66| C1 EB 04			 shr	 ebx,4
1  4541	    241B  66| F7 C3 FFFF0000		 test	 ebx,0FFFF0000h
1  4542	    2422  0F 85	0161			 jnz	 @__err
1  4543	    2426  85 DB				 test	 bx,bx
1  4544	    2428  0F 84	015B			 jz	 @__err
1  4545	    242C  66| 83 EC 32			 sub	 esp,32h
1  4546	    2430  66| 8B EC			 mov	 ebp,esp
1  4547	    2433  67| C6 45 1D 4A		 mov	 byte ptr [ebp+1Dh],4Ah
1  4548	    2438  67| 89 5D 10			 mov	 word ptr [ebp+10h],bx
1  4549	    243C  67| 89 75 22			 mov	 word ptr [ebp+22h],si
1  4550	    2440  E8 E1D4			 call	 int21h
1  4551	    2443  67| F6 45 20 01		 test	 byte ptr [ebp+20h],1
1  4552	    2448  66| 67| 8D 64	24 32		 lea	 esp,[esp+32h]
1  4553	    244E  0F 85	0135			 jnz	 @__err
1  4554	    2452  E9 0126			 jmp	 @__ok
1  4555
1  4556					 ;=============================================================================
1  4557					 ; DOS/32A Map Physical	Memory
1  4558					 ;  In:	 AX = 0FF98h
1  4559					 ;	 EBX = base of physical	memory
1  4560					 ;	 ESI = size of region
1  4561					 ;  Out: EBX = linear address of memory
1  4562					 ;
1  4563	    2455  E8 002D		 @_FF98: call	 @_FF9x1
1  4564	    2458  B8 0800			 mov	 ax,0800h
1  4565	    245B  CD 31				 int	 31h
1  4566	    245D  0F 82	0126			 jc	 @__err
1  4567	    2461  EB 3F	90			 jmp	 @_FF9x3
1  4568
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 82
dos32a.asm



1  4569					 ;=============================================================================
1  4570					 ; DOS/32A Unmap Physical Memory
1  4571					 ;  In:	 AX = 0FF99h
1  4572					 ;	 EBX = linear address of memory
1  4573					 ;  Out: -
1  4574					 ;
1  4575	    2464  E8 001E		 @_FF99: call	 @_FF9x1
1  4576	    2467  B8 0801			 mov	 ax,0801h
1  4577	    246A  CD 31				 int	 31h
1  4578	    246C  0F 82	0117			 jc	 @__err
1  4579	    2470  E9 0108			 jmp	 @__ok
1  4580
1  4581					 ;=============================================================================
1  4582					 ; DOS/32A Allocate Selector
1  4583					 ;  In:	 AX = 0FF94h
1  4584					 ;	 EBX = selector	base
1  4585					 ;	 ECX = selector	limit
1  4586					 ;	 DX = selector access rights
1  4587					 ;  Out: AX = selector
1  4588					 ;
1  4589	    2473  66| 8B FB		 @_FF9A: mov	 edi,ebx
1  4590	    2476  E8 E133			 call	 set_descriptor
1  4591	    2479  0F 82	010A			 jc	 @__err
1  4592	    247D  67| 89 44 24 1C		 mov	 [esp+1Ch],ax
1  4593	    2482  E9 00F6			 jmp	 @__ok
1  4594
1  4595
1  4596
1  4597
1  4598					 ;-----------------------------------------------------------------------------
1  4599	    2485  8B CB			 @_FF9x1:mov	 cx,bx			 ; convert BX:CX to EBX
1  4600	    2487  66| C1 EB 10			 shr	 ebx,16
1  4601	    248B  8B FE				 mov	 di,si			 ; convert SI:DI to EDI
1  4602	    248D  66| C1 EE 10			 shr	 esi,16
1  4603	    2491  C3				 ret
1  4604	    2492  0F 82	00F1		 @_FF9x2:jc	 @__err
1  4605	    2496  66| C1 E6 10			 shl	 esi,16
1  4606	    249A  8B F7				 mov	 si,di
1  4607	    249C  66| 67| 89 74	24 04		 mov	 [esp+04h],esi
1  4608	    24A2  66| C1 E3 10		 @_FF9x3:shl	 ebx,16
1  4609	    24A6  8B D9				 mov	 bx,cx
1  4610	    24A8  66| 67| 89 5C	24 10		 mov	 [esp+10h],ebx
1  4611	    24AE  E9 00CA			 jmp	 @__ok
1  4612
1  4613
1  4614
1  4615
1  4616					 ;*****************************************************************************
1  4617	    24B1  1E			 @__cpy: push	 ds		 ; copy	NULL-terminated	string to buffer
1  4618	    24B2  07				 pop	 es
1  4619	    24B3  33 C0				 xor	 ax,ax
1  4620	    24B5  66| 8B F2			 mov	 esi,edx
1  4621	    24B8  66| 8B FA			 mov	 edi,edx
1  4622	    24BB  66| 83 C9 FF			 or	 ecx,-1
1  4623	    24BF  F2> 67| AE			 repne	 scas byte ptr es:[edi]
1  4624	    24C2  66| F7 D1			 not	 ecx
1  4625	    24C5  2E: 8E 06 3522r		 mov	 es,cs:_sel_ds
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 83
dos32a.asm



1  4626	    24CA  66| 2E: 8B 3E	3542r		 mov	 edi,cs:_lobufbase
1  4627	    24D0  F3> 67| A4			 rep	 movs byte ptr es:[edi],[esi]
1  4628	    24D3  2E: A1 3516r			 mov	 ax,cs:_seg_buf
1  4629	    24D7  67| 89 45 24			 mov	 word ptr [ebp+24h],ax
1  4630	    24DB  67| C7 45 14 0000		 mov	 word ptr [ebp+14h],0
1  4631	    24E1  E9 E133			 jmp	 int21h
1  4632	    24E4  66| 83 EC 32		 @__std: sub	 esp,32h
1  4633	    24E8  66| 8B EC			 mov	 ebp,esp
1  4634	    24EB  67| 89 75 04			 mov	 [ebp+04h],si			 ; these two pass-downs	are
1  4635	    24EF  67| 89 5D 10			 mov	 [ebp+10h],bx			 ; for Win95 longfilenames
1  4636	    24F3  67| 89 4D 18			 mov	 [ebp+18h],cx
1  4637	    24F7  67| 89 45 1C			 mov	 [ebp+1Ch],ax
1  4638	    24FB  E8 FFB3			 call	 @__cpy
1  4639	    24FE  66| 67| 0F B7	45 1C		 movzx	 eax,word ptr [ebp+1Ch]
1  4640	    2504  66| 67| 0F B7	4D 18		 movzx	 ecx,word ptr [ebp+18h]
1  4641	    250A  67| F6 45 20 01		 test	 byte ptr [ebp+20h],1
1  4642	    250F  66| 67| 8D 64	24 32		 lea	 esp,[esp+32h]			 ; restore stack
1  4643	    2515  C3				 ret
1  4644	    2516  66| 83 EC 32		 @__all: sub	 esp,32h
1  4645	    251A  66| 8B EC			 mov	 ebp,esp
1  4646	    251D  67| 89 5D 10			 mov	 [ebp+10h],bx
1  4647	    2521  67| 89 55 14			 mov	 [ebp+14h],dx
1  4648	    2525  67| 89 4D 18			 mov	 [ebp+18h],cx
1  4649	    2529  67| 89 45 1C			 mov	 [ebp+1Ch],ax
1  4650	    252D  E8 E0E7			 call	 int21h
1  4651	    2530  66| 67| 0F B7	45 1C		 movzx	 eax,word ptr [ebp+1Ch]
1  4652	    2536  66| 67| 0F B7	4D 18		 movzx	 ecx,word ptr [ebp+18h]
1  4653	    253C  66| 67| 0F B7	55 14		 movzx	 edx,word ptr [ebp+14h]
1  4654	    2542  66| 67| 0F B7	5D 10		 movzx	 ebx,word ptr [ebp+10h]
1  4655	    2548  66| 67| 0F B7	7D 22		 movzx	 edi,word ptr [ebp+22h]		 ; ES
1  4656	    254E  66| 67| 0F B7	75 24		 movzx	 esi,word ptr [ebp+24h]		 ; DS
1  4657	    2554  67| F6 45 20 01		 test	 byte ptr [ebp+20h],1
1  4658	    2559  66| 67| 8D 64	24 32		 lea	 esp,[esp+32h]			 ; restore stack
1  4659	    255F  C3				 ret
1  4660	    2560  66| 67| 0F B7	45 1C	 @__tst: movzx	 eax,word ptr [ebp+1Ch]		 ; get error number
1  4661	    2566  67| F6 45 20 01		 test	 byte ptr [ebp+20h],1		 ; check if CF is set
1  4662	    256B  66| 67| 8D 64	24 32		 lea	 esp,[esp+32h]			 ; restore stack
1  4663	    2571  66| 67| 89 44	24 1C		 mov	 [esp+1Ch],eax			 ; put EAX (error) on stack
1  4664	    2577  75 0E	90 90			 jnz	 @__err
1  4665	    257B  66| 61		 @__ok:	 popad					 ; return ok
1  4666	    257D  07 1F			 @__exi: pop	 es ds
1  4667	    257F  67| 80 64 24 08 FE		 and	 byte ptr [esp+8],0FEh
1  4668	    2585  66| CF			 iretd
1  4669	    2587  66| 61		 @__err: popad					 ; return with error
1  4670	    2589  07 1F				 pop	 es ds
1  4671	    258B  67| 80 4C 24 08 01		 or	 byte ptr [esp+8],01h
1  4672	    2591  66| CF			 iretd
1  4673
1  4674
1  4675					 PopState
1  4676
   4677					 include TEXT\CLIENT\int33h.asm
1  4678					 ;
1  4679					 ; Copyright (C) 1996-2002 Supernar Systems, Ltd. All rights reserved.
1  4680					 ;
1  4681					 ; Redistribution  and	use  in	source and  binary  forms, with	or without
1  4682					 ; modification,  are permitted	provided that the following conditions are
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 84
dos32a.asm



1  4683					 ; met:
1  4684					 ;
1  4685					 ; 1.  Redistributions	of  source code	 must  retain  the above copyright
1  4686					 ; notice, this	list of	conditions and the following disclaimer.
1  4687					 ;
1  4688					 ; 2.  Redistributions	in binary form	must reproduce the above copyright
1  4689					 ; notice,  this  list of conditions and  the  following disclaimer in the
1  4690					 ; documentation and/or	other materials	provided with the distribution.
1  4691					 ;
1  4692					 ; 3. The end-user documentation included with the redistribution, if any,
1  4693					 ; must	include	the following acknowledgment:
1  4694					 ;
1  4695					 ; "This product uses DOS/32 Advanced DOS Extender technology."
1  4696					 ;
1  4697					 ; Alternately,	 this acknowledgment may appear	in the software	itself,	if
1  4698					 ; and wherever	such third-party acknowledgments normally appear.
1  4699					 ;
1  4700					 ; 4.  Products	derived	from this software  may	not be called "DOS/32A"	or
1  4701					 ; "DOS/32 Advanced".
1  4702					 ;
1  4703					 ; THIS	 SOFTWARE AND DOCUMENTATION IS PROVIDED	 "AS IS" AND ANY EXPRESSED
1  4704					 ; OR  IMPLIED	WARRANTIES,  INCLUDING,	BUT  NOT  LIMITED  TO, THE IMPLIED
1  4705					 ; WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
1  4706					 ; DISCLAIMED.	IN  NO	EVENT SHALL THE	 AUTHORS  OR  COPYRIGHT	HOLDERS	BE
1  4707					 ; LIABLE  FOR	ANY DIRECT, INDIRECT,  INCIDENTAL,  SPECIAL, EXEMPLARY,	OR
1  4708					 ; CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT NOT	LIMITED	TO, PROCUREMENT	OF
1  4709					 ; SUBSTITUTE  GOODS  OR  SERVICES;  LOSS OF  USE,  DATA,  OR  PROFITS;	OR
1  4710					 ; BUSINESS  INTERRUPTION) HOWEVER CAUSED AND  ON ANY THEORY OF	LIABILITY,
1  4711					 ; WHETHER IN CONTRACT,	STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE	OR
1  4712					 ; OTHERWISE)  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN	IF
1  4713					 ; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
1  4714					 ;
1  4715					 ;
1  4716
1  4717					 PushState
1  4718
1  4719
1  4720					 .386p
1  4721					 ;=============================================================================
1  4722	    2593  FC			 _int33: cld
1  4723	    2594  1E 06				 push	 ds es
1  4724	    2596  66| 60			 pushad
1  4725
1  4726	    2598  3D 0009			 cmp	 ax,0009h
1  4727	    259B  74 3D	90 90			 jz	 @__0009h
1  4728	    259F  3D 000C			 cmp	 ax,000Ch
1  4729	    25A2  74 7C	90 90			 jz	 @__000Ch
1  4730	    25A6  3D 0014			 cmp	 ax,0014h
1  4731	    25A9  74 7B	90 90			 jz	 @__0014h
1  4732	    25AD  3D 0016			 cmp	 ax,0016h
1  4733	    25B0  0F 84	0186			 jz	 @__0016h
1  4734	    25B4  3D 0017			 cmp	 ax,0017h
1  4735	    25B7  0F 84	01B7			 jz	 @__0017h
1  4736	    25BB  3D 0018			 cmp	 ax,0018h
1  4737	    25BE  0F 84	0080			 jz	 @__0018h
1  4738	    25C2  3D 0019			 cmp	 ax,0019h
1  4739	    25C5  0F 84	0085			 jz	 @__0019h
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 85
dos32a.asm



1  4740	    25C9  3D 0020			 cmp	 ax,0020h
1  4741	    25CC  0F 84	01DE			 jz	 @__0020h
1  4742
1  4743	    25D0  66| 61			 popad
1  4744	    25D2  07 1F				 pop	 es ds
1  4745	    25D4  66				 db	 66h
1  4746	    25D5  2E: FF 2E 356Ar		 jmp	 cs:_int33_ip
1  4747
1  4748
1  4749
1  4750
1  4751					 ;=============================================================================
1  4752					 ; Define Graphics Cursor
1  4753					 ; In:	 BX = column of	cursor hotspot in bitmap
1  4754					 ;	 CX = row of cursor hotspot in bitmap
1  4755					 ;	 ES:EDX	= mask bitmap
1  4756					 ;
1  4757	    25DA			 @__0009h:
1  4758	    25DA  06				 push	 es
1  4759	    25DB  1F				 pop	 ds
1  4760	    25DC  66| 83 EC 32			 sub	 esp,32h
1  4761	    25E0  66| 8B EC			 mov	 ebp,esp
1  4762	    25E3  66| 8B F2			 mov	 esi,edx
1  4763	    25E6  2E: 8E 06 352Cr		 mov	 es,cs:_sel_zero
1  4764	    25EB  66| 2E: 0F B7	3E    +		 movzx	 edi,cs:_seg_mus
   4765		  351Ar
1  4766	    25F2  67| 89 45 1C			 mov	 word ptr [ebp+1Ch],ax
1  4767	    25F6  67| 89 4D 18			 mov	 word ptr [ebp+18h],cx
1  4768	    25FA  67| 89 5D 10			 mov	 word ptr [ebp+10h],bx
1  4769	    25FE  67| 89 7D 22			 mov	 word ptr [ebp+22h],di
1  4770	    2602  67| C7 45 14 0000		 mov	 word ptr [ebp+14h],0
1  4771	    2608  66| C1 E7 04			 shl	 edi,4
1  4772	    260C  66| B9 00000010		 mov	 ecx,10h
1  4773	    2612  F3> 66| 67| A5		 rep	 movs dword ptr	es:[edi],[esi]
1  4774	    2616  E8 DFF7			 call	 int33h
1  4775	    2619  66| 83 C4 32			 add	 esp,32h
1  4776	    261D  E9 FF5B			 jmp	 @__ok
1  4777
1  4778
1  4779
1  4780					 ;=============================================================================
1  4781					 ; Define Interrupt Subroutine
1  4782					 ; In:	 CX = call mask
1  4783					 ;	 ES:EDX	= far pointer to routine
1  4784					 ;
1  4785	    2620			 @__000Ch:
1  4786	    2620  E8 0043			 call	 _mus_int_def
1  4787	    2623  E9 FF55			 jmp	 @__ok
1  4788
1  4789
1  4790					 ;=============================================================================
1  4791					 ; Exchange Defined Interrupt Subroutine
1  4792					 ; In:	 CX = call mask
1  4793					 ;	 ES:EDX	= far pointer to routine
1  4794					 ; Out:	 CX = call mask
1  4795					 ;	 ES:EDX	= far pointer to routine
1  4796					 ;
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 86
dos32a.asm



1  4797	    2626			 @__0014h:
1  4798	    2626  2E: 8B 36 3508r		 mov	 si,word ptr cs:_mus_sel
1  4799	    262B  66| 2E: 8B 3E	3504r		 mov	 edi,dword ptr cs:_mus_off
1  4800	    2631  E8 0032			 call	 _mus_int_def
1  4801	    2634  66| 67| 89 7C	24 14		 mov	 [esp+14h],edi
1  4802	    263A  67| 89 74 24 20		 mov	 [esp+20h],si
1  4803	    263F  E9 FF39			 jmp	 @__ok
1  4804
1  4805
1  4806					 ;=============================================================================
1  4807					 ; Define Interrupt Subroutine
1  4808					 ; In:	 CX = call mask
1  4809					 ;	 ES:EDX	= far pointer to routine
1  4810					 ;
1  4811	    2642			 @__0018h:
1  4812	    2642  E8 0021			 call	 _mus_int_def
1  4813	    2645  66| 67| 89 44	24 1C		 mov	 [esp+1Ch],eax
1  4814	    264B  E9 FF2D			 jmp	 @__ok
1  4815
1  4816
1  4817					 ;=============================================================================
1  4818					 ; Return Defined Interrupt Subroutine
1  4819					 ; In:	 CX = call mask
1  4820					 ; Out:	 BX:EDX	= far pointer to routine
1  4821					 ;
1  4822	    264E			 @__0019h:
1  4823	    264E  2E: A1 3508r			 mov	 ax,word ptr cs:_mus_sel
1  4824	    2652  66| 2E: 8B 16	3504r		 mov	 edx,dword ptr cs:_mus_off
1  4825	    2658  66| 67| 89 54	24 14		 mov	 [esp+14h],edx
1  4826	    265E  67| 89 44 24 10		 mov	 [esp+10h],ax
1  4827	    2663  E9 FF15			 jmp	 @__ok
1  4828
1  4829
1  4830
1  4831					 ;-----------------------------------------------------------------------------
1  4832	    2666			 _mus_int_def:
1  4833	    2666  66| 83 EC 32			 sub	 esp,32h
1  4834	    266A  66| 8B EC			 mov	 ebp,esp
1  4835	    266D  67| 89 45 1C			 mov	 [ebp+1Ch],ax
1  4836	    2671  67| 89 4D 18			 mov	 [ebp+18h],cx
1  4837	    2675  2E: 8E 1E 3522r		 mov	 ds,cs:_sel_ds
1  4838	    267A  66| 33 C0			 xor	 eax,eax
1  4839	    267D  66| 89 16 3504r		 mov	 _mus_off,edx
1  4840	    2682  8C 06	3508r			 mov	 _mus_sel,es
1  4841	    2686  8C C0				 mov	 ax,es
1  4842	    2688  66| 0B C2			 or	 eax,edx
1  4843	    268B  74 08	90 90			 jz	 @@1
1  4844	    268F  A1 350Er			 mov	 ax,_seg_ds
1  4845	    2692  BA 26ADr			 mov	 dx,offs _mus_int_rm
1  4846	    2695  67| 89 55 14		 @@1:	 mov	 word ptr [ebp+14h],dx
1  4847	    2699  67| 89 45 22			 mov	 word ptr [ebp+22h],ax
1  4848	    269D  FA				 cli
1  4849	    269E  E8 DF6F			 call	 int33h
1  4850	    26A1  66| 67| 0F B7	45 1C		 movzx	 eax,word ptr [ebp+1Ch]
1  4851	    26A7  66| 83 C4 32			 add	 esp,32h
1  4852	    26AB  FB				 sti
1  4853	    26AC  C3				 ret
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 87
dos32a.asm



1  4854
1  4855	    26AD			 _mus_int_rm:
1  4856	    26AD  2E: 80 3E 350Cr 00		 cmp	 cs:_mus_data,0
1  4857	    26B3  2E: C6 06 350Cr 01  +		 mov	 cs:_mus_data,1
   4858		  90
1  4859	    26BA  75 07	90 90			 jnz	 @@1
1  4860	    26BE  2E: FF 2E 3500r		 jmp	 dword ptr cs:_mus_backoff
1  4861	    26C3  CB			 @@1:	 retf
1  4862
1  4863	    26C4			 _mus_int_pm:
1  4864	    26C4  FC				 cld
1  4865	    26C5  16 66| 54			 push	 ss esp
1  4866	    26C8  66| 60			 pushad
1  4867	    26CA  1E 06				 push	 ds es
1  4868	    26CC  66| 33 C0			 xor	 eax,eax
1  4869	    26CF  8C D0				 mov	 ax,ss
1  4870	    26D1  66| 0F 02 C0			 lar	 eax,eax
1  4871	    26D5  66| A9 00400000		 test	 eax,00400000h
1  4872	    26DB  75 06	90 90			 jnz	 @@1
1  4873	    26DF  66| 0F B7 E4			 movzx	 esp,sp
1  4874	    26E3  2E: A1 350Er		 @@1:	 mov	 ax,cs:_seg_ds
1  4875	    26E7  26: 67| C7 47	2A    +		 mov	 word ptr es:[edi+2Ah],offs @@done
   4876		  2732r
1  4877	    26EE  26: 67| 89 47	2C		 mov	 word ptr es:[edi+2Ch],ax
1  4878	    26F3  66| 26: 67| 0F B7 47+		 movzx	 eax,word ptr es:[edi+1Ch]
   4879		  1C
1  4880	    26FA  66| 26: 67| 0F B7 4F+		 movzx	 ecx,word ptr es:[edi+18h]
   4881		  18
1  4882	    2701  66| 26: 67| 0F B7 57+		 movzx	 edx,word ptr es:[edi+14h]
   4883		  14
1  4884	    2708  66| 26: 67| 0F B7 5F+		 movzx	 ebx,word ptr es:[edi+10h]
   4885		  10
1  4886	    270F  66| 26: 67| 0F B7 77+		 movzx	 esi,word ptr es:[edi+04h]
   4887		  04
1  4888	    2716  66| 26: 67| 0F B7 3F		 movzx	 edi,word ptr es:[edi+00h]
1  4889	    271C  66| 2E: FF 1E	3504r		 call	 fword ptr cs:_mus_off
1  4890	    2722  07 1F				 pop	 es ds
1  4891	    2724  66| 61			 popad
1  4892	    2726  66| 67| 0F B2	24 24		 lss	 esp,[esp]
1  4893	    272C  66| 83 C4 02			 add	 esp,2
1  4894	    2730  66| CF			 iretd
1  4895	    2732  2E: C6 06 350Cr 00  +	 @@done: mov	 cs:_mus_data,0
   4896		  90
1  4897	    2739  CB				 retf
1  4898
1  4899
1  4900
1  4901					 ;=============================================================================
1  4902					 ; Save	Driver State
1  4903					 ; In:	 BX = size of buffer
1  4904					 ;	 ES:EDX	= buffer for driver state
1  4905					 ;
1  4906	    273A			 @__0016h:
1  4907	    273A  66| 83 EC 32			 sub	 esp,32h
1  4908	    273E  66| 8B EC			 mov	 ebp,esp
1  4909	    2741  66| 8B FA			 mov	 edi,edx
1  4910	    2744  67| 89 45 1C			 mov	 [ebp+1Ch],ax
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 88
dos32a.asm



1  4911	    2748  2E: A1 3516r			 mov	 ax,cs:_seg_buf
1  4912	    274C  67| 89 45 22			 mov	 word ptr [ebp+22h],ax
1  4913	    2750  67| C7 45 14 0000		 mov	 word ptr [ebp+14h],0
1  4914	    2756  E8 DEB7			 call	 int33h
1  4915	    2759  2E: 8E 1E 3522r		 mov	 ds,cs:_sel_ds
1  4916	    275E  66| 8B 36 3542r		 mov	 esi,_lobufbase
1  4917	    2763  66| 8B 0E 34FCr		 mov	 ecx,_mus_size
1  4918	    2768  F3> 67| A4			 rep	 movs byte ptr es:[edi],[esi]
1  4919	    276B  66| 83 C4 32			 add	 esp,32h
1  4920	    276F  E9 FE09			 jmp	 @__ok
1  4921
1  4922
1  4923					 ;=============================================================================
1  4924					 ; Restore Driver State
1  4925					 ; In:	 BX = size of buffer
1  4926					 ;	 ES:EDX	= buffer containing saved state
1  4927					 ;
1  4928	    2772			 @__0017h:
1  4929	    2772  06				 push	 es
1  4930	    2773  1F				 pop	 ds
1  4931	    2774  66| 83 EC 32			 sub	 esp,32h
1  4932	    2778  66| 8B EC			 mov	 ebp,esp
1  4933	    277B  66| 8B F2			 mov	 esi,edx
1  4934	    277E  67| 89 45 1C			 mov	 [ebp+1Ch],ax
1  4935	    2782  2E: A1 3516r			 mov	 ax,cs:_seg_buf
1  4936	    2786  67| 89 45 22			 mov	 word ptr [ebp+22h],ax
1  4937	    278A  67| C7 45 14 0000		 mov	 word ptr [ebp+14h],0
1  4938	    2790  2E: 8E 06 3522r		 mov	 es,cs:_sel_ds
1  4939	    2795  66| 2E: 8B 3E	3542r		 mov	 edi,cs:_lobufbase
1  4940	    279B  66| 2E: 8B 0E	34FCr		 mov	 ecx,cs:_mus_size
1  4941	    27A1  F3> 67| A4			 rep	 movs byte ptr es:[edi],[esi]
1  4942	    27A4  E8 DE69			 call	 int33h
1  4943	    27A7  66| 83 C4 32			 add	 esp,32h
1  4944	    27AB  E9 FDCD			 jmp	 @__ok
1  4945
1  4946
1  4947					 ;=============================================================================
1  4948					 ; Enable Mouse	Driver
1  4949					 ; In:	 -
1  4950					 ;
1  4951	    27AE			 @__0020h:
1  4952	    27AE  66| 83 EC 32			 sub	 esp,32h
1  4953	    27B2  66| 8B EC			 mov	 ebp,esp
1  4954	    27B5  67| 89 45 1C			 mov	 [ebp+1Ch],ax
1  4955	    27B9  E8 DE54			 call	 int33h
1  4956	    27BC  66| 83 C4 32			 add	 esp,32h
1  4957	    27C0  67| C7 44 24 1C FFFF		 mov	 word ptr [esp+1Ch],-1
1  4958	    27C7  E9 FDB1			 jmp	 @__ok
1  4959
1  4960
1  4961
1  4962					 PopState
1  4963
   4964					 include loader.asm
1  4965					 ;
1  4966					 ; Copyright (C) 1996-2002 Supernar Systems, Ltd. All rights reserved.
1  4967					 ;
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 89
dos32a.asm



1  4968					 ; Redistribution  and	use  in	source and  binary  forms, with	or without
1  4969					 ; modification,  are permitted	provided that the following conditions are
1  4970					 ; met:
1  4971					 ;
1  4972					 ; 1.  Redistributions	of  source code	 must  retain  the above copyright
1  4973					 ; notice, this	list of	conditions and the following disclaimer.
1  4974					 ;
1  4975					 ; 2.  Redistributions	in binary form	must reproduce the above copyright
1  4976					 ; notice,  this  list of conditions and  the  following disclaimer in the
1  4977					 ; documentation and/or	other materials	provided with the distribution.
1  4978					 ;
1  4979					 ; 3. The end-user documentation included with the redistribution, if any,
1  4980					 ; must	include	the following acknowledgment:
1  4981					 ;
1  4982					 ; "This product uses DOS/32 Advanced DOS Extender technology."
1  4983					 ;
1  4984					 ; Alternately,	 this acknowledgment may appear	in the software	itself,	if
1  4985					 ; and wherever	such third-party acknowledgments normally appear.
1  4986					 ;
1  4987					 ; 4.  Products	derived	from this software  may	not be called "DOS/32A"	or
1  4988					 ; "DOS/32 Advanced".
1  4989					 ;
1  4990					 ; THIS	 SOFTWARE AND DOCUMENTATION IS PROVIDED	 "AS IS" AND ANY EXPRESSED
1  4991					 ; OR  IMPLIED	WARRANTIES,  INCLUDING,	BUT  NOT  LIMITED  TO, THE IMPLIED
1  4992					 ; WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
1  4993					 ; DISCLAIMED.	IN  NO	EVENT SHALL THE	 AUTHORS  OR  COPYRIGHT	HOLDERS	BE
1  4994					 ; LIABLE  FOR	ANY DIRECT, INDIRECT,  INCIDENTAL,  SPECIAL, EXEMPLARY,	OR
1  4995					 ; CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT NOT	LIMITED	TO, PROCUREMENT	OF
1  4996					 ; SUBSTITUTE  GOODS  OR  SERVICES;  LOSS OF  USE,  DATA,  OR  PROFITS;	OR
1  4997					 ; BUSINESS  INTERRUPTION) HOWEVER CAUSED AND  ON ANY THEORY OF	LIABILITY,
1  4998					 ; WHETHER IN CONTRACT,	STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE	OR
1  4999					 ; OTHERWISE)  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN	IF
1  5000					 ; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
1  5001					 ;
1  5002					 ;
1  5003
1  5004					 ;*****************************************************************************
1  5005					 ; DOS/32A 32-bit application loader (LE/LX style file formats)
1  5006					 ;
1  5007					 ;*****************************************************************************
1  5008
1  5009					 PushState
1  5010
1  5011		  =0040			 APP_MAXOBJECTS	 = 64
1  5012
1  5013
1  5014					 .386p
1  5015					 ;=============================================================================
1  5016	    27CA			 load_le_app:
1  5017	    27CA  C6 06	36E8r 00 90		 mov	 _app_type,0
**Error** loader.asm(53) Undefined symbol: @AREA1_DB
*Warning* loader.asm(53) Argument needs	type override
1  5018	    27D0  EB 10	90			 jmp	 load_application
1  5019
1  5020	    27D3			 load_lx_app:
1  5021	    27D3  C6 06	36E8r 01 90		 mov	 _app_type,1
**Error** loader.asm(57) Undefined symbol: @AREA1_DB
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 90
dos32a.asm



*Warning* loader.asm(57) Argument needs	type override
1  5022	    27D9  EB 07	90			 jmp	 load_application
1  5023
1  5024	    27DC			 load_lc_app:
1  5025	    27DC  C6 06	36E8r 02 90		 mov	 _app_type,2
**Error** loader.asm(61) Undefined symbol: @AREA1_DB
*Warning* loader.asm(61) Argument needs	type override
1  5026
1  5027
1  5028					 ;=============================================================================
1  5029	    27E2			 load_application:
1  5030	    27E2  E8 004E			 call	 load_header		 ; load	'LE'/'LX' exec header
1  5031	    27E5  E8 E488			 call	 verbose_showloadhdr
1  5032	    27E8  66| B9 00000001		 mov	 ecx,1			 ; start with Object #1
1  5033	    27EE  E8 0117		 @@1:	 call	 load_object		 ; load	object
1  5034	    27F1  E8 05C7			 call	 create_selector	 ; allocate selector for loaded	object
1  5035	    27F4  E8 E4A0			 call	 verbose_showloadobj
1  5036	    27F7  66| 52			 push	 edx			 ; save	Object Selector/Object Flags
1  5037	    27F9  66| 57			 push	 edi			 ; save	Address	of loaded Object
1  5038	    27FB  66| 56			 push	 esi			 ; save	Page Table Index
1  5039	    27FD  66| 53			 push	 ebx			 ; save	# Page Table Entries
1  5040	    27FF  41				 inc	 cx			 ; increment Current_Object#
1  5041	    2800  3B 0E	3698r			 cmp	 cx,word ptr _app_num_objects
**Error** loader.asm(77) Undefined symbol: @AREA1_DD
1  5042	    2804  76 E8				 jbe	 @@1			 ; loop	until all objects are loaded
1  5043	    2806  E8 064F			 call	 preload_fixups		 ; preload fixup tables	and records
1  5044	    2809  66| 8B EC			 mov	 ebp,esp		 ; base	pointer	to last	loaded Object
1  5045	    280C  66| 8B 1E 3698r		 mov	 ebx,_app_num_objects	 ; number of Objects
**Error** loader.asm(81) Undefined symbol: @AREA1_DD
1  5046	    2811  4B				 dec	 bx
1  5047	    2812  C1 E3	04			 shl	 bx,4
1  5048	    2815  66| 89 1E 3690r		 mov	 _app_tmp_addr1,ebx
**Error** loader.asm(84) Undefined symbol: @AREA1_DD
1  5049	    281A  E8 01BC		 @@4:	 call	 relocate_object
1  5050	    281D  83 EB	10			 sub	 bx,10h
1  5051	    2820  73 F8				 jnc	 @@4
1  5052	    2822  E8 0698			 call	 unload_fixups		 ; free	allocated memory for fixups
1  5053	    2825  E8 E39D			 call	 close_exec		 ; close file
1  5054	    2828  66| 8B 26 3526r		 mov	 esp,_sel_esp
1  5055	    282D  E8 E492			 call	 verbose_showstartup
1  5056	    2830  E9 0A62			 jmp	 enter_32bit_code
1  5057
1  5058
1  5059
1  5060					 ;-----------------------------------------------------------------------------
1  5061	    2833			 load_header:
1  5062	    2833  66| B9 000000A8		 mov	 ecx,0A8h		 ; load	'LE' header
1  5063	    2839  66| BA 00000004		 mov	 edx,04h
1  5064	    283F  C7 06	34F8r 3002		 mov	 _err_code,3002h	 ; "error in app file"
1  5065	    2845  80 3E	36E8r 02		 cmp	 _app_type,2
**Error** loader.asm(101) Undefined symbol: @AREA1_DB
*Warning* loader.asm(101) Argument needs type override
1  5066	    284A  0F 84	068E			 jz	 load_lc_header
1  5067
1  5068	    284E  E8 E3A2			 call	 load_fs_block
1  5069	    2851  66| 8B 16 368Cr		 mov	 edx,_exec_start
**Error** loader.asm(105) Undefined symbol: @AREA1_DD
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 91
dos32a.asm



1  5070
1  5071	    2856  64: A1 0010			 mov	 ax,fs:[0010h]		 ; get Module Flags
1  5072	    285A  25 2000			 and	 ax,2000h		 ; check if not-loadable;/no-fixups
1  5073	    285D  B8 3005			 mov	 ax,3005h
1  5074	    2860  0F 85	DC2A			 jnz	 file_error
1  5075	    2864  64: A1 0044			 mov	 ax,fs:[0044h]		 ; get # Objects
1  5076	    2868  8B C8				 mov	 cx,ax
1  5077	    286A  3D 0040			 cmp	 ax,APP_MAXOBJECTS
1  5078	    286D  B8 4001			 mov	 ax,4001h		 ; "too	many objects"
1  5079	    2870  0F 87	DC1A			 ja	 file_error
1  5080	    2874  66| 89 0E 3698r		 mov	 _app_num_objects,ecx
**Error** loader.asm(116) Undefined symbol: @AREA1_DD
1  5081
1  5082	    2879  66| 64: A1 0040		 mov	 eax,fs:[0040h]		 ; get Object Table Offset
1  5083	    287E  66| 03 C2			 add	 eax,edx
1  5084	    2881  66| A3 369Cr			 mov	 _app_off_objects,eax
**Error** loader.asm(120) Undefined symbol: @AREA1_DD
1  5085	    2885  66| 64: A1 0048		 mov	 eax,fs:[0048h]		 ; get Object PageTable	Offset
1  5086	    288A  66| 03 C2			 add	 eax,edx
1  5087	    288D  66| A3 36A0r			 mov	 _app_off_objpagetab,eax
**Error** loader.asm(123) Undefined symbol: @AREA1_DD
1  5088	    2891  66| 64: A1 0068		 mov	 eax,fs:[0068h]		 ; get Fixup PageTable Offset
1  5089	    2896  66| 03 C2			 add	 eax,edx
1  5090	    2899  66| A3 36A4r			 mov	 _app_off_fixpagetab,eax
**Error** loader.asm(126) Undefined symbol: @AREA1_DD
1  5091	    289D  66| 64: A1 006C		 mov	 eax,fs:[006Ch]		 ; get Fixup Record Table Offset
1  5092	    28A2  66| 03 C2			 add	 eax,edx
1  5093	    28A5  66| A3 36A8r			 mov	 _app_off_fixrectab,eax
**Error** loader.asm(129) Undefined symbol: @AREA1_DD
1  5094	    28A9  66| 64: A1 0080		 mov	 eax,fs:[0080h]		 ; get Data Pages Offset
1  5095	    28AE  66| 01 06 36ACr		 add	 _app_off_datapages,eax
**Error** loader.asm(131) Undefined symbol: @AREA1_DD
1  5096
1  5097	    28B3  66| 64: A1 0018		 mov	 eax,fs:[0018h]		 ; get EIP Object #
1  5098	    28B8  66| A3 36B4r			 mov	 _app_eip_object,eax
**Error** loader.asm(134) Undefined symbol: @AREA1_DD
1  5099	    28BC  66| 64: A1 0020		 mov	 eax,fs:[0020h]		 ; get ESP Object #
1  5100	    28C1  66| A3 36B8r			 mov	 _app_esp_object,eax
**Error** loader.asm(136) Undefined symbol: @AREA1_DD
1  5101	    28C5  66| 64: A1 001C		 mov	 eax,fs:[001Ch]		 ; get EIP
1  5102	    28CA  66| A3 36BCr			 mov	 _app_eip,eax
**Error** loader.asm(138) Undefined symbol: @AREA1_DD
1  5103	    28CE  66| 64: A1 0024		 mov	 eax,fs:[0024h]		 ; get ESP
1  5104	    28D3  66| A3 36C0r			 mov	 _app_esp,eax
**Error** loader.asm(140) Undefined symbol: @AREA1_DD
1  5105	    28D7  66| 64: A1 0030		 mov	 eax,fs:[0030h]		 ; get Fixup Records Size
1  5106	    28DC  66| A3 36CCr			 mov	 _app_siz_fixrecstab,eax
**Error** loader.asm(142) Undefined symbol: @AREA1_DD
1  5107	    28E0  66| 64: A1 002C		 mov	 eax,fs:[002Ch]		 ; get Bytes on	Last Page (LE-only)
1  5108	    28E5  66| A3 36D4r			 mov	 _app_siz_lastpage,eax
**Error** loader.asm(144) Undefined symbol: @AREA1_DD
1  5109
1  5110	    28E9  66| B8 00000FFF		 mov	 eax,0FFFh
1  5111	    28EF  80 3E	36E8r 00		 cmp	 _app_type,0
**Error** loader.asm(147) Undefined symbol: @AREA1_DB
*Warning* loader.asm(147) Argument needs type override
1  5112	    28F4  74 0D	90 90			 jz	 @@done
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 92
dos32a.asm



1  5113	    28F8  B8 0001			 mov	 ax,1
1  5114	    28FB  64: 8B 0E 002C		 mov	 cx,fs:[002Ch]		 ; get Page Offset Shift for LX-type
1  5115	    2900  D3 E0				 shl	 ax,cl			 ; max shift is	15 (8000h-1)
1  5116	    2902  48				 dec	 ax
1  5117
1  5118	    2903  66| A3 36B0r		 @@done: mov	 _app_off_pageshift,eax
**Error** loader.asm(154) Undefined symbol: @AREA1_DD
1  5119	    2907  C3				 ret
1  5120
1  5121
1  5122
1  5123					 ;-----------------------------------------------------------------------------
1  5124	    2908			 load_object:
1  5125	    2908  66| 51			 push	 ecx
1  5126	    290A  80 3E	36E8r 02		 cmp	 _app_type,2
**Error** loader.asm(162) Undefined symbol: @AREA1_DB
*Warning* loader.asm(162) Argument needs type override
1  5127	    290F  0F 84	0618			 jz	 load_lc_object
1  5128
1  5129	    2913  C7 06	34F8r 3002		 mov	 _err_code,3002h	 ; "error in app file"
1  5130	    2919  66| 8B 16 369Cr		 mov	 edx,_app_off_objects
**Error** loader.asm(166) Undefined symbol: @AREA1_DD
1  5131	    291E  E8 E2AE			 call	 seek_from_start	 ; move	to object header
1  5132	    2921  66| B9 00000018		 mov	 ecx,18h
1  5133	    2927  66| 33 D2			 xor	 edx,edx
1  5134	    292A  E8 E2C6			 call	 load_fs_block		 ; load	object header
1  5135	    292D  66| 01 06 369Cr		 add	 _app_off_objects,eax
**Error** loader.asm(171) Undefined symbol: @AREA1_DD
1  5136
1  5137	    2932  66| 8B 16 36ACr		 mov	 edx,_app_off_datapages	 ; get Data_Pages_Offset
**Error** loader.asm(173) Undefined symbol: @AREA1_DD
1  5138	    2937  E8 E295			 call	 seek_from_start	 ; move	to object data
1  5139	    293A  66| 64: A1 0000		 mov	 eax,fs:[0000h]		 ; get Virtual_Size[Object]
1  5140	    293F  66| 64: 8B 1E	0010		 mov	 ebx,fs:[0010h]		 ; get # Page Table Entries
1  5141	    2945  66| 64: 8B 0E	0008		 mov	 ecx,fs:[0008h]		 ; get Flags[Object]
1  5142	    294B  66| 64: 8B 36	000C		 mov	 esi,fs:[000Ch]		 ; get Page Table Index
1  5143
1  5144	    2951  66| 51			 push	 ecx			 ; save	Object Flags
1  5145	    2953  E8 0301			 call	 alloc_block		 ; allocate EAX	memory block to	EDI
1  5146	    2956  66| 8B C8			 mov	 ecx,eax		 ; ECX = bytes to read
1  5147	    2959  66| 8B E8			 mov	 ebp,eax		 ; EBP = preserve Virtual Size
1  5148	    295C  66| 8B D7			 mov	 edx,edi		 ; EDX = addres	to read	to
1  5149	    295F  E8 02CC			 call	 fill_zero_pages	 ; fill	allocated memory with zeroes
1  5150
1  5151	    2962  66| 8B C3			 mov	 eax,ebx
1  5152	    2965  66| 85 C0			 test	 eax,eax		 ; check if # Page Table Entries = 0
1  5153	    2968  74 6A	90 90			 jz	 @@5			 ; if yes, skip	loading
1  5154	    296C  66| C1 E0 0C			 shl	 eax,12			 ; convert # Page Table	Entries	to bytes
1  5155	    2970  66| 3B C1			 cmp	 eax,ecx		 ; check if # bytes >= bytes to	load
1  5156	    2973  73 05	90 90			 jae	 @@1			 ; if yes, jump
1  5157	    2977  66| 8B C8			 mov	 ecx,eax		 ; else	adjust number of bytes to read
1  5158
1  5159	    297A  67| 8B 44 24 04	 @@1:	 mov	 ax,[esp+4]		 ; get Object #
1  5160	    297F  3B 06	3698r			 cmp	 ax,word ptr _app_num_objects
**Error** loader.asm(196) Undefined symbol: @AREA1_DD
1  5161	    2983  75 23	90 90			 jnz	 @@3
1  5162	    2987  80 3E	36E8r 00		 cmp	 _app_type,0
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 93
dos32a.asm



**Error** loader.asm(198) Undefined symbol: @AREA1_DB
*Warning* loader.asm(198) Argument needs type override
1  5163	    298C  75 13	90 90			 jnz	 @@2
1  5164	    2990  66| 67| 8D 4B	FF		 lea	 ecx,[ebx-1]		 ; load	LE-style Last Object (BSS)
1  5165	    2995  66| C1 E1 0C			 shl	 ecx,12
1  5166	    2999  66| 03 0E 36D4r		 add	 ecx,_app_siz_lastpage
**Error** loader.asm(202) Undefined symbol: @AREA1_DD
1  5167	    299E  EB 08	90			 jmp	 @@3
1  5168	    29A1  66| 8B CB		 @@2:	 mov	 ecx,ebx		 ; load	LX-style Last Object (BSS)
1  5169	    29A4  66| C1 E1 0C			 shl	 ecx,12
1  5170
1  5171	    29A8  C7 06	34F8r 3002	 @@3:	 mov	 _err_code,3002h	 ; "error in app file"
1  5172	    29AE  E8 E24A			 call	 load_gs_block		 ; load	object data
1  5173	    29B1  66| 8B C1			 mov	 eax,ecx
1  5174	    29B4  66| 8B 16 36B0r		 mov	 edx,_app_off_pageshift
**Error** loader.asm(210) Undefined symbol: @AREA1_DD
1  5175	    29B9  66| 85 C2			 test	 eax,edx
1  5176	    29BC  74 11	90 90			 jz	 @@4
1  5177	    29C0  66| 8B CA			 mov	 ecx,edx
1  5178	    29C3  66| F7 D2			 not	 edx
1  5179	    29C6  66| 23 C2			 and	 eax,edx
1  5180	    29C9  66| 67| 8D 44	08 01		 lea	 eax,[eax+ecx+1]
1  5181	    29CF  66| 01 06 36ACr	 @@4:	 add	 _app_off_datapages,eax
**Error** loader.asm(217) Undefined symbol: @AREA1_DD
1  5182
1  5183	    29D4  66| 5A		 @@5:	 pop	 edx			 ; restore Object Flags
1  5184	    29D6  66| 59		 @@done: pop	 ecx
1  5185	    29D8  C3				 ret
1  5186
1  5187
1  5188
1  5189
1  5190					 ;=============================================================================
1  5191	    29D9			 relocate_object:
1  5192	    29D9  66| 33 C0			 xor	 eax,eax
1  5193	    29DC  66| 67| 3B 44	1D 00		 cmp	 eax,[ebp+ebx+0]	 ; get # Page Table Entries[Object]
1  5194	    29E2  75 03	90 90			 jnz	 @@0			 ; if zero, done
1  5195	    29E6  C3				 ret
1  5196	    29E7  80 3E	36E8r 00	 @@0:	 cmp	 _app_type,0
**Error** loader.asm(232) Undefined symbol: @AREA1_DB
*Warning* loader.asm(232) Argument needs type override
1  5197	    29EC  0F 85	0083			 jnz	 relocate_lx_object
1  5198
1  5199	    29F0			 relocate_le_object:
1  5200	    29F0  66| 67| 8B 4C	1D 04		 mov	 ecx,[ebp+ebx+4]	 ; get Page Table Index
1  5201	    29F6  66| 8B 16 36A0r		 mov	 edx,_app_off_objpagetab ; get Object Page Table Offset	in exec
**Error** loader.asm(237) Undefined symbol: @AREA1_DD
1  5202	    29FB  66| 67| 8D 54	8A FC		 lea	 edx,[ecx*4+edx-4]
1  5203	    2A01  C7 06	34F8r 3002		 mov	 _err_code,3002h	 ; "error in app file"
1  5204	    2A07  E8 E1C5			 call	 seek_from_start	 ; *1) move file ptr
1  5205	    2A0A  66| 50		 @@1:	 push	 eax			 ; EAX = counter
1  5206	    2A0C  66| B9 00000004		 mov	 ecx,4
1  5207	    2A12  66| 33 D2			 xor	 edx,edx
1  5208	    2A15  C7 06	34F8r 3002		 mov	 _err_code,3002h	 ; "error in app file"
1  5209	    2A1B  E8 E1D5			 call	 load_fs_block		 ; load	block
1  5210	    2A1E  66| 33 C9			 xor	 ecx,ecx		 ; get index into FixupPageTab
1  5211	    2A21  64: 8A 2E 0001		 mov	 ch,fs:[0001h]
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 94
dos32a.asm



1  5212	    2A26  64: 8A 0E 0002		 mov	 cl,fs:[0002h]
1  5213	    2A2B  E3 3B				 jcxz	 @@2
1  5214	    2A2D  66| A1 36A4r			 mov	 eax,_app_off_fixpagetab ; get Fixup Page Table	Offset
**Error** loader.asm(250) Undefined symbol: @AREA1_DD
1  5215	    2A31  66| 67| 8D 44	88 FC		 lea	 eax,[ecx*4+eax-4]
1  5216	    2A37  66| 65: 67| 8B 30		 mov	 esi,gs:[eax+00h]	 ; get offset of 1st fixup table
1  5217	    2A3C  66| 65: 67| 8B 48 04		 mov	 ecx,gs:[eax+04h]	 ; get offset of 2nd fixup table
1  5218	    2A42  66| 2B CE			 sub	 ecx,esi		 ; calculate size of 1st tab
1  5219	    2A45  74 21	90 90			 jz	 @@2			 ; if 1st == 2nd, no fixups
1  5220	    2A49  66| 03 36 36A8r		 add	 esi,_app_off_fixrectab	 ; get Fixup Record Table Offset
**Error** loader.asm(256) Undefined symbol: @AREA1_DD
1  5221	    2A4E  66| 2B 36 354Ar		 sub	 esi,_seg_ds_base
1  5222	    2A53  66| 67| 8B 3C	24		 mov	 edi,[esp]		 ; get current page number
1  5223	    2A58  66| C1 E7 0C			 shl	 edi,12
1  5224	    2A5C  66| 67| 03 7C	1D 08		 add	 edi,[ebp+ebx+8]	 ; address of page target to fix in mem
1  5225	    2A62  66| 03 CE			 add	 ecx,esi
1  5226	    2A65  E8 0063			 call	 apply_fixups		 ; patch target	with fixup data
1  5227	    2A68  66| 58		 @@2:	 pop	 eax
1  5228	    2A6A  40				 inc	 ax
1  5229	    2A6B  67| 3B 44 1D 00		 cmp	 ax,word ptr [ebp+ebx+0]
1  5230	    2A70  72 98				 jb	 @@1
1  5231	    2A72  C3				 ret
1  5232
1  5233	    2A73			 relocate_lx_object:
1  5234	    2A73  66| 67| 8B 4C	1D 04		 mov	 ecx,[ebp+ebx+4]	 ; get Page Table Index
1  5235	    2A79  66| 8B 16 36A4r		 mov	 edx,_app_off_fixpagetab ; get Fixup Page Table	Offset
**Error** loader.asm(271) Undefined symbol: @AREA1_DD
1  5236	    2A7E  66| 67| 8D 54	8A FC		 lea	 edx,[ecx*4+edx-4]
1  5237	    2A84  66| 50 66| 52		 @@1:	 push	 eax edx		 ; EAX = counter
1  5238	    2A88  66| 65: 67| 8B 32		 mov	 esi,gs:[edx+00h]	 ; get offset of 1st fixup table
1  5239	    2A8D  66| 65: 67| 8B 4A 04		 mov	 ecx,gs:[edx+04h]	 ; get offset of 2nd fixup table
1  5240	    2A93  66| 2B CE			 sub	 ecx,esi		 ; calculate size of 1st tab
1  5241	    2A96  74 22	90 90			 jz	 @@2			 ; if 1st == 2nd, no fixups
1  5242	    2A9A  66| 03 36 36A8r		 add	 esi,_app_off_fixrectab	 ; get Fixup Record Table Offset
**Error** loader.asm(278) Undefined symbol: @AREA1_DD
1  5243	    2A9F  66| 2B 36 354Ar		 sub	 esi,_seg_ds_base
1  5244	    2AA4  66| 67| 8B 7C	24 04		 mov	 edi,[esp+4]		 ; get current page number
1  5245	    2AAA  66| C1 E7 0C			 shl	 edi,12
1  5246	    2AAE  66| 67| 03 7C	1D 08		 add	 edi,[ebp+ebx+8]	 ; address of page target to fix in mem
1  5247	    2AB4  66| 03 CE			 add	 ecx,esi
1  5248	    2AB7  E8 0011			 call	 apply_fixups		 ; patch target	with fixup data
1  5249	    2ABA  66| 5A 66| 58		 @@2:	 pop	 edx eax
1  5250	    2ABE  66| 83 C2 04			 add	 edx,4
1  5251	    2AC2  40				 inc	 ax
1  5252	    2AC3  67| 3B 44 1D 00		 cmp	 ax,word ptr [ebp+ebx+0]
1  5253	    2AC8  72 BA				 jb	 @@1
1  5254	    2ACA  C3				 ret
1  5255
1  5256
1  5257
1  5258					 ;=============================================================================
1  5259	    2ACB			 apply_fixups:
1  5260	    2ACB  66| 51 66| 57		 @@0:	 push	 ecx edi
1  5261	    2ACF  C7 06	34F8r 4005		 mov	 _err_code,4005h	 ; "unrecognized fixup data"
1  5262	    2AD5  67| 8B 0E			 mov	 cx,[esi+0]		 ; get SRC/FLAGS
1  5263	    2AD8  66| 67| 0F BF	56 02		 movsx	 edx,word ptr [esi+2]	 ; get SRCOFF
1  5264	    2ADE  66| 67| 0F B7	46 04		 movzx	 eax,word ptr [esi+4]	 ; get OBJNUM
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 95
dos32a.asm



1  5265	    2AE4  66| 03 FA			 add	 edi,edx		 ; calculate dest addr to be fixed
1  5266	    2AE7  F7 C1	0F20			 test	 cx,0F20h		 ; SrcLists/Imports not	supported
1  5267	    2AEB  0F 85	D9A5			 jnz	 file_errorm		 ; jump	if one of these
1  5268	    2AEF  F7 C1	4000			 test	 cx,4000h		 ; test	if 16bit object	number
1  5269	    2AF3  75 06	90 90			 jnz	 @@1			 ; if yes, jump
1  5270	    2AF7  B4 00				 mov	 ah,0
1  5271	    2AF9  66| 4E			 dec	 esi
1  5272	    2AFB  66| 83 C6 06		 @@1:	 add	 esi,6
1  5273	    2AFF  66| 48			 dec	 eax			 ; Object Number - 1
1  5274	    2B01  66| C1 E0 04			 shl	 eax,4
1  5275	    2B05  66| 8B 16 3690r		 mov	 edx,_app_tmp_addr1
**Error** loader.asm(311) Undefined symbol: @AREA1_DD
1  5276	    2B0A  66| 2B D0			 sub	 edx,eax
1  5277	    2B0D  0F 82	D983			 jc	 file_errorm
1  5278	    2B11  66| 89 16 3694r		 mov	 _app_tmp_addr2,edx
**Error** loader.asm(314) Undefined symbol: @AREA1_DD
1  5279	    2B16  66| 67| 8B 54	15 08		 mov	 edx,[ebp+edx+8]	 ; EDX = Destination Object Address
1  5280	    2B1C  8A C1				 mov	 al,cl
1  5281	    2B1E  24 0F				 and	 al,0Fh
1  5282	    2B20  3C 02				 cmp	 al,02h			 ; check if 16bit Selector
1  5283	    2B22  74 20	90 90			 jz	 @@3			 ; if yes, jump
1  5284	    2B26  3C 08				 cmp	 al,08h
1  5285	    2B28  0F 87	D968			 ja	 file_errorm
1  5286	    2B2C  66| 67| 8B 06			 mov	 eax,[esi]
1  5287	    2B30  F7 C1	1000			 test	 cx,1000h		 ; check for Alias flag
1  5288	    2B34  75 0A	90 90			 jnz	 @@2			 ; if not, jump
1  5289	    2B38  66| 0F B7 C0			 movzx	 eax,ax
1  5290	    2B3C  66| 83 EE 02			 sub	 esi,2
1  5291	    2B40  66| 83 C6 04		 @@2:	 add	 esi,4
1  5292	    2B44  80 F9	07		 @@3:	 cmp	 cl,07h
1  5293	    2B47  75 16	90 90			 jnz	 @@4
1  5294	    2B4B  66| 03 C2			 add	 eax,edx
1  5295	    2B4E  66| 65: 67| 89 07		 mov	 gs:[edi+0],eax
1  5296	    2B53  66| 5F 66| 59		 @@5:	 pop	 edi ecx
1  5297	    2B57  66| 3B F1			 cmp	 esi,ecx
1  5298	    2B5A  0F 82	FF6D			 jb	 @@0
1  5299	    2B5E  C3				 ret
1  5300	    2B5F  56			 @@4:	 push	 si
1  5301	    2B60  8B F1				 mov	 si,cx
1  5302	    2B62  83 E6	0F			 and	 si,0Fh
1  5303	    2B65  03 F6				 add	 si,si
1  5304	    2B67  C7 06	34F8r 4006		 mov	 _err_code,4006h	 ; "16bit fixup	overflow"
1  5305	    2B6D  FF 94	2C1Cr			 call	 fix_tab[si]
1  5306	    2B71  5E				 pop	 si
1  5307	    2B72  EB DF				 jmp	 @@5
1  5308
1  5309					 ;
1  5310					 ; EAX = Data
1  5311					 ; EDX = Address of Object
1  5312					 ; EDI = Address to Fixup
1  5313					 ; EBP:EBX = Ptr to Current Object Table
1  5314					 ;-----------------------------------------------------------------------------
1  5315	    2B74			 fix_byte:
1  5316	    2B74  65: 67| 88 07			 mov	 gs:[edi+0],al
1  5317	    2B78  C3				 ret
1  5318	    2B79			 fix_16off:
1  5319	    2B79  65: 67| 89 07			 mov	 gs:[edi+0],ax
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 96
dos32a.asm



1  5320	    2B7D  C3				 ret
1  5321	    2B7E			 fix_32off:
1  5322	    2B7E  66| 03 C2			 add	 eax,edx
1  5323	    2B81  66| 65: 67| 89 07		 mov	 gs:[edi+0],eax
1  5324	    2B86  C3				 ret
1  5325	    2B87			 fix_32selfrel:
1  5326	    2B87  66| 03 C2			 add	 eax,edx
1  5327	    2B8A  66| 67| 8D 4F	04		 lea	 ecx,[edi+4]
1  5328	    2B8F  66| 2B C1			 sub	 eax,ecx
1  5329	    2B92  67| F7 44 1D 0C 2000		 test	 word ptr [ebp+ebx+12],2000h
1  5330	    2B99  75 17	90 90			 jnz	 @@1
1  5331	    2B9D  66| 67| 8D 88	      +		 lea	 ecx,[eax+8002h]
   5332		  00008002
1  5333	    2BA5  66| C1 E9 10			 shr	 ecx,16
1  5334	    2BA9  0F 85	D8E7			 jnz	 file_errorm
1  5335	    2BAD  65: 67| 89 07			 mov	 gs:[edi+0],ax
1  5336	    2BB1  C3				 ret
1  5337	    2BB2  66| 65: 67| 89 07	 @@1:	 mov	 gs:[edi+0],eax
1  5338	    2BB7  C3				 ret
1  5339	    2BB8			 fix_16sel:
1  5340	    2BB8  E8 0029			 call	 check_range
1  5341	    2BBB  65: 67| 89 17			 mov	 gs:[edi+0],dx
1  5342	    2BBF  C3				 ret
1  5343	    2BC0			 fix_1616ptr:
1  5344	    2BC0  E8 0021			 call	 check_range
1  5345	    2BC3  65: 67| 89 07			 mov	 gs:[edi+0],ax
1  5346	    2BC7  65: 67| 89 57	02		 mov	 gs:[edi+2],dx
1  5347	    2BCC  C3				 ret
1  5348	    2BCD			 fix_1632ptr:
1  5349	    2BCD  66| 03 C2			 add	 eax,edx
1  5350	    2BD0  66| 65: 67| 89 07		 mov	 gs:[edi+0],eax
1  5351	    2BD5  E8 000C			 call	 check_range
1  5352	    2BD8  65: 67| 89 57	04		 mov	 gs:[edi+4],dx
1  5353	    2BDD  C3				 ret
1  5354	    2BDE			 fix_invalid:
1  5355	    2BDE  B8 4005			 mov	 ax,4005h			 ; "unrecognized fixup data"
1  5356	    2BE1  E9 D8AA			 jmp	 file_error
1  5357
1  5358	    2BE4			 check_range:
1  5359	    2BE4  67| F7 44 1D 0C 1000		 test	 word ptr [ebp+ebx+12],1000h	 ; check if 16:16 alias	requird
1  5360	    2BEB  75 14	90 90			 jnz	 @@1				 ; if yes, jump
1  5361	    2BEF  F6 C1	10			 test	 cl,10h
1  5362	    2BF2  75 0D	90 90			 jnz	 @@1
1  5363	    2BF6  66| 8B 0E 3694r	 @@0:	 mov	 ecx,_app_tmp_addr2
**Error** loader.asm(398) Undefined symbol: @AREA1_DD
1  5364	    2BFB  67| 8B 54 0D 0E		 mov	 dx,[ebp+ecx+14]		 ; get selector
1  5365	    2C00  C3				 ret
1  5366	    2C01  F6 C1	10		 @@1:	 test	 cl,10h
1  5367	    2C04  74 F0				 jz	 @@0
1  5368	    2C06  66| 8B 0E 3694r		 mov	 ecx,_app_tmp_addr2
**Error** loader.asm(403) Undefined symbol: @AREA1_DD
1  5369	    2C0B  67| 8B 54 0D 0E		 mov	 dx,[ebp+ecx+14]		 ; get selector
1  5370	    2C10  66| A9 FFFF0000		 test	 eax,0FFFF0000h			 ; check 64K range
1  5371	    2C16  0F 85	D87A			 jnz	 file_errorm
1  5372	    2C1A  C3				 ret
1  5373
1  5374
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 97
dos32a.asm



1  5375	    2C1B  ??				 evendata
1  5376	    2C1C			 fix_tab label word
1  5377	    2C1C  2B74r				 dw	 fix_byte		 ; 00h
1  5378	    2C1E  2BDEr				 dw	 fix_invalid		 ; 01h
1  5379	    2C20  2BB8r				 dw	 fix_16sel		 ; 02h
1  5380	    2C22  2BC0r				 dw	 fix_1616ptr		 ; 03h
1  5381	    2C24  2BDEr				 dw	 fix_invalid		 ; 04h
1  5382	    2C26  2B79r				 dw	 fix_16off		 ; 05h
1  5383	    2C28  2BCDr				 dw	 fix_1632ptr		 ; 06h
1  5384	    2C2A  2B7Er				 dw	 fix_32off		 ; 07h
1  5385	    2C2C  2B87r				 dw	 fix_32selfrel		 ; 08h
1  5386
1  5387
1  5388
1  5389
1  5390
1  5391
1  5392
1  5393
1  5394					 ;-----------------------------------------------------------------------------
1  5395					 ; In:	 ECX = size
1  5396					 ; Out:	 EDI = address
1  5397					 ;
1  5398	    2C2E			 fill_zero_pages:
1  5399	    2C2E  06 52	66| 50 66| 51 +		 push	 es dx eax ecx edi
   5400		  66| 57
1  5401	    2C36  0F A8				 push	 gs
1  5402	    2C38  07				 pop	 es
1  5403	    2C39  8A D1				 mov	 dl,cl
1  5404	    2C3B  66| C1 E9 02			 shr	 ecx,2
1  5405	    2C3F  66| 33 C0			 xor	 eax,eax
1  5406	    2C42  F3> 66| 67| AB		 rep	 stos dword ptr	es:[edi]
1  5407	    2C46  8A CA				 mov	 cl,dl
1  5408	    2C48  80 E1	03			 and	 cl,3
1  5409	    2C4B  F3> 67| AA			 rep	 stos byte ptr es:[edi]
1  5410	    2C4E  66| 5F 66| 59	66| 58+		 pop	 edi ecx eax dx	es
   5411		  5A 07
1  5412	    2C56  C3				 ret
1  5413
1  5414
1  5415					 ;-----------------------------------------------------------------------------
1  5416					 ; In:	 EAX = size
1  5417					 ; Out:	 EDI = address
1  5418					 ;
1  5419	    2C57			 alloc_block:
1  5420	    2C57  52				 push	 dx
1  5421	    2C58  66| 85 C0			 test	 eax,eax		 ; if size of Object is	zero
1  5422	    2C5B  74 21	90 90			 jz	 @@null			 ; then	report a warning 9005
1  5423	    2C5F  8A 16	34ECr			 mov	 dl,_misc_byte		 ; get misc byte
1  5424	    2C63  C1 EA	04			 shr	 dx,4			 ; get memory alloc bits in bit1,0
1  5425	    2C66  83 E2	03			 and	 dx,3			 ; mask	them
1  5426	    2C69  74 27	90 90			 jz	 @@00			 ; if 00b alloc	scheme,	jump
1  5427	    2C6D  4A				 dec	 dx
1  5428	    2C6E  74 35	90 90			 jz	 @@01
1  5429	    2C72  4A				 dec	 dx
1  5430	    2C73  74 51	90 90			 jz	 @@10
1  5431	    2C77  4A				 dec	 dx
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 98
dos32a.asm



1  5432	    2C78  74 5A	90 90			 jz	 @@11
1  5433	    2C7C  5A			 @@done: pop	 dx
1  5434	    2C7D  C3				 ret
1  5435	    2C7E  50 56			 @@null: push	 ax si
1  5436	    2C80  67| 8B 74 24 0C		 mov	 si,[esp+0Ch]
1  5437	    2C85  B8 9005			 mov	 ax,9005h
1  5438	    2C88  E8 D5E6			 call	 report_error
1  5439	    2C8B  5E 58	5A			 pop	 si ax dx
1  5440	    2C8E  66| 33 FF			 xor	 edi,edi
1  5441	    2C91  C3				 ret
1  5442
1  5443					 ;
1  5444					 ; load	16bit/32bit -> low, then high, then error
1  5445					 ;---------------------------------------
1  5446	    2C92  E8 004D		 @@00:	 call	 alloc_dos_mem		 ; try to allocate DOS memory block
1  5447	    2C95  73 E5				 jnc	 @@done			 ; if allocated, jump
1  5448	    2C97  C7 06	34F8r 4003		 mov	 _err_code,4003h	 ; "not	enough DPMI mem"
1  5449	    2C9D  E8 0087			 call	 alloc_dpmi_mem		 ; try to allocate DPMI	memory block
1  5450	    2CA0  73 DA				 jnc	 @@done			 ; if allocated, jump
1  5451	    2CA2  E9 D7EF			 jmp	 file_errorm		 ; if failed, error
1  5452					 ;
1  5453					 ; load	16bit -> low, then high, then error
1  5454					 ; load	32bit -> high only, then error
1  5455					 ;---------------------------------------
1  5456	    2CA5  F7 C1	2000		 @@01:	 test	 cx,2000h		 ; check if 32bit Object
1  5457	    2CA9  75 0D	90 90			 jnz	 @@01_1			 ; if yes, jump
1  5458	    2CAD  C7 06	34F8r 4002		 mov	 _err_code,4002h	 ; "not	enough DOS mem"
1  5459	    2CB3  E8 002C			 call	 alloc_dos_mem
1  5460	    2CB6  73 C4				 jnc	 @@done			 ; if allocated, jump
1  5461	    2CB8  C7 06	34F8r 4003	 @@01_1: mov	 _err_code,4003h	 ; "not	enough DPMI mem"
1  5462	    2CBE  E8 0066			 call	 alloc_dpmi_mem
1  5463	    2CC1  73 B9				 jnc	 @@done			 ; if allocated, jump
1  5464	    2CC3  E9 D7CE			 jmp	 file_errorm		 ; if failed, error
1  5465					 ;
1  5466					 ; load	16bit/32bit low, then error
1  5467					 ;---------------------------------------
1  5468	    2CC6  C7 06	34F8r 4002	 @@10:	 mov	 _err_code,4002h	 ; "not	enough DOS mem"
1  5469	    2CCC  E8 0013			 call	 alloc_dos_mem
1  5470	    2CCF  73 AB				 jnc	 @@done
1  5471	    2CD1  E9 D7C0			 jmp	 file_errorm		 ; if failed, error
1  5472					 ;
1  5473					 ; load	16bit/32bit high, then error
1  5474					 ;---------------------------------------
1  5475	    2CD4  C7 06	34F8r 4003	 @@11:	 mov	 _err_code,4003h	 ; "not	enough DPMI mem"
1  5476	    2CDA  E8 004A			 call	 alloc_dpmi_mem
1  5477	    2CDD  73 9D				 jnc	 @@done
1  5478	    2CDF  E9 D7B2			 jmp	 file_errorm		 ; if failed, error
1  5479
1  5480
1  5481
1  5482
1  5483					 ;-----------------------------------------------------------------------------
1  5484	    2CE2			 alloc_dos_mem:
1  5485	    2CE2  66| 50 66| 55			 push	 eax ebp		 ; EAX = size to allocate
1  5486	    2CE6  66| 83 C0 0F			 add	 eax,0Fh		 ; align size on para
1  5487	    2CEA  66| C1 E8 04			 shr	 eax,4
1  5488	    2CEE  66| A9 FFFF0000		 test	 eax,0FFFF0000h		 ; check high word of EAX
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 99
dos32a.asm



1  5489	    2CF4  F9				 stc
1  5490	    2CF5  75 2B	90 90			 jnz	 @@done
1  5491	    2CF9  66| 83 EC 32			 sub	 esp,32h
1  5492	    2CFD  66| 8B EC			 mov	 ebp,esp
1  5493	    2D00  67| C6 45 1D 48		 mov	 byte ptr [ebp+1Dh],48h	 ; DOS func: AH=48h
1  5494	    2D05  67| 89 45 10			 mov	 word ptr [ebp+10h],ax	 ; DOS BX=size
1  5495	    2D09  E8 D90B			 call	 int21h
1  5496	    2D0C  66| 67| 0F B7	7D 1C		 movzx	 edi,word ptr [ebp+1Ch]	 ; get returned	value in EAX
1  5497	    2D12  66| C1 E7 04			 shl	 edi,4			 ; NOTE: addres	is relative to 0
1  5498	    2D16  67| 0F BA 65 20 00		 bt	 word ptr [ebp+20h],0	 ; check for errors
1  5499	    2D1C  66| 67| 8D 64	24 32		 lea	 esp,[esp+32h]
1  5500	    2D22  66| 5D 66| 58		 @@done: pop	 ebp eax
1  5501	    2D26  C3				 ret
1  5502
1  5503					 ;-----------------------------------------------------------------------------
1  5504	    2D27			 alloc_dpmi_mem:
1  5505	    2D27  66| 56 66| 53	66| 51+		 push	 esi ebx ecx edx eax
   5506		  66| 52 66| 50
1  5507	    2D31  66| 8B D8			 mov	 ebx,eax
1  5508	    2D34  B8 FF91			 mov	 ax,0FF91h		 ; allocate DPMI memory
1  5509	    2D37  CD 21				 int	 21h
1  5510	    2D39  72 75	90 90			 jc	 @@done
1  5511	    2D3D  66| 8B C3			 mov	 eax,ebx
1  5512	    2D40  66| 33 D2			 xor	 edx,edx
1  5513	    2D43  F6 06	34EDr 04 90		 test	 _misc_byte2,00000100b	 ; check if para or page alignment
1  5514	    2D49  75 0B	90 90			 jnz	 @@l1
1  5515	    2D4D  A8 0F				 test	 al,0Fh
1  5516	    2D4F  74 3F	90 90			 jz	 @@1
1  5517	    2D53  EB 08	90			 jmp	 @@l2
1  5518	    2D56  A9 0FFF		 @@l1:	 test	 ax,0FFFh		 ; check if returned addr aligned
1  5519	    2D59  74 35	90 90			 jz	 @@1			 ; on PAGE boundary, if	yes, jump
1  5520	    2D5D  F6 06	34EDr 04 90	 @@l2:	 test	 _misc_byte2,00000100b
1  5521	    2D63  75 0C	90 90			 jnz	 @@l3
1  5522	    2D67  66| 83 C3 0F			 add	 ebx,0Fh
1  5523	    2D6B  80 E3	F0			 and	 bl,0F0h
1  5524	    2D6E  EB 0C	90			 jmp	 @@l4
1  5525	    2D71  66| 81 C3 00000FFF	 @@l3:	 add	 ebx,0FFFh
1  5526	    2D78  81 E3	F000			 and	 bx,0F000h		 ; align linear	addr on	PAGE boundary
1  5527	    2D7C  66| 2B D8		 @@l4:	 sub	 ebx,eax		 ; calculate difference
1  5528	    2D7F  66| 8B D3			 mov	 edx,ebx
1  5529	    2D82  66| 67| 03 1C	24		 add	 ebx,[esp]
1  5530	    2D87  B8 FF93			 mov	 ax,0FF93h		 ; resize DPMI memory block
1  5531	    2D8A  CD 21				 int	 21h
1  5532	    2D8C  72 22	90 90			 jc	 @@done
1  5533	    2D90  66| 67| 8D 3C	13	 @@1:	 lea	 edi,[ebx+edx]		 ; adjust linear address
1  5534	    2D95  F6 06	34EDr 04 90		 test	 _misc_byte2,00000100b
1  5535	    2D9B  75 09	90 90			 jnz	 @@l5
1  5536	    2D9F  F7 C7	000F			 test	 di,000Fh
1  5537	    2DA3  EB 05	90			 jmp	 @@l6
1  5538	    2DA6  F7 C7	0FFF		 @@l5:	 test	 di,0FFFh
1  5539	    2DAA  F9			 @@l6:	 stc
1  5540	    2DAB  75 03	90 90			 jnz	 @@done
1  5541	    2DAF  F8				 clc
1  5542	    2DB0  66| 58 66| 5A	66| 59+	 @@done: pop	 eax edx ecx ebx esi
   5543		  66| 5B 66| 5E
1  5544	    2DBA  C3				 ret
1  5545
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 100
dos32a.asm



1  5546
1  5547
1  5548					 ;-----------------------------------------------------------------------------
1  5549	    2DBB			 create_selector:
1  5550	    2DBB  66| 53 66| 51	66| 52+		 push	 ebx ecx edx esi edi
   5551		  66| 56 66| 57
1  5552	    2DC5  8B C2				 mov	 ax,dx
1  5553	    2DC7  66| 8B CD			 mov	 ecx,ebp		 ; ECX = Virtual Size[Object]
1  5554	    2DCA  8B 16	34FAr			 mov	 dx,_acc_rights		 ; default: PAGE, USE32, DATA
1  5555	    2DCE  A8 04				 test	 al,0004h		 ; check if object is executable
1  5556	    2DD0  74 05	90 90			 jz	 @@1			 ; if not, jump
1  5557	    2DD4  80 CA	08			 or	 dl,0008h		 ; set selector	to Code
1  5558	    2DD7  A9 2000		 @@1:	 test	 ax,2000h		 ; check if object is 32bit
1  5559	    2DDA  74 1E	90 90			 jz	 @@2			 ; if not, jump
1  5560	    2DDE  66| 33 FF			 xor	 edi,edi		 ; set base to Zero
1  5561	    2DE1  66| 83 C9 FF			 or	 ecx,-1			 ; set limit to	4Gb
1  5562
1  5563	    2DE5  A8 04				 test	 al,0004h		 ; check if code or data Object
1  5564	    2DE7  A1 3532r			 mov	 ax,_sel32_cs		 ; AX =	32bit code selector
1  5565	    2DEA  75 05	90 90			 jnz	 @@0			 ; if code, then jump
1  5566	    2DEE  A1 3536r			 mov	 ax,_sel32_ss		 ; AX =	32bit data selector
1  5567	    2DF1  85 C0			 @@0:	 test	 ax,ax			 ; check if already allocated
1  5568	    2DF3  75 10	90 90			 jnz	 @@4			 ; if yes, use this selector
1  5569	    2DF7  EB 05	90			 jmp	 @@3
1  5570
1  5571	    2DFA  81 E2	BFFF		 @@2:	 and	 dx,0BFFFh		 ; set selector	to 16bit
1  5572	    2DFE  E8 D7AB		 @@3:	 call	 set_descriptor		 ; allocate selector
1  5573	    2E01  0F 82	D69D			 jc	 dpmi_error
1  5574	    2E05  66| 5F 66| 5E		 @@4:	 pop	 edi esi
1  5575	    2E09  67| 89 44 24 02		 mov	 [esp+2],ax		 ; store selector in high word of EDX
1  5576	    2E0E  66| 5A 66| 59	66| 5B		 pop	 edx ecx ebx
1  5577	    2E14  67| 89 04 4D	      +		 mov	 _app_buf_allocsel[ecx*2],ax
   5578		  00000074r
1  5579	    2E1C  66| 67| 89 3C	8D    +		 mov	 _app_buf_allocbase[ecx*4],edi
   5580		  000000F4r
1  5581
1  5582	    2E25  3B 0E	36B4r			 cmp	 cx,word ptr _app_eip_object; is Current_Object# == EIP_Object#
**Error** loader.asm(610) Undefined symbol: @AREA1_DD
1  5583	    2E29  75 17	90 90			 jnz	 @@l1			 ; if not, jump
1  5584	    2E2D  A3 3532r			 mov	 _sel32_cs,ax
1  5585	    2E30  66| 89 3E 36C4r		 mov	 _unreloc_eip,edi
**Error** loader.asm(613) Undefined symbol: @AREA1_DD
1  5586	    2E35  F7 C2	2000			 test	 dx,2000h		 ; check if Object is 32bit
1  5587	    2E39  74 07	90 90			 jz	 @@l1			 ; if not, leave _APP_EIP as is
1  5588	    2E3D  66| 01 3E 36BCr		 add	 _app_eip,edi
**Error** loader.asm(616) Undefined symbol: @AREA1_DD
1  5589
1  5590	    2E42  3B 0E	36B8r		 @@l1:	 cmp	 cx,word ptr _app_esp_object; is Current_Object# == ESP_Object#
**Error** loader.asm(618) Undefined symbol: @AREA1_DD
1  5591	    2E46  75 0F	90 90			 jnz	 @@l2			 ; if not, jump
1  5592	    2E4A  A3 3536r			 mov	 _sel32_ss,ax
1  5593	    2E4D  66| 89 3E 36C8r		 mov	 _unreloc_esp,edi
**Error** loader.asm(621) Undefined symbol: @AREA1_DD
1  5594	    2E52  66| 01 3E 36C0r		 add	 _app_esp,edi		 ; adjust ESP
**Error** loader.asm(622) Undefined symbol: @AREA1_DD
1  5595	    2E57  C3			 @@l2:	 ret
1  5596
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 101
dos32a.asm



1  5597
1  5598	    2E58			 preload_fixups:
1  5599	    2E58  80 3E	36E8r 02		 cmp	 _app_type,2
**Error** loader.asm(627) Undefined symbol: @AREA1_DB
*Warning* loader.asm(627) Argument needs type override
1  5600	    2E5D  0F 84	0155			 jz	 preload_lc_fixups
1  5601
1  5602	    2E61  66| 8B 1E 36CCr		 mov	 ebx,_app_siz_fixrecstab ; allocate memory for fixups
**Error** loader.asm(630) Undefined symbol: @AREA1_DD
1  5603	    2E66  C6 06	36E9r 00 90		 mov	 _app_load,0		 ; default load	fixups low
**Error** loader.asm(631) Undefined symbol: @AREA1_DB
*Warning* loader.asm(631) Argument needs type override
1  5604	    2E6C  B8 FF95			 mov	 ax,0FF95h
1  5605	    2E6F  CD 21				 int	 21h
1  5606	    2E71  73 13	90 90			 jnc	 @@1
1  5607	    2E75  C6 06	36E9r 01 90		 mov	 _app_load,1		 ; try load fixups hi
**Error** loader.asm(635) Undefined symbol: @AREA1_DB
*Warning* loader.asm(635) Argument needs type override
1  5608	    2E7B  B0 91				 mov	 al,91h
1  5609	    2E7D  CD 21				 int	 21h
1  5610	    2E7F  B8 4004			 mov	 ax,4004h
1  5611	    2E82  0F 82	D608			 jc	 file_error		 ; if not enough memory, error
1  5612	    2E86  66| 89 36 36D0r	 @@1:	 mov	 _app_buf_fixrecstab,esi
**Error** loader.asm(640) Undefined symbol: @AREA1_DD
1  5613
1  5614	    2E8B  C7 06	34F8r 3002		 mov	 _err_code,3002h	 ; "error in app file"
1  5615	    2E91  66| 8B 16 36A4r		 mov	 edx,_app_off_fixpagetab ; move	file ptr to fixups
**Error** loader.asm(643) Undefined symbol: @AREA1_DD
1  5616	    2E96  E8 DD36			 call	 seek_from_start
1  5617	    2E99  66| 8B D3			 mov	 edx,ebx
1  5618	    2E9C  66| 8B 0E 36CCr		 mov	 ecx,_app_siz_fixrecstab
**Error** loader.asm(646) Undefined symbol: @AREA1_DD
1  5619	    2EA1  E8 DD57			 call	 load_gs_block
1  5620
1  5621	    2EA4  66| A1 36A8r			 mov	 eax,_app_off_fixrectab
**Error** loader.asm(649) Undefined symbol: @AREA1_DD
1  5622	    2EA8  66| 8B 1E 36A4r		 mov	 ebx,_app_off_fixpagetab
**Error** loader.asm(650) Undefined symbol: @AREA1_DD
1  5623	    2EAD  66| 2B C3			 sub	 eax,ebx
1  5624	    2EB0  66| 03 C2			 add	 eax,edx
1  5625	    2EB3  66| 89 16 36A4r		 mov	 _app_off_fixpagetab,edx
**Error** loader.asm(653) Undefined symbol: @AREA1_DD
1  5626	    2EB8  66| A3 36A8r			 mov	 _app_off_fixrectab,eax
**Error** loader.asm(654) Undefined symbol: @AREA1_DD
1  5627	    2EBC  C3				 ret
1  5628
1  5629
1  5630	    2EBD			 unload_fixups:
1  5631	    2EBD  80 3E	36E8r 02		 cmp	 _app_type,2
**Error** loader.asm(659) Undefined symbol: @AREA1_DB
*Warning* loader.asm(659) Argument needs type override
1  5632	    2EC2  0F 84	0173			 jz	 unload_lc_fixups
1  5633
1  5634	    2EC6  66| 8B 36 36D0r		 mov	 esi,_app_buf_fixrecstab
**Error** loader.asm(662) Undefined symbol: @AREA1_DD
1  5635	    2ECB  B8 FF96			 mov	 ax,0FF96h
1  5636	    2ECE  80 3E	36E9r 00		 cmp	 _app_load,0
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 102
dos32a.asm



**Error** loader.asm(664) Undefined symbol: @AREA1_DB
*Warning* loader.asm(664) Argument needs type override
1  5637	    2ED3  74 04	90 90			 jz	 @@1
1  5638	    2ED7  B0 92				 mov	 al,92h
1  5639	    2ED9  CD 21			 @@1:	 int	 21h
1  5640	    2EDB  C3				 ret
1  5641
1  5642
1  5643					 PopState
1  5644
1  5645
   5646					 include loadlc.asm
1  5647					 ;
1  5648					 ; Copyright (C) 1996-2002 Supernar Systems, Ltd. All rights reserved.
1  5649					 ;
1  5650					 ; Redistribution  and	use  in	source and  binary  forms, with	or without
1  5651					 ; modification,  are permitted	provided that the following conditions are
1  5652					 ; met:
1  5653					 ;
1  5654					 ; 1.  Redistributions	of  source code	 must  retain  the above copyright
1  5655					 ; notice, this	list of	conditions and the following disclaimer.
1  5656					 ;
1  5657					 ; 2.  Redistributions	in binary form	must reproduce the above copyright
1  5658					 ; notice,  this  list of conditions and  the  following disclaimer in the
1  5659					 ; documentation and/or	other materials	provided with the distribution.
1  5660					 ;
1  5661					 ; 3. The end-user documentation included with the redistribution, if any,
1  5662					 ; must	include	the following acknowledgment:
1  5663					 ;
1  5664					 ; "This product uses DOS/32 Advanced DOS Extender technology."
1  5665					 ;
1  5666					 ; Alternately,	 this acknowledgment may appear	in the software	itself,	if
1  5667					 ; and wherever	such third-party acknowledgments normally appear.
1  5668					 ;
1  5669					 ; 4.  Products	derived	from this software  may	not be called "DOS/32A"	or
1  5670					 ; "DOS/32 Advanced".
1  5671					 ;
1  5672					 ; THIS	 SOFTWARE AND DOCUMENTATION IS PROVIDED	 "AS IS" AND ANY EXPRESSED
1  5673					 ; OR  IMPLIED	WARRANTIES,  INCLUDING,	BUT  NOT  LIMITED  TO, THE IMPLIED
1  5674					 ; WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
1  5675					 ; DISCLAIMED.	IN  NO	EVENT SHALL THE	 AUTHORS  OR  COPYRIGHT	HOLDERS	BE
1  5676					 ; LIABLE  FOR	ANY DIRECT, INDIRECT,  INCIDENTAL,  SPECIAL, EXEMPLARY,	OR
1  5677					 ; CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT NOT	LIMITED	TO, PROCUREMENT	OF
1  5678					 ; SUBSTITUTE  GOODS  OR  SERVICES;  LOSS OF  USE,  DATA,  OR  PROFITS;	OR
1  5679					 ; BUSINESS  INTERRUPTION) HOWEVER CAUSED AND  ON ANY THEORY OF	LIABILITY,
1  5680					 ; WHETHER IN CONTRACT,	STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE	OR
1  5681					 ; OTHERWISE)  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN	IF
1  5682					 ; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
1  5683					 ;
1  5684					 ;
1  5685
1  5686					 ;*****************************************************************************
1  5687					 ; DOS/32A LC-style 32-bit (compressed)	application loader
1  5688					 ;
1  5689					 ;*****************************************************************************
1  5690
1  5691					 ;-----------------------------------------------------------------------------
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 103
dos32a.asm



1  5692					 ; LC Header Format
1  5693					 ;
1  5694					 ;	 0000	 DD	 "LC" \0\0
1  5695					 ;	 0004	 DB	 # of Objects
1  5696					 ;	 0005	 DB	 LC-flags
1  5697					 ;			   bit0..3: LC implementation version
1  5698					 ;			   bit4..7: reserved
1  5699					 ;	 0006	 DB	 EIP Object #
1  5700					 ;	 0007	 DB	 ESP Object #
1  5701					 ;	 0008	 DD	 EIP Offset
1  5702					 ;	 000C	 DD	 ESP Offset
1  5703					 ;	 0010	 ...	 ...Object #1 Header follows...
1  5704					 ;
1  5705					 ;-----------------------------------------------------------------------------
1  5706					 ; Object Header Format
1  5707					 ;
1  5708					 ;	 0000	 DD	 Virtual Size (Uncompressed Size)
1  5709					 ;			   bit31: 0=encoded, 1=not encoded
1  5710					 ;	 0004	 DD	 Compressed Size
1  5711					 ;	 0008	 DW	 Object	Flags
1  5712					 ;	 000A	 DW	 Extended Object Flags
1  5713					 ;	 000C	 DW	 Page Table Index
1  5714					 ;	 000E	 DW	 # of Page Table Entries
1  5715					 ;	 0010	 ...	 ...Object Data	follows...
1  5716					 ;
1  5717					 ;-----------------------------------------------------------------------------
1  5718					 ;
1  5719					 ; Fixups Header Format
1  5720					 ;
1  5721					 ;	 0000	 DD	 Uncompresed Size
1  5722					 ;			   bit31: 0=encoded, 1=not encoded
1  5723					 ;	 0004	 DD	 Compressed Size
1  5724					 ;	 0008	 DD	 Fixup Record Table Offset
1  5725					 ;	 000C	 ...	 ...Fixup Page Table Data ...
1  5726					 ; 000C+[0008]	 ...	 ...Fixup Record Table Data ...
1  5727					 ;
1  5728
1  5729		  =0004			 LC_SPECVER	 equ 04h
1  5730
1  5731					 ;=============================================================================
1  5732	    2EDC			 load_lc_header:
1  5733	    2EDC  B1 0C				 mov	 cl,0Ch			 ; load	'LC' header
1  5734	    2EDE  E8 DD12			 call	 load_fs_block
1  5735	    2EE1  66| 33 C0			 xor	 eax,eax
1  5736	    2EE4  64: A0 0004			 mov	 al,fs:[0004h]		 ; get # Objects
1  5737	    2EE8  66| A3 3698r			 mov	 _app_num_objects,eax
**Error** loadlc.asm(91) Undefined symbol: @AREA1_DD
1  5738	    2EEC  64: A0 0006			 mov	 al,fs:[0006h]		 ; get EIP Object #
1  5739	    2EF0  66| A3 36B4r			 mov	 _app_eip_object,eax
**Error** loadlc.asm(93) Undefined symbol: @AREA1_DD
1  5740	    2EF4  64: A0 0007			 mov	 al,fs:[0007h]		 ; get ESP Object #
1  5741	    2EF8  66| A3 36B8r			 mov	 _app_esp_object,eax
**Error** loadlc.asm(95) Undefined symbol: @AREA1_DD
1  5742	    2EFC  66| 64: A1 0008		 mov	 eax,fs:[0008h]		 ; get EIP
1  5743	    2F01  66| A3 36BCr			 mov	 _app_eip,eax
**Error** loadlc.asm(97) Undefined symbol: @AREA1_DD
1  5744	    2F05  66| 64: A1 000C		 mov	 eax,fs:[000Ch]		 ; get ESP
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 104
dos32a.asm



1  5745	    2F0A  66| A3 36C0r			 mov	 _app_esp,eax
**Error** loadlc.asm(99) Undefined symbol: @AREA1_DD
1  5746	    2F0E  64: A0 0005			 mov	 al,fs:[0005h]
1  5747	    2F12  24 0F				 and	 al,0Fh
1  5748	    2F14  3C 04				 cmp	 al,LC_SPECVER		 ; check LC implementation version
1  5749	    2F16  B8 3006			 mov	 ax,3006h		 ; "exec not supported"
1  5750	    2F19  0F 85	D571			 jnz	 file_error
1  5751	    2F1D  B8 4007			 mov	 ax,4007h		 ; "not	enough DOS Transfer Buffer"
1  5752	    2F20  66| 81 3E 3546r     +		 cmp	 _lobufsize,2000h	 ; must	be at least 8KB
   5753		  00002000
**Error** loadlc.asm(106) Forward reference needs override
1  5754	    2F26  0F 82	D564			 jb	 file_error
1  5755	    2F2A  C3				 ret
1  5756
1  5757
1  5758
1  5759					 ;-----------------------------------------------------------------------------
1  5760	    2F2B			 load_lc_object:
1  5761	    2F2B  66| B9 00000010		 mov	 ecx,10h
1  5762	    2F31  66| 33 D2			 xor	 edx,edx
1  5763	    2F34  C7 06	34F8r 3002		 mov	 _err_code,3002h	 ; "error in app file"
1  5764	    2F3A  E8 DCB6			 call	 load_fs_block		 ; load	object header
1  5765	    2F3D  66| 64: A1 0000		 mov	 eax,fs:[0000h]		 ; get Virtual_Size[Object]
1  5766	    2F42  66| 0F BA F0 1F		 btr	 eax,31			 ; check if encoded and	clear bit "31"
1  5767	    2F47  0F 92	06 36D8r		 setc	 _ic_byte		 ; if not encoded, set _ic_byte	to "1"
**Error** loadlc.asm(120) Undefined symbol: @AREA1_DB
1  5768	    2F4C  66| 50			 push	 eax
1  5769	    2F4E  E8 FD06			 call	 alloc_block		 ; allocate EAX	memory block to	EDI
1  5770	    2F51  66| 8B C8			 mov	 ecx,eax		 ; ECX = bytes to read
1  5771	    2F54  66| 8B D7			 mov	 edx,edi		 ; EDX = address to read to
1  5772	    2F57  E8 FCD4			 call	 fill_zero_pages	 ; fill	allocated memory with zeroes
1  5773	    2F5A  C7 06	34F8r 3002		 mov	 _err_code,3002h	 ; "error in app file"
1  5774	    2F60  66| 64: 8B 1E	0004		 mov	 ebx,fs:[0004h]		 ; EBX = compressed data size
1  5775	    2F66  66| 8B CB			 mov	 ecx,ebx
1  5776	    2F69  67| E3 30			 jecxz	 @@done			 ; skip	null-size Objects
1  5777	    2F6C  80 3E	36D8r 00		 cmp	 _ic_byte,0
**Error** loadlc.asm(130) Undefined symbol: @AREA1_DB
*Warning* loadlc.asm(130) Argument needs type override
1  5778	    2F71  75 26	90 90			 jnz	 @@1
1  5779	    2F75  B8 FF91			 mov	 ax,0FF91h
1  5780	    2F78  CD 21				 int	 21h
1  5781	    2F7A  B8 4003			 mov	 ax,4003h		 ; "not	enough extended	memory"
1  5782	    2F7D  0F 82	D50D			 jc	 file_error
1  5783	    2F81  66| 89 36 36D0r		 mov	 _app_buf_fixrecstab,esi ; preserve memory block handle
**Error** loadlc.asm(136) Undefined symbol: @AREA1_DD
1  5784	    2F86  66| 8B D3			 mov	 edx,ebx
1  5785	    2F89  E8 00B8			 call	 decompress_data
1  5786	    2F8C  B8 FF92			 mov	 ax,0FF92h
1  5787	    2F8F  66| 8B 36 36D0r		 mov	 esi,_app_buf_fixrecstab
**Error** loadlc.asm(140) Undefined symbol: @AREA1_DD
1  5788	    2F94  CD 21				 int	 21h
1  5789	    2F96  EB 04	90			 jmp	 @@done
1  5790	    2F99  E8 DC5F		 @@1:	 call	 load_gs_block
1  5791	    2F9C  66| 5D		 @@done: pop	 ebp			 ; get Virtual_Size[Object]
1  5792	    2F9E  66| 64: 0F B7	1E    +		 movzx	 ebx,word ptr fs:[000Eh] ; get # Page Table Entries
   5793		  000E
1  5794	    2FA5  66| 64: 0F B7	16    +		 movzx	 edx,word ptr fs:[0008h] ; get Flags[Object]
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 105
dos32a.asm



   5795		  0008
1  5796	    2FAC  66| 64: 0F B7	36    +		 movzx	 esi,word ptr fs:[000Ch] ; get Page Table Index
   5797		  000C
1  5798	    2FB3  66| 59			 pop	 ecx
1  5799	    2FB5  C3				 ret
1  5800
1  5801
1  5802
1  5803	    2FB6			 preload_lc_fixups:
1  5804	    2FB6  66| B9 0000000C		 mov	 ecx,0Ch
1  5805	    2FBC  66| 33 D2			 xor	 edx,edx
1  5806	    2FBF  C7 06	34F8r 3002		 mov	 _err_code,3002h	 ; "error in app file"
1  5807	    2FC5  E8 DC2B			 call	 load_fs_block		 ; load	LC Fixup Header
1  5808	    2FC8  B8 FF91			 mov	 ax,0FF91h		 ; alloc memory	for Decoded fixups
1  5809	    2FCB  66| 64: 8B 1E	0000		 mov	 ebx,fs:[0000h]
1  5810	    2FD1  66| 0F BA F3 1F		 btr	 ebx,31			 ; check if encoded and	clear bit "31"
1  5811	    2FD6  0F 92	06 36D8r		 setc	 _ic_byte		 ; if not encoded, set _ic_byte	to "1"
**Error** loadlc.asm(161) Undefined symbol: @AREA1_DB
1  5812	    2FDB  66| 8B CB			 mov	 ecx,ebx
1  5813	    2FDE  66| 43			 inc	 ebx			 ; prevent error when EBX = 0
1  5814	    2FE0  CD 21				 int	 21h
1  5815	    2FE2  B8 4003			 mov	 ax,4003h
1  5816	    2FE5  0F 82	D4A5			 jc	 file_error
1  5817	    2FE9  66| 8B D3			 mov	 edx,ebx
1  5818	    2FEC  66| 8B FB			 mov	 edi,ebx
1  5819	    2FEF  66| 89 36 36D0r		 mov	 _app_buf_fixrecstab,esi
**Error** loadlc.asm(169) Undefined symbol: @AREA1_DD
1  5820	    2FF4  E8 FC37			 call	 fill_zero_pages	 ; fill	allocated memory with zeroes
1  5821	    2FF7  66| 64: 8B 1E	0004		 mov	 ebx,fs:[0004h]
1  5822	    2FFD  66| 8B CB			 mov	 ecx,ebx
1  5823	    3000  80 3E	36D8r 00		 cmp	 _ic_byte,0
**Error** loadlc.asm(173) Undefined symbol: @AREA1_DB
*Warning* loadlc.asm(173) Argument needs type override
1  5824	    3005  75 1E	90 90			 jnz	 @@1
1  5825	    3009  B8 FF91			 mov	 ax,0FF91h		 ; alloc memory	for Encoded fixups
1  5826	    300C  66| 43			 inc	 ebx			 ; prevent error when EBX = 0
1  5827	    300E  CD 21				 int	 21h
1  5828	    3010  B8 4003			 mov	 ax,4003h
1  5829	    3013  0F 82	D477			 jc	 file_error
1  5830	    3017  66| 8B D3			 mov	 edx,ebx
1  5831	    301A  E8 0027			 call	 decompress_data
1  5832	    301D  B8 FF92			 mov	 ax,0FF92h
1  5833	    3020  CD 21				 int	 21h
1  5834	    3022  EB 04	90			 jmp	 @@done
1  5835	    3025  E8 DBD3		 @@1:	 call	 load_gs_block
1  5836	    3028  66| 89 3E 36A4r	 @@done: mov	 _app_off_fixpagetab,edi
**Error** loadlc.asm(186) Undefined symbol: @AREA1_DD
1  5837	    302D  66| 64: 03 3E	0008		 add	 edi,fs:[0008h]
1  5838	    3033  66| 89 3E 36A8r		 mov	 _app_off_fixrectab,edi
**Error** loadlc.asm(188) Undefined symbol: @AREA1_DD
1  5839	    3038  C3				 ret
1  5840
1  5841	    3039			 unload_lc_fixups:
1  5842	    3039  B8 FF92			 mov	 ax,0FF92h
1  5843	    303C  66| 8B 36 36D0r		 mov	 esi,_app_buf_fixrecstab
**Error** loadlc.asm(193) Undefined symbol: @AREA1_DD
1  5844	    3041  CD 21				 int	 21h
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 106
dos32a.asm



1  5845	    3043  C3				 ret
1  5846
1  5847
1  5848
1  5849					 ;=============================================================================
1  5850					 ; EBX = source	address
1  5851					 ; EDI = destination address
1  5852					 ; ECX = size of source
1  5853					 ;
1  5854	    3044			 decompress_data:
1  5855	    3044  E8 DBB4			 call	 load_gs_block
1  5856
1  5857	    3047			 decompress:
1  5858	    3047  66| 60			 pushad
1  5859	    3049  C6 06	36E9r 00 90		 mov	 _xc_byte,0
**Error** loadlc.asm(209) Undefined symbol: @AREA1_DB
*Warning* loadlc.asm(209) Argument needs type override
1  5860	    304F  66| 89 1E 3690r		 mov	 _srcaddr,ebx
**Error** loadlc.asm(210) Undefined symbol: @AREA1_DD
1  5861	    3054  66| 89 0E 3694r		 mov	 _codesize,ecx
**Error** loadlc.asm(211) Undefined symbol: @AREA1_DD
1  5862	    3059  66| 57			 push	 edi
1  5863	    305B  66| 8B 0E 3546r		 mov	 ecx,_lobufsize
1  5864	    3060  66| 8B 36 3542r		 mov	 esi,_lobufbase
1  5865	    3065  66| 8B 3E 353Er		 mov	 edi,_lobufzero
1  5866	    306A  E8 FBC1			 call	 fill_zero_pages
1  5867	    306D  66| 5F			 pop	 edi
1  5868	    306F  33 DB				 xor	 bx,bx
1  5869	    3071  66| BA 00000FEE		 mov	 edx,0FEEh
1  5870	    3077  D1 EB			 @@3:	 shr	 bx,1
1  5871	    3079  81 E2	0FFF			 and	 dx,0FFFh
1  5872	    307D  F6 C7	01			 test	 bh,01h
1  5873	    3080  74 25	90 90			 je	 @@6
1  5874	    3084  F6 C3	01		 @@4:	 test	 bl,01h
1  5875	    3087  74 2A	90 90			 je	 @@8
1  5876	    308B  E8 005E			 call	 getbyte
1  5877	    308E  78 0F	90 90			 js	 @@5
1  5878	    3092  67| 88 04 16			 mov	 [esi+edx],al
1  5879	    3096  65: 67| 88 07			 mov	 gs:[edi],al
1  5880	    309A  42				 inc	 dx
1  5881	    309B  66| 47			 inc	 edi
1  5882	    309D  EB D8				 jmp	 @@3
1  5883	    309F  66| 89 3E 3694r	 @@5:	 mov	 _codesize,edi		 ; for INT 21h / AX=0FF8Dh function
**Error** loadlc.asm(233) Undefined symbol: @AREA1_DD
1  5884	    30A4  66| 61			 popad
1  5885	    30A6  C3				 ret
1  5886	    30A7  E8 0042		 @@6:	 call	 getbyte
1  5887	    30AA  78 F3				 js	 @@5
1  5888	    30AC  80 CC	FF			 or	 ah,-1
1  5889	    30AF  8B D8				 mov	 bx,ax
1  5890	    30B1  EB D1				 jmp	 @@4
1  5891	    30B3  E8 0036		 @@8:	 call	 getbyte
1  5892	    30B6  78 E7				 js	 @@5
1  5893	    30B8  8A C8				 mov	 cl,al
1  5894	    30BA  E8 002F			 call	 getbyte
1  5895	    30BD  78 E0				 js	 @@5
1  5896	    30BF  8A E8				 mov	 ch,al
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 107
dos32a.asm



1  5897	    30C1  C0 ED	04			 shr	 ch,4
1  5898	    30C4  25 000F			 and	 ax,0Fh
1  5899	    30C7  04 02				 add	 al,02h
1  5900	    30C9  8B E8				 mov	 bp,ax
1  5901	    30CB  85 C0				 test	 ax,ax
1  5902	    30CD  7C A8				 jl	 @@3
1  5903	    30CF  81 E1	0FFF		 @@9:	 and	 cx,0FFFh
1  5904	    30D3  81 E2	0FFF			 and	 dx,0FFFh
1  5905	    30D7  67| 8A 04 0E			 mov	 al,[esi+ecx]
1  5906	    30DB  67| 88 04 16			 mov	 [esi+edx],al
1  5907	    30DF  65: 67| 88 07			 mov	 gs:[edi],al
1  5908	    30E3  41				 inc	 cx
1  5909	    30E4  42				 inc	 dx
1  5910	    30E5  66| 47			 inc	 edi
1  5911	    30E7  4D				 dec	 bp
1  5912	    30E8  79 E5				 jns	 @@9
1  5913	    30EA  EB 8B				 jmp	 @@3
1  5914
1  5915
1  5916					 ;-----------------------------------------------------------------------------
1  5917	    30EC  66| A1 3690r		 getbyte:mov	 eax,_srcaddr
**Error** loadlc.asm(267) Undefined symbol: @AREA1_DD
1  5918	    30F0  65: 67| 8A 00			 mov	 al,gs:[eax]
1  5919	    30F4  32 06	36E9r			 xor	 al,_xc_byte
**Error** loadlc.asm(269) Undefined symbol: @AREA1_DB
1  5920	    30F8  66| FF 06 3690r		 inc	 _srcaddr
**Error** loadlc.asm(270) Undefined symbol: @AREA1_DD
*Warning* loadlc.asm(270) Argument needs type override
**Error** loadlc.asm(270) Forward reference needs override
1  5921	    30FC  A2 36E9r			 mov	 _xc_byte,al
**Error** loadlc.asm(271) Undefined symbol: @AREA1_DB
1  5922	    30FF  66| FF 0E 3694r		 dec	 _codesize
**Error** loadlc.asm(272) Undefined symbol: @AREA1_DD
*Warning* loadlc.asm(272) Argument needs type override
**Error** loadlc.asm(272) Forward reference needs override
1  5923	    3103  C3				 ret
1  5924
1  5925
1  5926
1  5927
1  5928					 ;-----------------------------------------------------------------------------
1  5929					 _ic_byte	 equ	 _int_number			 ;db 0
1  5930					 _xc_byte	 equ	 _app_load			 ;db 0
1  5931					 _srcaddr	 equ	 _app_tmp_addr1			 ;dd 0
1  5932					 _codesize	 equ	 _app_tmp_addr2			 ;dd 0
1  5933
1  5934
   5935
   5936
   5937						 .8086
   5938						 Align 4
   5939
   5940	    3104  FB			 start:	 sti
   5941	    3105  0E				 push	 cs			 ; DS =	CS
   5942	    3106  1F				 pop	 ds
   5943	    3107  8C 1E	350Er			 mov	 _seg_ds,ds		 ; save	SEG regs
   5944	    310B  8C 06	3510r			 mov	 _seg_es,es
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 108
dos32a.asm



   5945	    310F  8C 16	3512r			 mov	 _seg_ss,ss
   5946	    3113  26: A1 002C			 mov	 ax,es:[002Ch]
   5947	    3117  A3 3514r			 mov	 _seg_env,ax
   5948	    311A  FC				 cld
   5949
   5950	    311B  E8 CEE2			 call	 get_default_config	 ; configure using defaults
   5951	    311E  E8 CF53			 call	 get_environ_config	 ; configure using environment
   5952	    3121  E8 D1D3			 call	 copyright		 ; show	copyright message
   5953	    3124  8C D0				 mov	 ax,ss			 ; get end of program
   5954	    3126  26: 8B 36 0002		 mov	 si,es:[0002h]		 ; get free DOS	memory (in para)
   5955	    312B  05 00C0			 add	 ax,STACKSIZE+INTTABSIZE ; stacksize+inttable (in para)
   5956	    312E  A3 3516r			 mov	 _seg_buf,ax		 ; set base of INT 21h buffer segment
   5957	    3131  03 06	353Cr			 add	 ax,_lowmembuf		 ; +lowbuf (in para)
   5958	    3135  A3 353Ar			 mov	 _membase,ax		 ; set base of memory for PMbuf
   5959	    3138  2B F0				 sub	 si,ax			 ; check if enough mem
   5960	    313A  73 12				 jnc	 @@1
   5961	    313C  F7 DE			 @@err1: neg	 si
   5962	    313E  B1 06				 mov	 cl,6
   5963	    3140  D3 EE				 shr	 si,cl			 ; convert para	to KB
   5964	    3142  B8 1001			 mov	 ax,1001h
   5965	    3145  E9 D129			 jmp	 report_error
   5966	    3148  B8 1002		 @@err2: mov	 ax,1002h
   5967	    314B  E9 D123			 jmp	 report_error
   5968
   5969	    314E  2B 06	3510r		 @@1:	 sub	 ax,_seg_es		 ; (SS+STK+INT+DOS)-ES	 *NOTE*: no BUF
   5970	    3152  8B D8				 mov	 bx,ax			 ; resize DOS memory
   5971	    3154  B4 4A				 mov	 ah,4Ah
   5972	    3156  CD 21				 int	 21h
   5973	    3158  72 EE				 jc	 @@err2
   5974	    315A  9A 00000000se			 call	 far ptr pm32_info	 ; prepare and check for errors
   5975	    315F  73 03				 jnc	 @@2			 ; if error had	occured, AX=error code
   5976	    3161  E9 D10D			 jmp	 report_error		 ; exit	with error message
   5977					 ;
   5978					 ; No errors had occured, initialize kernel
   5979					 ;
   5980						 .386p
   5981	    3164  89 1E	34F4r		 @@2:	 mov	 word ptr _buf_size,bx
   5982	    3168  89 0E	34F0r			 mov	 word ptr _cpu_type,cx
   5983
   5984	    316C  E8 0254			 call	 remove_kernel
   5985
   5986	    316F  A1 353Ar			 mov	 ax,_membase		 ; do second check for available memory
   5987	    3172  26: 8B 36 0002		 mov	 si,es:[0002h]		 ; (not	really needed)
   5988	    3177  03 C3				 add	 ax,bx			 ; AX=base of free mem after PMbuf
   5989	    3179  2B F0				 sub	 si,ax
   5990	    317B  72 BF				 jc	 @@err1
   5991	    317D  03 1E	353Ar			 add	 bx,_membase		 ; resize DOS memory
   5992	    3181  2B 1E	3510r			 sub	 bx,_seg_es		 ; (SS+STK+INT+DOS+BUF)-ES
   5993	    3185  B4 4A				 mov	 ah,4Ah
   5994	    3187  CD 21				 int	 21h
   5995	    3189  72 BD				 jc	 @@err2
   5996	    318B  66| 0F B7 06 3516r		 movzx	 eax,_seg_buf
   5997	    3191  66| 8B D0			 mov	 edx,eax
   5998	    3194  2B 06	350Er			 sub	 ax,_seg_ds		 ; adjust for CS(sel):0000(offs)
   5999	    3198  66| C1 E2 04			 shl	 edx,4
   6000	    319C  66| C1 E0 04			 shl	 eax,4
   6001	    31A0  66| A3 3542r			 mov	 _lobufbase,eax		 ; set INT 21h buf base	relative to CS:
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 109
dos32a.asm



   6002	    31A4  66| 89 16 353Er		 mov	 _lobufzero,edx		 ; set INT 21h buf base	relative to 0
   6003	    31A9  66| 0F B7 06 350Er		 movzx	 eax,_seg_ds
   6004	    31AF  66| C1 E0 04			 shl	 eax,4
   6005	    31B3  66| A3 354Ar			 mov	 _seg_ds_base,eax	 ; set 32bit base of CS	and DS segment
   6006	    31B7  66| 0F B7 06 353Cr		 movzx	 eax,_lowmembuf
   6007	    31BD  66| C1 E0 04			 shl	 eax,4
   6008	    31C1  66| A3 3546r			 mov	 _lobufsize,eax		 ; set INT 21h buffer size in bytes
   6009	    31C5  8E 06	353Ar			 mov	 es,_membase
   6010	    31C9  8B 1E	34EEr			 mov	 bx,_version
   6011	    31CD  BA 0D1Cr			 mov	 dx,offs critical_handler
   6012	    31D0  9A 00000000se			 call	 far ptr pm32_init	 ; enter Protected Mode
   6013	    31D5  0F 82	D098			 jc	 report_error
   6014
   6015	    31D9  FA				 cli
   6016	    31DA  8C 0E	3520r			 mov	 _sel_cs,cs		 ; save	PM selectors
   6017	    31DE  8C 1E	3522r			 mov	 _sel_ds,ds
   6018	    31E2  8C 06	3524r			 mov	 _sel_es,es
   6019	    31E6  8C 16	352Ar			 mov	 _sel_ss,ss
   6020	    31EA  66| 89 26 3526r		 mov	 _sel_esp,esp
   6021	    31EF  26: A1 002C			 mov	 ax,es:[002Ch]
   6022	    31F3  A3 352Er			 mov	 _sel_env,ax
   6023	    31F6  89 36	3530r			 mov	 _process_id,si
   6024	    31FA  57 66| 51			 push	 di ecx
   6025	    31FD  E8 00D3			 call	 init_system		 ; setup PM interrupts/buffers
   6026	    3200  E8 D2E8			 call	 save_inttab		 ; now we can safely save inttab
   6027	    3203  E8 DA37			 call	 verbose_showsys
   6028	    3206  66| 59 5F			 pop	 ecx di
   6029	    3209  FB				 sti
   6030
   6031	    320A  E8 016C			 call	 check_system		 ; check for, and issue	any warnings
   6032	    320D  8E 26	352Ar			 mov	 fs,_sel_ss		 ; FS: = selector of buffer (and stack)
   6033	    3211  8E 2E	352Cr			 mov	 gs,_sel_zero		 ; GS: = zero selector
   6034	    3215  E8 D788			 call	 open_exec		 ; open	executable file
   6035	    3218  E8 D7D7			 call	 load_exec_header	 ; load	exec header into memory
   6036	    321B  E8 D637			 call	 check_command_line	 ; get command line info
   6037	    321E  83 FA	40			 cmp	 dx,0040h		 ; check if reloc-tab starts at	0040h
   6038	    3221  75 0D	90 90			 jnz	 @@6			 ; if not, check command line for fname
   6039	    3225  66| 8B 16 368Cr		 mov	 edx,_exec_start	 ; get start of	exec
**Error** dos32a.asm(249) Undefined symbol: @AREA1_DD
   6040	    322A  85 D2				 test	 dx,dx			 ; check if application	is bound
   6041	    322C  75 25	90 90			 jnz	 load_bound_app		 ; if bound, load BOUND	Application
   6042	    3230  85 F6			 @@6:	 test	 si,si			 ; check if command line is not	empty
   6043	    3232  75 0B	90 90			 jnz	 load_extrn_app		 ; if cmd<>0, load EXTRN Application
   6044	    3236  E8 D98C			 call	 close_exec		 ; display help	message
   6045	    3239  B8 8001			 mov	 ax,8001h
   6046	    323C  E9 D032			 jmp	 report_error
   6047
   6048	    323F			 load_extrn_app:
   6049	    323F  E8 D983			 call	 close_exec
   6050	    3242  E8 D7DA			 call	 open_extrn_exec
   6051	    3245  E8 D843			 call	 load_extrn_exec_header
   6052	    3248  E8 D677			 call	 update_environment
   6053	    324B  E8 D641			 call	 remove_name_from_cmd
   6054	    324E  66| 8B 16 368Cr		 mov	 edx,_exec_start
**Error** dos32a.asm(264) Undefined symbol: @AREA1_DD
   6055
   6056	    3253			 load_bound_app:
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 110
dos32a.asm



   6057	    3253  C7 06	34F8r 3002		 mov	 _err_code,3002h	 ; "error in app file"
   6058	    3259  E8 D973			 call	 seek_from_start	 ; move	file ptr to 32bit application
   6059	    325C  66| B9 00000004		 mov	 ecx,4			 ; load	4 bytes	(app signature)
   6060	    3262  66| 33 D2			 xor	 edx,edx		 ; offset is zero
   6061	    3265  E8 D98B			 call	 load_fs_block		 ; load
   6062	    3268  64: A1 0000			 mov	 ax,fs:[0000h]		 ; get file signature
   6063	    326C  64: 8B 1E 0002		 mov	 bx,fs:[0002h]
   6064	    3271  85 DB				 test	 bx,bx
   6065	    3273  75 17	90 90			 jnz	 @@1
   6066	    3277  3D 454C			 cmp	 ax,'EL'		 ; 'LE'	type
   6067	    327A  0F 84	F54C			 jz	 load_le_app
   6068	    327E  3D 584C			 cmp	 ax,'XL'		 ; 'LX'	type
   6069	    3281  0F 84	F54E			 jz	 load_lx_app
   6070	    3285  3D 434C			 cmp	 ax,'CL'		 ; 'LC'	type (Linear Compressed)
   6071	    3288  0F 84	F550			 jz	 load_lc_app
   6072	    328C  E8 D936		 @@1:	 call	 close_exec
   6073	    328F  B8 3004			 mov	 ax,3004h		 ; "app	exec format not	supported"
   6074	    3292  E9 D1F9			 jmp	 file_error
   6075
   6076
   6077					 ;=============================================================================
   6078					 ; Jump	to loaded 32-bit code
   6079					 ;
   6080	    3295			 enter_32bit_code:
   6081	    3295  FA				 cli				 ; disable interrupts
   6082	    3296  FC				 cld
   6083	    3297  E8 D54C			 call	 install_nullptr_protect ; install Null-Ptr Protection
   6084	    329A  8E 16	3536r			 mov	 ss,_sel32_ss		 ; SS =	app 32bit data sel
   6085	    329E  66| 8B 26 36C0r		 mov	 esp,_app_esp		 ; ESP = application stack
**Error** dos32a.asm(295) Undefined symbol: @AREA1_DD
   6086	    32A3  66| FF 36 3532r		 push	 dword ptr _sel32_cs	 ; push	32bit destination selector
   6087	    32A8  66| FF 36 36BCr		 push	 dword ptr _app_eip	 ; push	32bit destination offset
**Error** dos32a.asm(297) Undefined symbol: @AREA1_DD
   6088	    32AD  8E 06	3524r			 mov	 es,_sel_es		 ; ES =	environment sel
   6089	    32B1  8E 26	352Cr			 mov	 fs,_sel_zero		 ; FS =	32bit zero sel
   6090	    32B5  8E 1E	3536r			 mov	 ds,_sel32_ss		 ; DS =	app 32bit data sel
   6091	    32B9  66| 33 C0			 xor	 eax,eax		 ; clear registers
   6092	    32BC  66| 33 DB			 xor	 ebx,ebx
   6093	    32BF  66| 33 C9			 xor	 ecx,ecx
   6094	    32C2  66| 33 D2			 xor	 edx,edx
   6095	    32C5  66| 33 F6			 xor	 esi,esi
   6096	    32C8  66| 33 FF			 xor	 edi,edi
   6097	    32CB  66| 33 ED			 xor	 ebp,ebp
   6098	    32CE  8E E8				 mov	 gs,ax
   6099	    32D0  FB				 sti				 ; enable interrupts
   6100	    32D1  66				 db	 66h			 ; do 32bit far	return to entry	point
   6101	    32D2  CB				 retf
   6102
   6103
   6104
   6105
   6106					 ;=============================================================================
   6107	    32D3			 init_system:
   6108	    32D3  66| 33 C0			 xor	 eax,eax		 ; reset temp variables	to zero
   6109	    32D6  66| A3 36C0r			 mov	 _app_esp,eax
**Error** dos32a.asm(319) Undefined symbol: @AREA1_DD
   6110	    32DA  66| A3 3698r			 mov	 _app_num_objects,eax
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 111
dos32a.asm



**Error** dos32a.asm(320) Undefined symbol: @AREA1_DD
   6111	    32DE  66| A3 36ACr			 mov	 _app_off_datapages,eax
**Error** dos32a.asm(321) Undefined symbol: @AREA1_DD
   6112	    32E2  E8 D536			 call	 setup_selectors	 ; setup system	selectors
   6113	    32E5  E8 D359			 call	 setup_dta_buffer	 ; allocate buffer for DTA and Mouse
   6114	    32E8  E8 D399			 call	 initialize_mouse	 ; initialize mouse
   6115
   6116	    32EB  B8 0204			 mov	 ax,0204h		 ; get default PM interrupt handlers
   6117	    32EE  B3 10				 mov	 bl,10h
   6118	    32F0  CD 31				 int	 31h
   6119	    32F2  89 0E	355Er			 mov	 word ptr _int10_cs,cx
   6120	    32F6  66| 89 16 355Ar		 mov	 dword ptr _int10_ip,edx
   6121	    32FB  B3 21				 mov	 bl,21h
   6122	    32FD  CD 31				 int	 31h
   6123	    32FF  89 0E	3566r			 mov	 word ptr _int21_cs,cx
   6124	    3303  66| 89 16 3562r		 mov	 dword ptr _int21_ip,edx
   6125	    3308  B3 33				 mov	 bl,33h
   6126	    330A  CD 31				 int	 31h
   6127	    330C  89 0E	356Er			 mov	 word ptr _int33_cs,cx
   6128	    3310  66| 89 16 356Ar		 mov	 dword ptr _int33_ip,edx
   6129	    3315  B3 23				 mov	 bl,23h
   6130	    3317  CD 31				 int	 31h
   6131	    3319  89 0E	3576r			 mov	 word ptr _int23_cs,cx
   6132	    331D  66| 89 16 3572r		 mov	 dword ptr _int23_ip,edx
   6133
   6134	    3322  B8 0202			 mov	 ax,0202h		 ; get default PM exception handlers
   6135	    3325  B3 00				 mov	 bl,00h
   6136	    3327  CD 31				 int	 31h
   6137	    3329  89 0E	357Er			 mov	 word ptr _exc00_cs,cx
   6138	    332D  66| 89 16 357Ar		 mov	 dword ptr _exc00_ip,edx
   6139	    3332  B3 06				 mov	 bl,06h
   6140	    3334  CD 31				 int	 31h
   6141	    3336  89 0E	3586r			 mov	 word ptr _exc06_cs,cx
   6142	    333A  66| 89 16 3582r		 mov	 dword ptr _exc06_ip,edx
   6143	    333F  B3 0D				 mov	 bl,0Dh
   6144	    3341  CD 31				 int	 31h
   6145	    3343  89 0E	358Er			 mov	 word ptr _exc0D_cs,cx
   6146	    3347  66| 89 16 358Ar		 mov	 dword ptr _exc0D_ip,edx
   6147	    334C  B3 0E				 mov	 bl,0Eh
   6148	    334E  CD 31				 int	 31h
   6149	    3350  89 0E	3596r			 mov	 word ptr _exc0E_cs,cx
   6150	    3354  66| 89 16 3592r		 mov	 dword ptr _exc0E_ip,edx
   6151
   6152	    3359  E8 D395			 call	 install_client_ints	 ; install client PM interrupts
   6153	    335C  0F 82	D142			 jc	 dpmi_error
   6154	    3360  E8 D9A7			 call	 win_focus_vm		 ; switch to full-screen under Windows
   6155	    3363  80 3E	34F1r 03		 cmp	 _sys_type,3
   6156	    3368  74 0E	90 90			 jz	 @@done
   6157	    336C  83 3E	3530r 00		 cmp	 _process_id,0		 ; do not reset	PIT if we've been
   6158	    3371  75 05	90 90			 jnz	 @@done			 ;  spawned to avoid timing problems
   6159	    3375  E8 D227			 call	 restore_pit
   6160	    3378  C3			 @@done: ret
   6161
   6162
   6163					 ;=============================================================================
   6164	    3379			 check_system:
   6165	    3379  85 FF				 test	 di,di			 ; if no prev. DOS/32A in system
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 112
dos32a.asm



   6166	    337B  74 10	90 90			 jz	 @@1			 ; then	jump
   6167	    337F  3B 3E	34EEr			 cmp	 di,_version		 ; check DOS/32A versions
   6168	    3383  74 08	90 90			 jz	 @@1			 ; if the same then jump
   6169	    3387  B8 9006			 mov	 ax,9006h		 ; "incompatible version of DOS/32A"
   6170	    338A  E8 CEE4			 call	 report_error
   6171	    338D  80 3E	34F1r 03	 @@1:	 cmp	 _sys_type,3		 ; if running under an external	DPMI
   6172	    3392  74 0F	90 90			 jz	 @@2			 ; then	jump
   6173	    3396  66| 85 C9			 test	 ecx,ecx		 ; if extended memory has been alloced
   6174	    3399  75 08	90 90			 jnz	 @@2			 ; then	jump
   6175	    339D  B8 9001			 mov	 ax,9001h		 ; "no ext mem has been	allocated"
   6176	    33A0  E8 CECE			 call	 report_error
   6177	    33A3  B8 0400		 @@2:	 mov	 ax,0400h		 ; get DPMI info
   6178	    33A6  CD 31				 int	 31h
   6179	    33A8  80 FE	08			 cmp	 dh,08h			 ; warn	if PICs	have been remapped
   6180	    33AB  75 09	90 90			 jnz	 @@3
   6181	    33AF  80 FA	70			 cmp	 dl,70h
   6182	    33B2  74 0E	90 90			 jz	 @@4
   6183	    33B6  0F B6	F6		 @@3:	 movzx	 si,dh
   6184	    33B9  0F B6	FA			 movzx	 di,dl
   6185	    33BC  B8 9002			 mov	 ax,9002h		 ; "PICs have been relocated"
   6186	    33BF  E8 CEAF			 call	 report_error
   6187	    33C2  C3			 @@4:	 ret
   6188
   6189
   6190					 ;=============================================================================
   6191	    33C3			 remove_kernel:
   6192	    33C3  80 3E	34F1r 03		 cmp	 _sys_type,3
   6193	    33C8  75 37	90 90			 jnz	 @@done
   6194
   6195	    33CC  FA				 cli
   6196	    33CD  5D				 pop	 bp
   6197	    33CE  06				 push	 es
   6198	    33CF  8E 06	351Er			 mov	 es,_seg_kernel
   6199	    33D3  BE 0000r			 mov	 si,offs @text16_beg
   6200	    33D6  B9 2142			 mov	 cx,(offs @text16_end -	@text16_beg) / 2
   6201	    33D9  F3> A5			 rep	 movsw
   6202	    33DB  07				 pop	 es
   6203	    33DC  8B C2				 mov	 ax,dx
   6204	    33DE  C1 E8	04			 shr	 ax,4
   6205	    33E1  8C D2				 mov	 dx,ss
   6206	    33E3  2B D0				 sub	 dx,ax
   6207	    33E5  8E D2				 mov	 ss,dx
   6208	    33E7  8C DA				 mov	 dx,ds
   6209	    33E9  2B D0				 sub	 dx,ax
   6210	    33EB  8E DA				 mov	 ds,dx
   6211	    33ED  29 06	350Er			 sub	 _seg_ds,ax
   6212	    33F1  29 06	3512r			 sub	 _seg_ss,ax
   6213	    33F5  29 06	3516r			 sub	 _seg_buf,ax
   6214	    33F9  29 06	353Ar			 sub	 _membase,ax
   6215	    33FD  52				 push	 dx
   6216	    33FE  55				 push	 bp
   6217	    33FF  FB				 sti
   6218	    3400  CB				 retf
   6219	    3401  C3			 @@done: ret
   6220
   6221
   6222
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 113
dos32a.asm



   6223
   6224
   6225					 ;	 DATA
   6226					 ;=============================================================================
   6227					 include TEXT\CLIENT\data.asm
1  6228					 ;
1  6229					 ; Copyright (C) 1996-2002 Supernar Systems, Ltd. All rights reserved.
1  6230					 ;
1  6231					 ; Redistribution  and	use  in	source and  binary  forms, with	or without
1  6232					 ; modification,  are permitted	provided that the following conditions are
1  6233					 ; met:
1  6234					 ;
1  6235					 ; 1.  Redistributions	of  source code	 must  retain  the above copyright
1  6236					 ; notice, this	list of	conditions and the following disclaimer.
1  6237					 ;
1  6238					 ; 2.  Redistributions	in binary form	must reproduce the above copyright
1  6239					 ; notice,  this  list of conditions and  the  following disclaimer in the
1  6240					 ; documentation and/or	other materials	provided with the distribution.
1  6241					 ;
1  6242					 ; 3. The end-user documentation included with the redistribution, if any,
1  6243					 ; must	include	the following acknowledgment:
1  6244					 ;
1  6245					 ; "This product uses DOS/32 Advanced DOS Extender technology."
1  6246					 ;
1  6247					 ; Alternately,	 this acknowledgment may appear	in the software	itself,	if
1  6248					 ; and wherever	such third-party acknowledgments normally appear.
1  6249					 ;
1  6250					 ; 4.  Products	derived	from this software  may	not be called "DOS/32A"	or
1  6251					 ; "DOS/32 Advanced".
1  6252					 ;
1  6253					 ; THIS	 SOFTWARE AND DOCUMENTATION IS PROVIDED	 "AS IS" AND ANY EXPRESSED
1  6254					 ; OR  IMPLIED	WARRANTIES,  INCLUDING,	BUT  NOT  LIMITED  TO, THE IMPLIED
1  6255					 ; WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
1  6256					 ; DISCLAIMED.	IN  NO	EVENT SHALL THE	 AUTHORS  OR  COPYRIGHT	HOLDERS	BE
1  6257					 ; LIABLE  FOR	ANY DIRECT, INDIRECT,  INCIDENTAL,  SPECIAL, EXEMPLARY,	OR
1  6258					 ; CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT NOT	LIMITED	TO, PROCUREMENT	OF
1  6259					 ; SUBSTITUTE  GOODS  OR  SERVICES;  LOSS OF  USE,  DATA,  OR  PROFITS;	OR
1  6260					 ; BUSINESS  INTERRUPTION) HOWEVER CAUSED AND  ON ANY THEORY OF	LIABILITY,
1  6261					 ; WHETHER IN CONTRACT,	STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE	OR
1  6262					 ; OTHERWISE)  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN	IF
1  6263					 ; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
1  6264					 ;
1  6265					 ;
1  6266
1  6267
1  6268					 ; table		 string	 /len/subroutine
1  6269					 ;-----------------------------------------------
1  6270							 Align 2
1  6271	    3402  3648r	0005 0174r	 dfn_tab	 dw	 df1_str, 5, cfg_env_quiet
1  6272	    3408  364Dr	0005 017Br			 dw	 df2_str, 5, cfg_env_print
1  6273	    340E  3652r	0005 0190r			 dw	 df3_str, 5, cfg_env_sound
1  6274	    3414  3657r	0006 01A4r			 dw	 df4_str, 6, cfg_env_extmem
1  6275	    341A  365Dr	0006 01D4r			 dw	 df5_str, 6, cfg_env_dosbuf
1  6276	    3420  3663r	0007 01F1r			 dw	 df6_str, 7, cfg_env_test
1  6277	    3426  366Ar	0007 020Br			 dw	 df8_str, 7, cfg_env_restore
1  6278	    342C  3671r	0005 021Fr			 dw	 df9_str, 5, cfg_env_nullp
1  6279	    3432  3676r	0007 0233r			 dw	 dfA_str, 7, cfg_env_verbose
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 114
dos32a.asm



1  6280	    3438  367Dr	0006 0247r			 dw	 dfB_str, 6, cfg_env_nowarn
1  6281	    343E  3683r	0003 0267r			 dw	 dfC_str, 3, cfg_env_noc
1  6282	    3444  FFFF					 dw	 -1
1  6283
1  6284
1  6285					 ; table	 errcode, errstatus, errtab
1  6286					 ;------------------------------------------
1  6287							 Align 2
1  6288	    3446  00 00			 g_errtab	 db	 00h,	 0
1  6289	    3448  346Er					 dw	 errtab_00xx
1  6290	    344A  10 00					 db	 10h,	 0
1  6291	    344C  347Er					 dw	 errtab_10xx
1  6292	    344E  20 00					 db	 20h,	 0
1  6293	    3450  3484r					 dw	 errtab_20xx
1  6294	    3452  30 00					 db	 30h,	 0
1  6295	    3454  348Ar					 dw	 errtab_30xx
1  6296	    3456  40 00					 db	 40h,	 0
1  6297	    3458  3498r					 dw	 errtab_40xx
1  6298	    345A  60 02					 db	 60h,	 2
1  6299	    345C  34A8r					 dw	 errtab_60xx
1  6300	    345E  80 00					 db	 80h,	 0
1  6301	    3460  34B4r					 dw	 errtab_80xx
1  6302	    3462  90 01					 db	 90h,	 1
1  6303	    3464  34BCr					 dw	 errtab_90xx
1  6304	    3466  FFFF					 dw	 -1
1  6305
1  6306	    3468  35FDr	3612r 3629r	 h_errtab	 dw	 errmsg1, errmsg2, errmsg3
1  6307
1  6308	    346E  3688r	36B1r 36EAr   +	 errtab_00xx	 dw	 d_err0, d_err1, d_err2, d_err3, d_err4
   6309		  3723r	3759r
1  6310	    3478  3778r	379Dr 37C1r			 dw	 d_err5, d_err6, d_err7
1  6311	    347E  359Ar	37DBr 3809r	 errtab_10xx	 dw	 n_msg,	 m_err1, m_err2
1  6312	    3484  382Ar	383Er 385Cr	 errtab_20xx	 dw	 e_err0, e_err1, e_err2
1  6313	    348A  359Ar	3874r 3899r   +	 errtab_30xx	 dw	 n_msg,	 a_err1, a_err2, a_err3, a_err4, a_err2, a_err4
   6314		  38B8r	38E9r 3899r   +
   6315		  38E9r
1  6316	    3498  359Ar	3910r 393Ar   +	 errtab_40xx	 dw	 n_msg,	 l_err1, l_err2, l_err3, l_err4, l_err5, l_err6, l_err7
   6317		  396Er	39A7r 39DFr   +
   6318		  3A10r	3A3Er
1  6319	    34A8  3BD1r	359Ar 3BEBr   +	 errtab_60xx	 dw	 r_msg80,n_msg,	 r_msg81,r_msg82,r_msg83,r_msg84
   6320		  3C0Br	3C30r 3C61r
1  6321	    34B4  359Ar	3A78r 3A98r   +	 errtab_80xx	 dw	 n_msg,	 x_err1, x_err2, x_err3
   6322		  3AB5r
1  6323	    34BC  359Ar	3AD8r 3AFEr   +	 errtab_90xx	 dw	 n_msg,	 w_msg1, w_msg2, w_msg3, w_msg4, w_msg5, w_msg6
   6324		  3B2Br	3B61r 3B7Dr   +
   6325		  3BA1r
1  6326
1  6327	    34CA  4162r	417Br 418Fr   +	 i_msg		 dw	 i_msg00, i_msg01, i_msg02, i_msg03
   6328		  4193r
1  6329	    34D2  41A7r	41BCr 41CFr   +			 dw	 i_msg04, i_msg05, i_msg06, i_msg07
   6330		  41E4r
1  6331	    34DA  41FEr	420Br 4227r   +			 dw	 i_msg08, i_msg09, i_msg0A, i_msg0B
   6332		  4239r
1  6333	    34E2  4253r	425Fr 4278r   +			 dw	 i_msg0C, i_msg0D, i_msg0E, n_msg
   6334		  359Ar
1  6335
1  6336
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 115
dos32a.asm



1  6337
1  6338
1  6339
1  6340
1  6341					 ;=============================================================================
1  6342	    34EA  01*(87 DB)				 Align 4
1  6343	    34EC  03			 _misc_byte	 db 3		 ; DOS/32A misc. bits			 ; +00
1  6344	    34ED  07			 _misc_byte2	 db 7							 ; +01
1  6345	    34EE  0000			 _version	 dw 0		 ; version				 ; +02
1  6346	    34F0  00			 _cpu_type	 db 0		 ; CPU type:	 80x86			 ; +04
1  6347	    34F1  00			 _sys_type	 db 0		 ; system type:	 raw/XMS/VCPI/DPMI	 ; +05
1  6348	    34F2  0000			 _sys_misc	 dw 0		 ; system misc.	bits			 ; +06
1  6349	    34F4  0000			 _buf_size	 dw 0		 ; protected mode buffer size		 ; +08
1  6350
1  6351					 ; _sys_misc map:
1  6352					 ;----------------
1  6353					 ;	 bit  0: 0=no stub32c present, 1=program started from stub32c
1  6354					 ;	 bit  8: 0=no CTRL-C, 1=CTRL-C detected	(run-time)
1  6355
1  6356
1  6357	    34F6  0000			 _pic_mask	 dw 0		 ; PIC mask
1  6358	    34F8  0000			 _err_code	 dw 0
1  6359	    34FA  0000			 _acc_rights	 dw 0
1  6360	    34FC  00000000		 _mus_size	 dd 0
1  6361	    3500  0000			 _mus_backoff	 dw 0
1  6362	    3502  0000			 _mus_backseg	 dw 0
1  6363	    3504  00000000		 _mus_off	 dd 0
1  6364	    3508  00000000		 _mus_sel	 dd 0
1  6365	    350C  00 00			 _mus_data	 db 0,0
1  6366
1  6367	    350E  0000			 _seg_ds	 dw 0		 ; real	mode segment storage
1  6368	    3510  0000			 _seg_es	 dw 0
1  6369	    3512  0000			 _seg_ss	 dw 0
1  6370	    3514  0000			 _seg_env	 dw 0
1  6371	    3516  0000			 _seg_buf	 dw 0
1  6372	    3518  0000			 _seg_dta	 dw 0
1  6373	    351A  0000			 _seg_mus	 dw 0
1  6374	    351C  0000			 _seg_id32	 dw 0
1  6375	    351E  0000			 _seg_kernel	 dw 0
1  6376
1  6377	    3520  0000			 _sel_cs	 dw 0		 ; protected mode selector storage
1  6378	    3522  0000			 _sel_ds	 dw 0
1  6379	    3524  0000			 _sel_es	 dw 0
1  6380	    3526  00000000		 _sel_esp	 dd 0
1  6381	    352A  0000			 _sel_ss	 dw 0
1  6382	    352C  0000			 _sel_zero	 dw 0		 ; ZERO_32	 Data selector
1  6383	    352E  0000			 _sel_env	 dw 0		 ; default environment selector
1  6384	    3530  0000			 _process_id	 dw 0
1  6385
1  6386	    3532  0000 0000		 _sel32_cs	 dw 0,0		 ; CODE_32	 Code selector
1  6387	    3536  0000 0000		 _sel32_ss	 dw 0,0		 ; DATA_32	 Data selector
1  6388
1  6389	    353A  0000			 _membase	 dw 0		 ; memory base after stk+int+buf
1  6390	    353C  0000			 _lowmembuf	 dw 0		 ; size	of DOS INT 21h buffer
1  6391	    353E  00000000		 _lobufzero	 dd 0
1  6392	    3542  00000000		 _lobufbase	 dd 0
1  6393	    3546  00000000		 _lobufsize	 dd 0
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 116
dos32a.asm



1  6394	    354A  00000000		 _seg_ds_base	 dd 0		 ; 32bit base of DS (CS) segment
1  6395	    354E  0000			 _dta_sel	 dw 0
1  6396	    3550  00000000		 _dta_off	 dd 0
1  6397	    3554  0000			 _app_dta_sel	 dw 0
1  6398	    3556  00000000		 _app_dta_off	 dd 0
1  6399
1  6400					 ;-----------------------------------------------------------------------------
1  6401	    355A  00000000		 _int10_ip	 dd 0		 ; default INT 10h handler
1  6402	    355E  00000000		 _int10_cs	 dd 0
1  6403	    3562  00000000		 _int21_ip	 dd 0		 ; default INT 21h handler
1  6404	    3566  00000000		 _int21_cs	 dd 0
1  6405	    356A  00000000		 _int33_ip	 dd 0		 ; default INT 33h handler
1  6406	    356E  00000000		 _int33_cs	 dd 0
1  6407	    3572  00000000		 _int23_ip	 dd 0		 ; default INT 23h handler
1  6408	    3576  00000000		 _int23_cs	 dd 0
1  6409
1  6410	    357A  00000000		 _exc00_ip	 dd 0
1  6411	    357E  00000000		 _exc00_cs	 dd 0
1  6412	    3582  00000000		 _exc06_ip	 dd 0
1  6413	    3586  00000000		 _exc06_cs	 dd 0
1  6414	    358A  00000000		 _exc0D_ip	 dd 0
1  6415	    358E  00000000		 _exc0D_cs	 dd 0
1  6416	    3592  00000000		 _exc0E_ip	 dd 0
1  6417	    3596  00000000		 _exc0E_cs	 dd 0
1  6418
1  6419					 ;-----------------------------------------------------------------------------
1  6420		  =_TEXT16:3688		 _exec_handle		 equ @area1_dw+00h		 ;dw 0
1  6421		  =_TEXT16:368C		 _exec_start		 equ @area1_dd+04h		 ;dd 0
1  6422		  =_TEXT16:3690		 _app_tmp_addr1		 equ @area1_dd+08h		 ;dd 0
1  6423		  =_TEXT16:3694		 _app_tmp_addr2		 equ @area1_dd+0Ch		 ;dd 0
1  6424
1  6425		  =_TEXT16:3698		 _app_num_objects	 equ @area1_dd+10h		 ;dd 0
1  6426		  =_TEXT16:369C		 _app_off_objects	 equ @area1_dd+14h		 ;dd 0
1  6427
1  6428		  =_TEXT16:36A0		 _app_off_objpagetab	 equ @area1_dd+18h		 ;dd 0
1  6429		  =_TEXT16:36A4		 _app_off_fixpagetab	 equ @area1_dd+1Ch		 ;dd 0
1  6430		  =_TEXT16:36A8		 _app_off_fixrectab	 equ @area1_dd+20h		 ;dd 0
1  6431		  =_TEXT16:36AC		 _app_off_datapages	 equ @area1_dd+24h		 ;dd 0
1  6432		  =_TEXT16:36B0		 _app_off_pageshift	 equ @area1_dd+28h		 ;dd 0
1  6433
1  6434		  =_TEXT16:36B4		 _app_eip_object	 equ @area1_dd+2Ch		 ;dd 0
1  6435		  =_TEXT16:36B8		 _app_esp_object	 equ @area1_dd+30h		 ;dd 0
1  6436		  =_TEXT16:36BC		 _app_eip		 equ @area1_dd+34h		 ;dd 0
1  6437		  =_TEXT16:36C0		 _app_esp		 equ @area1_dd+38h		 ;dd 0
1  6438		  =_TEXT16:36C4		 _unreloc_eip		 equ @area1_dd+3Ch		 ;dd 0
1  6439		  =_TEXT16:36C8		 _unreloc_esp		 equ @area1_dd+40h		 ;dd 0
1  6440		  =_TEXT16:36CC		 _app_siz_fixrecstab	 equ @area1_dd+44h		 ;dd 0
1  6441		  =_TEXT16:36D0		 _app_buf_fixrecstab	 equ @area1_dd+48h		 ;dd 0
1  6442		  =_TEXT16:36D4		 _app_siz_lastpage	 equ @area1_dd+4Ch		 ;dd 0
1  6443
1  6444		  =_TEXT16:36D8		 _int_number		 equ @area1_db+50h		 ;db 0,0
1  6445		  =_TEXT16:36DA		 _int_temp		 equ @area1_dw+52h		 ;dw 0
1  6446		  =_TEXT16:36DC		 _int_errcode		 equ @area1_dd+54h		 ;dd 0
1  6447		  =_TEXT16:36E0		 _int_esp		 equ @area1_dd+58h		 ;dd 0
1  6448		  =_TEXT16:36E4		 _int_ss		 equ @area1_dd+5Ch		 ;dw 0
1  6449		  =_TEXT16:36E6		 _int_erravail		 equ @area1_db+5Eh		 ;db 0
1  6450
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 117
dos32a.asm



1  6451		  =_TEXT16:36E8		 _app_type		 equ @area1_db+60h		 ;db 0
1  6452		  =_TEXT16:36E9		 _app_load		 equ @area1_db+61h		 ;db 0
1  6453
1  6454		  =_TEXT16:0074		 _app_buf_allocsel	 equ @area2_dw+00h
1  6455		  =_TEXT16:00F4		 _app_buf_allocbase	 equ @area2_dd+APP_MAXOBJECTS*2
1  6456
1  6457
1  6458					 ;-----------------------------------------------------------------------------
1  6459	    359A  00			 n_msg	 db 0
1  6460	    359B  44 4F	53 2F 33 32 41+	 cpr_msg db 'DOS/32A --	Protected Mode Run-time	 '
   6461		  20 2D	2D 20 50 72 6F+
   6462		  74 65	63 74 65 64 20+
   6463		  4D 6F	64 65 20 52 75+
   6464		  6E 2D	74 69 6D 65 20+
   6465		  20
1  6466					 If EXEC_TYPE eq 2
1  6467						 db 'Beta '
1  6468					 Endif
1  6469	    35BF  56 65	72 73 69 6F 6E+		 db 'Version '
   6470		  20
1  6471	    35C7  78 2E	78 78 0D 0A	 ver_msg db 'x.xx',cr
1  6472	    35CD  43 6F	70 79 72 69 67+		 db 'Copyright (C) Supernar Systems, Ltd. 1996-2002',cr
   6473		  68 74	20 28 43 29 20+
   6474		  53 75	70 65 72 6E 61+
   6475		  72 20	53 79 73 74 65+
   6476		  6D 73	2C 20 4C 74 64+
   6477		  2E 20	31 39 39 36 2D+
   6478		  32 30	30 32 0D 0A
1  6479	    35FD			 cpr_end label byte
1  6480
1  6481	    35FD  44 4F	53 2F 33 32 41+	 errmsg1 db 'DOS/32A fatal (%w): ',0
   6482		  20 66	61 74 61 6C 20+
   6483		  28 25	77 29 3A 20 00
1  6484	    3612  44 4F	53 2F 33 32 41+	 errmsg2 db 'DOS/32A warning (%w): ',0
   6485		  20 77	61 72 6E 69 6E+
   6486		  67 20	28 25 77 29 3A+
   6487		  20 00
1  6488	    3629  44 4F	53 2F 33 32 41+	 errmsg3 db 'DOS/32A run-time (%w): ',0
   6489		  20 72	75 6E 2D 74 69+
   6490		  6D 65	20 28 25 77 29+
   6491		  3A 20	00
1  6492
1  6493					 ;-----------------------------------------------------------------------------
1  6494	    3641  44 4F	53 33 32 41 3D	 dos_str db 'DOS32A='
1  6495	    3648  51 55	49 45 54	 df1_str db 'QUIET'		 ; print =OFF, sound =OFF		 --
1  6496	    364D  50 52	49 4E 54	 df2_str db 'PRINT'		 ; print (off=only errors reported)	 on/off
1  6497	    3652  53 4F	55 4E 44	 df3_str db 'SOUND'		 ; sound on error			 on/off
1  6498	    3657  45 58	54 4D 45 4D	 df4_str db 'EXTMEM'		 ; max Extended	memory to alloc		 (KB)
1  6499	    365D  44 4F	53 42 55 46	 df5_str db 'DOSBUF'		 ; lowmembuf, DOS INT 21h buffer	 (KB)
1  6500	    3663  44 50	4D 49 54 53 54	 df6_str db 'DPMITST'		 ; test	DPMI/VCPI or VCPI/DPMI		 on/off
1  6501	    366A  52 45	53 54 4F 52 45	 df8_str db 'RESTORE'		 ; restore int vector table on exit	 on/off
1  6502	    3671  4E 55	4C 4C 50	 df9_str db 'NULLP'		 ; install Null-Pointer	protection	 on/off
1  6503	    3676  56 45	52 42 4F 53 45	 dfA_str db 'VERBOSE'		 ; use verbose mode			 on/off
1  6504	    367D  4E 4F	57 41 52 4E	 dfB_str db 'NOWARN'		 ; disable particular warning		 (NUM)
1  6505	    3683  4E 4F	43		 dfC_str db 'NOC'		 ; disable copyright banner		 --
1  6506
1  6507	    3686  01*(87 DB)			 Align 4
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 118
dos32a.asm



1  6508	    3688			 @area1_db label byte
1  6509	    3688			 @area1_dw label word
1  6510	    3688			 @area1_dd label dword
1  6511
1  6512
1  6513					 ; INIT	errors		 00xx
1  6514					 ;=============================================================================
1  6515	    3688  74 68	69 73 20 70 72+	 d_err0	 db 'this program requires DOS 4.00 or higher'			 ,0
   6516		  6F 67	72 61 6D 20 72+
   6517		  65 71	75 69 72 65 73+
   6518		  20 44	4F 53 20 34 2E+
   6519		  30 30	20 6F 72 20 68+
   6520		  69 67	68 65 72 00
1  6521	    36B1  38 30	33 38 36 20 70+	 d_err1	 db '80386 processor or	better required	to run protected mode'	 ,0
   6522		  72 6F	63 65 73 73 6F+
   6523		  72 20	6F 72 20 62 65+
   6524		  74 74	65 72 20 72 65+
   6525		  71 75	69 72 65 64 20+
   6526		  74 6F	20 72 75 6E 20+
   6527		  70 72	6F 74 65 63 74+
   6528		  65 64	20 6D 6F 64 65+
   6529		  00
1  6530	    36EA  73 79	73 74 65 6D 20+	 d_err2	 db 'system software does not follow VCPI/DPMI specifications'	 ,0
   6531		  73 6F	66 74 77 61 72+
   6532		  65 20	64 6F 65 73 20+
   6533		  6E 6F	74 20 66 6F 6C+
   6534		  6C 6F	77 20 56 43 50+
   6535		  49 2F	44 50 4D 49 20+
   6536		  73 70	65 63 69 66 69+
   6537		  63 61	74 69 6F 6E 73+
   6538		  00
1  6539	    3723  70 72	65 73 65 6E 74+	 d_err3	 db 'present DPMI host does not	support	32bit applications'	 ,0
   6540		  20 44	50 4D 49 20 68+
   6541		  6F 73	74 20 64 6F 65+
   6542		  73 20	6E 6F 74 20 73+
   6543		  75 70	70 6F 72 74 20+
   6544		  33 32	62 69 74 20 61+
   6545		  70 70	6C 69 63 61 74+
   6546		  69 6F	6E 73 00
1  6547	    3759  69 6E	63 6F 6D 70 61+	 d_err4	 db 'incompatible VCPI PIC mappings'				 ,0
   6548		  74 69	62 6C 65 20 56+
   6549		  43 50	49 20 50 49 43+
   6550		  20 6D	61 70 70 69 6E+
   6551		  67 73	00
1  6552	    3778  63 6F	75 6C 64 20 6E+	 d_err5	 db 'could not enter 32bit protected mode'			 ,0
   6553		  6F 74	20 65 6E 74 65+
   6554		  72 20	33 32 62 69 74+
   6555		  20 70	72 6F 74 65 63+
   6556		  74 65	64 20 6D 6F 64+
   6557		  65 00
1  6558	    379D  63 6F	75 6C 64 20 6E+	 d_err6	 db 'could not allocate	system selectors'			 ,0
   6559		  6F 74	20 61 6C 6C 6F+
   6560		  63 61	74 65 20 73 79+
   6561		  73 74	65 6D 20 73 65+
   6562		  6C 65	63 74 6F 72 73+
   6563		  00
1  6564	    37C1  63 6F	75 6C 64 20 6E+	 d_err7	 db 'could not enable A20 line'					 ,0
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 119
dos32a.asm



   6565		  6F 74	20 65 6E 61 62+
   6566		  6C 65	20 41 32 30 20+
   6567		  6C 69	6E 65 00
1  6568
1  6569
1  6570					 ; MEMORY errors	 10xx
1  6571					 ;=============================================================================
1  6572	    37DB  6E 6F	74 20 65 6E 6F+	 m_err1	 db 'not enough	DOS memory, additional %dKB needed'		 ,0
   6573		  75 67	68 20 44 4F 53+
   6574		  20 6D	65 6D 6F 72 79+
   6575		  2C 20	61 64 64 69 74+
   6576		  69 6F	6E 61 6C 20 25+
   6577		  64 4B	42 20 6E 65 65+
   6578		  64 65	64 00
1  6579	    3809  44 4F	53 20 72 65 70+	 m_err2	 db 'DOS reported insufficient memory'				 ,0
   6580		  6F 72	74 65 64 20 69+
   6581		  6E 73	75 66 66 69 63+
   6582		  69 65	6E 74 20 6D 65+
   6583		  6D 6F	72 79 00
1  6584
1  6585
1  6586					 ; EXEC	errors		 20xx
1  6587					 ;=============================================================================
1  6588	    382A  69 6E	76 61 6C 69 64+	 e_err0	 db 'invalid environment'					 ,0
   6589		  20 65	6E 76 69 72 6F+
   6590		  6E 6D	65 6E 74 00
1  6591	    383E  63 6F	75 6C 64 20 6E+	 e_err1	 db 'could not open exec file "%s"'				 ,0
   6592		  6F 74	20 6F 70 65 6E+
   6593		  20 65	78 65 63 20 66+
   6594		  69 6C	65 20 22 25 73+
   6595		  22 00
1  6596	    385C  65 72	72 6F 72 20 69+	 e_err2	 db 'error in exec file	"%s"'					 ,0
   6597		  6E 20	65 78 65 63 20+
   6598		  66 69	6C 65 20 22 25+
   6599		  73 22	00
1  6600
1  6601
1  6602					 ; APPLICATION errors	 30xx
1  6603					 ;=============================================================================
1  6604	    3874  63 6F	75 6C 64 20 6E+	 a_err1	 db 'could not open application	file "%s"'			 ,0
   6605		  6F 74	20 6F 70 65 6E+
   6606		  20 61	70 70 6C 69 63+
   6607		  61 74	69 6F 6E 20 66+
   6608		  69 6C	65 20 22 25 73+
   6609		  22 00
1  6610	    3899  65 72	72 6F 72 20 69+	 a_err2	 db 'error in application file "%s"'				 ,0
   6611		  6E 20	61 70 70 6C 69+
   6612		  63 61	74 69 6F 6E 20+
   6613		  66 69	6C 65 20 22 25+
   6614		  73 22	00
1  6615	    38B8  66 69	6C 65 20 22 25+	 a_err3	 db 'file "%s" does not	contain	any valid exec format'		 ,0
   6616		  73 22	20 64 6F 65 73+
   6617		  20 6E	6F 74 20 63 6F+
   6618		  6E 74	61 69 6E 20 61+
   6619		  6E 79	20 76 61 6C 69+
   6620		  64 20	65 78 65 63 20+
   6621		  66 6F	72 6D 61 74 00
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 120
dos32a.asm



1  6622	    38E9  65 78	65 63 20 66 6F+	 a_err4	 db 'exec format not supported in file "%s"'			 ,0
   6623		  72 6D	61 74 20 6E 6F+
   6624		  74 20	73 75 70 70 6F+
   6625		  72 74	65 64 20 69 6E+
   6626		  20 66	69 6C 65 20 22+
   6627		  25 73	22 00
1  6628
1  6629
1  6630					 ; LOADER errors	 40xx
1  6631					 ;=============================================================================
1  6632	    3910  74 6F	6F 20 6D 61 6E+	 l_err1	 db 'too many objects in application exec "%s"'			 ,0
   6633		  79 20	6F 62 6A 65 63+
   6634		  74 73	20 69 6E 20 61+
   6635		  70 70	6C 69 63 61 74+
   6636		  69 6F	6E 20 65 78 65+
   6637		  63 20	22 25 73 22 00
1  6638	    393A  6E 6F	74 20 65 6E 6F+	 l_err2	 db 'not enough	DOS memory to load application exec "%s"'	 ,0
   6639		  75 67	68 20 44 4F 53+
   6640		  20 6D	65 6D 6F 72 79+
   6641		  20 74	6F 20 6C 6F 61+
   6642		  64 20	61 70 70 6C 69+
   6643		  63 61	74 69 6F 6E 20+
   6644		  65 78	65 63 20 22 25+
   6645		  73 22	00
1  6646	    396E  6E 6F	74 20 65 6E 6F+	 l_err3	 db 'not enough	extended memory	to load	application exec "%s"'	 ,0
   6647		  75 67	68 20 65 78 74+
   6648		  65 6E	64 65 64 20 6D+
   6649		  65 6D	6F 72 79 20 74+
   6650		  6F 20	6C 6F 61 64 20+
   6651		  61 70	70 6C 69 63 61+
   6652		  74 69	6F 6E 20 65 78+
   6653		  65 63	20 22 25 73 22+
   6654		  00
1  6655	    39A7  6E 6F	74 20 65 6E 6F+	 l_err4	 db 'not enough	extended memory	to load	fixups for exec	"%s"'	 ,0
   6656		  75 67	68 20 65 78 74+
   6657		  65 6E	64 65 64 20 6D+
   6658		  65 6D	6F 72 79 20 74+
   6659		  6F 20	6C 6F 61 64 20+
   6660		  66 69	78 75 70 73 20+
   6661		  66 6F	72 20 65 78 65+
   6662		  63 20	22 25 73 22 00
1  6663	    39DF  75 6E	72 65 63 6F 67+	 l_err5	 db 'unrecognized fixup	data in	application exec "%s"'		 ,0
   6664		  6E 69	7A 65 64 20 66+
   6665		  69 78	75 70 20 64 61+
   6666		  74 61	20 69 6E 20 61+
   6667		  70 70	6C 69 63 61 74+
   6668		  69 6F	6E 20 65 78 65+
   6669		  63 20	22 25 73 22 00
1  6670	    3A10  31 36	62 69 74 20 66+	 l_err6	 db '16bit fixup overflow in application exec "%s"'		 ,0
   6671		  69 78	75 70 20 6F 76+
   6672		  65 72	66 6C 6F 77 20+
   6673		  69 6E	20 61 70 70 6C+
   6674		  69 63	61 74 69 6F 6E+
   6675		  20 65	78 65 63 20 22+
   6676		  25 73	22 00
1  6677	    3A3E  6E 6F	74 20 65 6E 6F+	 l_err7	 db 'not enough	DOS Transfer Buffer space to load LC-exec "%s"'	 ,0
   6678		  75 67	68 20 44 4F 53+
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 121
dos32a.asm



   6679		  20 54	72 61 6E 73 66+
   6680		  65 72	20 42 75 66 66+
   6681		  65 72	20 73 70 61 63+
   6682		  65 20	74 6F 20 6C 6F+
   6683		  61 64	20 4C 43 2D 65+
   6684		  78 65	63 20 22 25 73+
   6685		  22 00
1  6686
1  6687
1  6688					 ; MISC. errors		 80xx
1  6689					 ;=============================================================================
1  6690	    3A78  73 79	6E 74 61 78 20+	 x_err1	 db 'syntax is DOS32A <execname.xxx>'				 ,0
   6691		  69 73	20 44 4F 53 33+
   6692		  32 41	20 3C 65 78 65+
   6693		  63 6E	61 6D 65 2E 78+
   6694		  78 78	3E 00
1  6695	    3A98  44 4F	53 20 72 65 70+	 x_err2	 db 'DOS reported an error (#%wh)'				 ,0
   6696		  6F 72	74 65 64 20 61+
   6697		  6E 20	65 72 72 6F 72+
   6698		  20 28	23 25 77 68 29+
   6699		  00
1  6700	    3AB5  44 50	4D 49 20 68 6F+	 x_err3	 db 'DPMI host reported	an error (#%wh)'			 ,0
   6701		  73 74	20 72 65 70 6F+
   6702		  72 74	65 64 20 61 6E+
   6703		  20 65	72 72 6F 72 20+
   6704		  28 23	25 77 68 29 00
1  6705
1  6706
1  6707					 ; WARNINGS		 90xx
1  6708					 ;=============================================================================
1  6709	    3AD8  6E 6F	20 65 78 74 65+	 w_msg1	 db 'no	extended memory	has been allocated'			 ,0
   6710		  6E 64	65 64 20 6D 65+
   6711		  6D 6F	72 79 20 68 61+
   6712		  73 20	62 65 65 6E 20+
   6713		  61 6C	6C 6F 63 61 74+
   6714		  65 64	00
1  6715	    3AFE  50 49	43 73 20 68 61+	 w_msg2	 db 'PICs have been relocated to INT %bh, INT %bh'		 ,0
   6716		  76 65	20 62 65 65 6E+
   6717		  20 72	65 6C 6F 63 61+
   6718		  74 65	64 20 74 6F 20+
   6719		  49 4E	54 20 25 62 68+
   6720		  2C 20	49 4E 54 20 25+
   6721		  62 68	00
1  6722	    3B2B  72 65	61 6C 20 6D 6F+	 w_msg3	 db 'real mode interrupt vector	had been modified: INT %bh'	 ,0
   6723		  64 65	20 69 6E 74 65+
   6724		  72 72	75 70 74 20 76+
   6725		  65 63	74 6F 72 20 68+
   6726		  61 64	20 62 65 65 6E+
   6727		  20 6D	6F 64 69 66 69+
   6728		  65 64	3A 20 49 4E 54+
   6729		  20 25	62 68 00
1  6730	    3B61  6D 6F	75 73 65 20 69+	 w_msg4	 db 'mouse initialization failed'				 ,0
   6731		  6E 69	74 69 61 6C 69+
   6732		  7A 61	74 69 6F 6E 20+
   6733		  66 61	69 6C 65 64 00
1  6734	    3B7D  6F 62	6A 65 63 74 20+	 w_msg5	 db 'object #%d	contains no data or code'			 ,0
   6735		  23 25	64 20 63 6F 6E+
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 122
dos32a.asm



   6736		  74 61	69 6E 73 20 6E+
   6737		  6F 20	64 61 74 61 20+
   6738		  6F 72	20 63 6F 64 65+
   6739		  00
1  6740	    3BA1  69 6E	63 6F 6D 70 61+	 w_msg6	 db 'incompatible version of DOS/32A already running'		 ,0
   6741		  74 69	62 6C 65 20 76+
   6742		  65 72	73 69 6F 6E 20+
   6743		  6F 66	20 44 4F 53 2F+
   6744		  33 32	41 20 61 6C 72+
   6745		  65 61	64 79 20 72 75+
   6746		  6E 6E	69 6E 67 00
1  6747
1  6748
1  6749					 ; RUN-TIME errors	 60xx
1  6750					 ;=============================================================================
1  6751	    3BD1  75 6E	6B 6E 6F 77 6E+	 r_msg80 db 'unknown error code	(#%bh)'					 ,0
   6752		  20 65	72 72 6F 72 20+
   6753		  63 6F	64 65 20 28 23+
   6754		  25 62	68 29 00
1  6755	    3BEB  6F 75	74 20 6F 66 20+	 r_msg81 db 'out of real-mode virtual stacks'				 ,0
   6756		  72 65	61 6C 2D 6D 6F+
   6757		  64 65	20 76 69 72 74+
   6758		  75 61	6C 20 73 74 61+
   6759		  63 6B	73 00
1  6760	    3C0B  6F 75	74 20 6F 66 20+	 r_msg82 db 'out of protected-mode virtual stacks'			 ,0
   6761		  70 72	6F 74 65 63 74+
   6762		  65 64	2D 6D 6F 64 65+
   6763		  20 76	69 72 74 75 61+
   6764		  6C 20	73 74 61 63 6B+
   6765		  73 00
1  6766	    3C30  65 78	74 65 6E 64 65+	 r_msg83 db 'extended memory blocks have been destroyed	(#%l)'		 ,0
   6767		  64 20	6D 65 6D 6F 72+
   6768		  79 20	62 6C 6F 63 6B+
   6769		  73 20	68 61 76 65 20+
   6770		  62 65	65 6E 20 64 65+
   6771		  73 74	72 6F 79 65 64+
   6772		  20 28	23 25 6C 29 00
1  6773	    3C61  44 4F	53 2F 34 47 20+	 r_msg84 db 'DOS/4G API	calls not supported'				 ,0
   6774		  41 50	49 20 63 61 6C+
   6775		  6C 73	20 6E 6F 74 20+
   6776		  73 75	70 70 6F 72 74+
   6777		  65 64	00
1  6778
1  6779
1  6780
1  6781					 ; Verbose messages
1  6782					 ;=============================================================================
1  6783	    3C80  50 72	6F 63 65 73 73+	 v_msg01 db 'Processor:	%d, System: %s,	Memory:	DOS=%dKB, DPMI=%d%s',cre
   6784		  6F 72	3A 20 25 64 2C+
   6785		  20 53	79 73 74 65 6D+
   6786		  3A 20	25 73 2C 20 4D+
   6787		  65 6D	6F 72 79 3A 20+
   6788		  44 4F	53 3D 25 64 4B+
   6789		  42 2C	20 44 50 4D 49+
   6790		  3D 25	64 25 73 0D 0A+
   6791		  00
1  6792	    3CB9  4E 4F	4E 45 00 58 4D+	 v_msg02 db 'NONE',0, 'XMS',0,0, 'VCPI',0, 'DPMI',0
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 123
dos32a.asm



   6793		  53 00	00 56 43 50 49+
   6794		  00 44	50 4D 49 00
1  6795	    3CCD  4C 45	00 4C 58 00 4C+	 v_msg03 db 'LE',0,'LX',0,'LC',0
   6796		  43 00
1  6797	    3CD6  4B 42	00		 v_msg04 db 'KB',0
1  6798	    3CD9  4D 42	00		 v_msg05 db 'MB',0
1  6799	    3CDC  4C 6F	61 64 69 6E 67+	 v_msg10 db 'Loading program "%s", %s-style',cre
   6800		  20 70	72 6F 67 72 61+
   6801		  6D 20	22 25 73 22 2C+
   6802		  20 25	73 2D 73 74 79+
   6803		  6C 65	0D 0A 00
1  6804	    3CFD  4F 62	6A 65 63 74 20+	 v_msg11 db 'Object #%d	loaded at %l, V/Psize: %l/%l, Flags=%w,	Sel=%w',cre
   6805		  23 25	64 20 6C 6F 61+
   6806		  64 65	64 20 61 74 20+
   6807		  25 6C	2C 20 56 2F 50+
   6808		  73 69	7A 65 3A 20 25+
   6809		  6C 2F	25 6C 2C 20 46+
   6810		  6C 61	67 73 3D 25 77+
   6811		  2C 20	53 65 6C 3D 25+
   6812		  77 0D	0A 00
1  6813	    3D39  53 74	61 72 74 75 70+	 v_msg12 db 'Startup CS:EIP=%w:%l, SS:ESP=%w:%l, %s EIP=%d:%l',cr
   6814		  20 43	53 3A 45 49 50+
   6815		  3D 25	77 3A 25 6C 2C+
   6816		  20 53	53 3A 45 53 50+
   6817		  3D 25	77 3A 25 6C 2C+
   6818		  20 25	73 20 45 49 50+
   6819		  3D 25	64 3A 25 6C 0D+
   6820		  0A
1  6821	    3D6B  4D 65	6D 6F 72 79 20+		 db 'Memory left: DOS=%dKB, DPMI=%d%s, PSP_Sel=%w, Env_Sel=%w, '
   6822		  6C 65	66 74 3A 20 44+
   6823		  4F 53	3D 25 64 4B 42+
   6824		  2C 20	44 50 4D 49 3D+
   6825		  25 64	25 73 2C 20 50+
   6826		  53 50	5F 53 65 6C 3D+
   6827		  25 77	2C 20 45 6E 76+
   6828		  5F 53	65 6C 3D 25 77+
   6829		  2C 20
1  6830	    3DA5  45 6E	76 5F 53 65 67+		 db 'Env_Seg=%w',cre
   6831		  3D 25	77 0D 0A 00
1  6832
1  6833
1  6834					 ;=============================================================================
1  6835	    3DB2  65 78	63 65 70 74 69+	 excmsgE db 'exception',0
   6836		  6F 6E	00
1  6837	    3DBC  75 6E	65 78 70 65 63+	 excmsgI db 'unexpected	interrupt',0
   6838		  74 65	64 20 69 6E 74+
   6839		  65 72	72 75 70 74 00
1  6840	    3DD1  73 6F	66 74 77 61 72+	 excmsgS db 'software interrupt',0
   6841		  65 20	69 6E 74 65 72+
   6842		  72 75	70 74 00
1  6843	    3DE4  25 73	20 28 49 4E 54+	 excmsg1 db '%s	(INT %bh)',cr
   6844		  20 25	62 68 29 0D 0A
1  6845	    3DF2  49 64	65 6E 74 69 74+		 db 'Identity: %s at <%w:%l>',cre
   6846		  79 3A	20 25 73 20 61+
   6847		  74 20	3C 25 77 3A 25+
   6848		  6C 3E	0D 0A 00
1  6849	    3E0C  4C 69	6E 65 61 72 20+	 excmsg2 db 'Linear crash address <%d:%l>',0
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 124
dos32a.asm



   6850		  63 72	61 73 68 20 61+
   6851		  64 64	72 65 73 73 20+
   6852		  3C 25	64 3A 25 6C 3E+
   6853		  00
1  6854	    3E29  55 6E	72 65 6C 6F 63+	 excmsg3 db 'Unrelocated crash address <%d:%l>',0
   6855		  61 74	65 64 20 63 72+
   6856		  61 73	68 20 61 64 64+
   6857		  72 65	73 73 20 3C 25+
   6858		  64 3A	25 6C 3E 00
1  6859	    3E4B  2C 20	65 72 72 6F 72+	 excmsg4 db ', error code pushed on stack <%l>',0
   6860		  20 63	6F 64 65 20 70+
   6861		  75 73	68 65 64 20 6F+
   6862		  6E 20	73 74 61 63 6B+
   6863		  20 3C	25 6C 3E 00
1  6864	    3E6D  44 65	62 75 67 67 65+	 excmsg5 db 'Debugger trap (INT	1) at <%w:%l>, %s address <%d:%l>',cre
   6865		  72 20	74 72 61 70 20+
   6866		  28 49	4E 54 20 31 29+
   6867		  20 61	74 20 3C 25 77+
   6868		  3A 25	6C 3E 2C 20 25+
   6869		  73 20	61 64 64 72 65+
   6870		  73 73	20 3C 25 64 3A+
   6871		  25 6C	3E 0D 0A 00
1  6872	    3EA4  42 72	65 61 6B 70 6F+	 excmsg6 db 'Breakpoint	trap (INT 3) at	<%w:%l>, %s address <%d:%l>',cre
   6873		  69 6E	74 20 74 72 61+
   6874		  70 20	28 49 4E 54 20+
   6875		  33 29	20 61 74 20 3C+
   6876		  25 77	3A 25 6C 3E 2C+
   6877		  20 25	73 20 61 64 64+
   6878		  72 65	73 73 20 3C 25+
   6879		  64 3A	25 6C 3E 0D 0A+
   6880		  00
1  6881	    3EDD  4E 75	6C 6C 2D 70 6F+	 nulmsg0 db 'Null-pointer protection at	<%w:%l>, %s address <%d:%l>',cre
   6882		  69 6E	74 65 72 20 70+
   6883		  72 6F	74 65 63 74 69+
   6884		  6F 6E	20 61 74 20 3C+
   6885		  25 77	3A 25 6C 3E 2C+
   6886		  20 25	73 20 61 64 64+
   6887		  72 65	73 73 20 3C 25+
   6888		  64 3A	25 6C 3E 0D 0A+
   6889		  00
1  6890	    3F16  5B 41	5D 62 6F 72 74+	 excmsg7 db '[A]bort, [P]roceed, [T]race =>',0
   6891		  2C 20	5B 50 5D 72 6F+
   6892		  63 65	65 64 2C 20 5B+
   6893		  54 5D	72 61 63 65 20+
   6894		  3D 3E	00
1  6895	    3F35  6C 69	6E 65 61 72 00	 excmsgA db 'linear',0
1  6896	    3F3C  75 6E	72 65 6C 6F 63+	 excmsgB db 'unrelocated',0
   6897		  61 74	65 64 00
1  6898	    3F48  4D 6F	64 75 6C 65 20+	 excmsgC db 'Module name: "%s",	Process_ID=%w',cre
   6899		  6E 61	6D 65 3A 20 22+
   6900		  25 73	22 2C 20 50 72+
   6901		  6F 63	65 73 73 5F 49+
   6902		  44 3D	25 77 0D 0A 00
1  6903	    3F6B  45 46	4C 41 47 53 20+	 dbgmsg1 db 'EFLAGS = %l [%l|%l]  ',0
   6904		  3D 20	25 6C 20 5B 25+
   6905		  6C 7C	25 6C 5D 20 20+
   6906		  00
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 125
dos32a.asm



1  6907	    3F81  43 53	3A 5B 45 49 50+	 dbgmsg2 db 'CS:[EIP] =	%b %b %b %b %b %b %b %b	%b %b',0
   6908		  5D 20	3D 20 25 62 20+
   6909		  25 62	20 25 62 20 25+
   6910		  62 20	25 62 20 25 62+
   6911		  20 25	62 20 25 62 20+
   6912		  25 62	20 25 62 00
1  6913	    3FAA  45 41	58 20 3D 20 25+	 dbgmsg4 db 'EAX = %l	 ESI = %l	Last INT = %bh	  SS:[ESP+00] =	%l',cre
   6914		  6C 20	20 20 20 45 53+
   6915		  49 20	3D 20 25 6C 20+
   6916		  20 20	20 20 20 20 4C+
   6917		  61 73	74 20 49 4E 54+
   6918		  20 3D	20 25 62 68 20+
   6919		  20 20	20 53 53 3A 5B+
   6920		  45 53	50 2B 30 30 5D+
   6921		  20 3D	20 25 6C 0D 0A+
   6922		  00
1  6923	    3FEA  45 42	58 20 3D 20 25+	 dbgmsg5 db 'EBX = %l	 EDI = %l	CR0 = %l    SS:[ESP+04]	= %l',cre
   6924		  6C 20	20 20 20 45 44+
   6925		  49 20	3D 20 25 6C 20+
   6926		  20 20	20 20 20 20 43+
   6927		  52 30	20 3D 20 25 6C+
   6928		  20 20	20 20 53 53 3A+
   6929		  5B 45	53 50 2B 30 34+
   6930		  5D 20	3D 20 25 6C 0D+
   6931		  0A 00
1  6932	    4024  45 43	58 20 3D 20 25+	 dbgmsg6 db 'ECX = %l	 EBP = %l	CR2 = %l    SS:[ESP+08]	= %l',cre
   6933		  6C 20	20 20 20 45 42+
   6934		  50 20	3D 20 25 6C 20+
   6935		  20 20	20 20 20 20 43+
   6936		  52 32	20 3D 20 25 6C+
   6937		  20 20	20 20 53 53 3A+
   6938		  5B 45	53 50 2B 30 38+
   6939		  5D 20	3D 20 25 6C 0D+
   6940		  0A 00
1  6941	    405E  45 44	58 20 3D 20 25+	 dbgmsg7 db 'EDX = %l	 ESP = %l	CR3 = %l    SS:[ESP+0C]	= %l',cre
   6942		  6C 20	20 20 20 45 53+
   6943		  50 20	3D 20 25 6C 20+
   6944		  20 20	20 20 20 20 43+
   6945		  52 33	20 3D 20 25 6C+
   6946		  20 20	20 20 53 53 3A+
   6947		  5B 45	53 50 2B 30 43+
   6948		  5D 20	3D 20 25 6C 0D+
   6949		  0A 00
1  6950	    4098  49 6E	76 61 6C 69 64+	 dbgmsgA db 'Invalid selector',0
   6951		  20 73	65 6C 65 63 74+
   6952		  6F 72	00
1  6953	    40A9  4E 55	4C 4C 20 73 65+	 dbgmsgB db 'NULL selector',0
   6954		  6C 65	63 74 6F 72 00
1  6955	    40B7  43 53	3A 20 3D 20 25+	 selmsg1 db 'CS: = %w  ',0
   6956		  77 20	20 00
1  6957	    40C2  44 53	3A 20 3D 20 25+	 selmsg2 db 'DS: = %w  ',0
   6958		  77 20	20 00
1  6959	    40CD  45 53	3A 20 3D 20 25+	 selmsg3 db 'ES: = %w  ',0
   6960		  77 20	20 00
1  6961	    40D8  53 53	3A 20 3D 20 25+	 selmsg4 db 'SS: = %w  ',0
   6962		  77 20	20 00
1  6963	    40E3  46 53	3A 20 3D 20 25+	 selmsg5 db 'FS: = %w  ',0
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 126
dos32a.asm



   6964		  77 20	20 00
1  6965	    40EE  47 53	3A 20 3D 20 25+	 selmsg6 db 'GS: = %w  ',0
   6966		  77 20	20 00
1  6967	    40F9  42 61	73 65 3D 25 6C+	 selmsg0 db 'Base=%l Limit=%l Gr=%s Seg=%s/%dbit Type=%d Acc=%w',cre
   6968		  20 4C	69 6D 69 74 3D+
   6969		  25 6C	20 47 72 3D 25+
   6970		  73 20	53 65 67 3D 25+
   6971		  73 2F	25 64 62 69 74+
   6972		  20 54	79 70 65 3D 25+
   6973		  64 20	41 63 63 3D 25+
   6974		  77 0D	0A 00
1  6975	    412E  42 59	54 45 00 50 41+	 selmsg9 db 'BYTE',0,'PAGE',0
   6976		  47 45	00
1  6977	    4138  44 41	54 41 00 43 4F+	 selmsg8 db 'DATA',0,'CODE',0
   6978		  44 45	00
1  6979	    4142  4B 45	52 4E 45 4C 3D+	 selmsgX db 'KERNEL=',0
   6980		  00
1  6981	    414A  43 4C	49 45 4E 54 3D+	 selmsgY db 'CLIENT=',0
   6982		  00
1  6983	    4152  41 50	50 2F 33 32 3D+	 selmsgZ db 'APP/32=',0
   6984		  00
1  6985	    415A  41 50	50 2F 3F 3F 3D+	 selmsgW db 'APP/??=',0
   6986		  00
1  6987
1  6988	    4162  69 6E	74 65 67 65 72+	 i_msg00 db 'integer division by zero'					 ,0
   6989		  20 64	69 76 69 73 69+
   6990		  6F 6E	20 62 79 20 7A+
   6991		  65 72	6F 00
1  6992	    417B  68 61	72 64 77 61 72+	 i_msg01 db 'hardware breakpoint'					 ,0
   6993		  65 20	62 72 65 61 6B+
   6994		  70 6F	69 6E 74 00
1  6995	    418F  4E 4D	49 00		 i_msg02 db 'NMI'							 ,0
1  6996	    4193  73 6F	66 74 77 61 72+	 i_msg03 db 'software breakpoint'					 ,0
   6997		  65 20	62 72 65 61 6B+
   6998		  70 6F	69 6E 74 00
1  6999	    41A7  6F 76	65 72 66 6C 6F+	 i_msg04 db 'overflow check fault'					 ,0
   7000		  77 20	63 68 65 63 6B+
   7001		  20 66	61 75 6C 74 00
1  7002	    41BC  62 6F	75 6E 64 73 20+	 i_msg05 db 'bounds check fault'					 ,0
   7003		  63 68	65 63 6B 20 66+
   7004		  61 75	6C 74 00
1  7005	    41CF  69 6E	76 61 6C 69 64+	 i_msg06 db 'invalid opcode fault'					 ,0
   7006		  20 6F	70 63 6F 64 65+
   7007		  20 66	61 75 6C 74 00
1  7008	    41E4  63 6F	70 72 6F 63 65+	 i_msg07 db 'coprocessor not available'					 ,0
   7009		  73 73	6F 72 20 6E 6F+
   7010		  74 20	61 76 61 69 6C+
   7011		  61 62	6C 65 00
1  7012	    41FE  64 6F	75 62 6C 65 20+	 i_msg08 db 'double fault'						 ,0
   7013		  66 61	75 6C 74 00
1  7014	    420B  63 6F	70 72 6F 63 65+	 i_msg09 db 'coprocessor segment overrun'				 ,0
   7015		  73 73	6F 72 20 73 65+
   7016		  67 6D	65 6E 74 20 6F+
   7017		  76 65	72 72 75 6E 00
1  7018	    4227  69 6E	76 61 6C 69 64+	 i_msg0A db 'invalid TSS fault'						 ,0
   7019		  20 54	53 53 20 66 61+
   7020		  75 6C	74 00
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 127
dos32a.asm



1  7021	    4239  73 65	67 6D 65 6E 74+	 i_msg0B db 'segment not present fault'					 ,0
   7022		  20 6E	6F 74 20 70 72+
   7023		  65 73	65 6E 74 20 66+
   7024		  61 75	6C 74 00
1  7025	    4253  73 74	61 63 6B 20 66+	 i_msg0C db 'stack fault'						 ,0
   7026		  61 75	6C 74 00
1  7027	    425F  67 65	6E 65 72 61 6C+	 i_msg0D db 'general protection	fault'					 ,0
   7028		  20 70	72 6F 74 65 63+
   7029		  74 69	6F 6E 20 66 61+
   7030		  75 6C	74 00
1  7031	    4278  70 61	67 65 20 66 61+	 i_msg0E db 'page fault'						 ,0
   7032		  75 6C	74 00
1  7033
1  7034
   7035
   7036
   7037	    4283			 $theend proc near
   7038					 If EXEC_TYPE eq 0
   7039	    4283  01*(00)			 db 1 dup(00h)
   7040					 Else
   7041						 db 9 dup(00h)
   7042					 Endif
   7043	    4284			 $theend endp
   7044
   7045	    4284			 @text16_end	 label byte
   7046	    4284			 _TEXT16 ends
   7047
   7048
   7049
   7050					 ;=============================================================================
   7051	    0000			 _STACK	 segment para stack use16 'STACK'
   7052	    0000  0800*(??)			 db	 STACKSIZE*16 dup(?)
   7053	    0800			 _STACK	 ends
   7054					 end start
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 128
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

$THEEND			Near   _TEXT16:4283		   #7037
??DATE			Text   "12/05/21"		   221
??FILENAME		Text   "dos32a	"
??TIME			Text   "16:31:37"		   223
??VERSION		Number 040A
@@0			Near   _TEXT16:008B		   #362	 370
@@0			Near   _TEXT16:00BB		   #384	 393
@@0			Near   _TEXT16:018F		   515	#520
@@0			Near   _TEXT16:01A3		   529	#534
@@0			Near   _TEXT16:01D3		   543	#564
@@0			Near   _TEXT16:01F0		   574	576  #583
@@0			Near   _TEXT16:020A		   592	#603
@@0			Near   _TEXT16:021E		   612	#617
@@0			Near   _TEXT16:0226		   626	#628
@@0			Near   _TEXT16:023A		   640	#642
@@0			Near   _TEXT16:0266		   655	657  662  #665
@@0			Near   _TEXT16:02F4		   779	#781
@@0			Near   _TEXT16:031D		   803	#805
@@0			Near   _TEXT16:08FB		   1495	 #1497
@@0			Near   _TEXT16:0AD7		   #1707  1728
@@0			Near   _TEXT16:0D95		   2012	 2014  2017  #2023
@@0			Near   _TEXT16:125F		   #2517  2520
@@0			Near   _TEXT16:12D7		   2575	 #2577
@@0			Near   _TEXT16:14AD		   #2728  2729
@@0			Near   _TEXT16:14D6		   2736	 2739  2742  #2744
@@0			Near   _TEXT16:14E7		   #2754  2758
@@0			Near   _TEXT16:1507		   #2770  2773
@@0			Near   _TEXT16:1751		   3074	 #3077
@@0			Near   _TEXT16:1B39		   #3594  3617
@@0			Near   _TEXT16:1C13		   #3660  3684
@@0			Near   _TEXT16:1DA0		   3810	 #3814
@@0			Near   _TEXT16:2177		   #4217  4220
@@0			Near   _TEXT16:29E7		   5194	 #5196
@@0			Near   _TEXT16:2ACB		   #5260  5298
@@0			Near   _TEXT16:2BF6		   #5363  5367
@@0			Near   _TEXT16:2DF1		   5565	 #5567
@@00			Near   _TEXT16:2C92		   5426	 #5446
@@01			Near   _TEXT16:2CA5		   5428	 #5456
@@01_1			Near   _TEXT16:2CB8		   5457	 #5461
@@1			Near   _TEXT16:0037		   302	304  #311
@@1			Near   _TEXT16:00A1		   367	#372  378
@@1			Near   _TEXT16:00D3		   386	#394
@@1			Near   _TEXT16:00DD		   #399	 407
@@1			Near   _TEXT16:00F1		   #412	 420
@@1			Near   _TEXT16:010C		   431	#433
@@1			Near   _TEXT16:0140		   461	#463
@@1			Near   _TEXT16:0189		   516	#519
@@1			Near   _TEXT16:019D		   530	#533
@@1			Near   _TEXT16:01CF		   559	#561
@@1			Near   _TEXT16:01ED		   579	#582
@@1			Near   _TEXT16:0204		   596	#600
@@1			Near   _TEXT16:0218		   613	#616
@@1			Near   _TEXT16:022D		   627	#630
@@1			Near   _TEXT16:0240		   641	#644
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 129
Symbol Table



@@1			Near   _TEXT16:0283		   731	#734
@@1			Near   _TEXT16:0325		   #808	 814
@@1			Near   _TEXT16:0469		   #958	 970
@@1			Near   _TEXT16:052F		   1095	 #1098
@@1			Near   _TEXT16:057E		   #1128  1132
@@1			Near   _TEXT16:06A9		   1251	 #1256
@@1			Near   _TEXT16:086B		   #1425  1433
@@1			Near   _TEXT16:0905		   #1500  1503
@@1			Near   _TEXT16:0965		   #1547  1550
@@1			Near   _TEXT16:09BC		   #1592  1595
@@1			Near   _TEXT16:0A44		   1651	 #1656
@@1			Near   _TEXT16:0B04		   1715	 #1719
@@1			Near   _TEXT16:0B7C		   #1755  1775
@@1			Near   _TEXT16:0C2E		   1830	 #1833
@@1			Near   _TEXT16:0DAA		   2002	 2004  2006  2025  #2036
@@1			Near   _TEXT16:0F8B		   2234	 #2241
@@1			Near   _TEXT16:1073		   2320	 2322  #2327
@@1			Near   _TEXT16:1169		   2404	 #2409
@@1			Near   _TEXT16:1207		   #2473  2476
@@1			Near   _TEXT16:1284		   2533	 #2536
@@1			Near   _TEXT16:13B4		   2644	 2646  #2651
@@1			Near   _TEXT16:169E		   2973	 #2986
@@1			Near   _TEXT16:1792		   3088	 3092  #3095
@@1			Near   _TEXT16:1B5B		   3600	 #3602
@@1			Near   _TEXT16:1C38		   3666	 #3668
@@1			Near   _TEXT16:1CF8		   3741	 #3744
@@1			Near   _TEXT16:1D39		   #3770  3773
@@1			Near   _TEXT16:1D71		   3790	 #3794
@@1			Near   _TEXT16:1DFE		   #3858  3861
@@1			Near   _TEXT16:1F4E		   3969	 #3973
@@1			Near   _TEXT16:20EA		   #4166  4169
@@1			Near   _TEXT16:2337		   #4413  4416
@@1			Near   _TEXT16:2695		   4843	 #4846
@@1			Near   _TEXT16:26C3		   4859	 #4861
@@1			Near   _TEXT16:26E3		   4872	 #4874
@@1			Near   _TEXT16:27EE		   #5033  5042
@@1			Near   _TEXT16:297A		   5156	 #5159
@@1			Near   _TEXT16:2A0A		   #5205  5230
@@1			Near   _TEXT16:2A84		   #5237  5253
@@1			Near   _TEXT16:2AFB		   5269	 #5272
@@1			Near   _TEXT16:2BB2		   5330	 #5337
@@1			Near   _TEXT16:2C01		   5360	 5362  #5366
@@1			Near   _TEXT16:2D90		   5516	 5519  #5533
@@1			Near   _TEXT16:2DD7		   5556	 #5558
@@1			Near   _TEXT16:2E86		   5606	 #5612
@@1			Near   _TEXT16:2ED9		   5637	 #5639
@@1			Near   _TEXT16:2F99		   5778	 #5790
@@1			Near   _TEXT16:3025		   5824	 #5835
@@1			Near   _TEXT16:314E		   5960	 #5969
@@1			Near   _TEXT16:328C		   6065	 #6072
@@1			Near   _TEXT16:338D		   6166	 6168  #6171
@@10			Near   _TEXT16:2CC6		   5430	 #5468
@@11			Near   _TEXT16:2CD4		   5432	 #5475
@@2			Near   _TEXT16:00D4		   391	#395
@@2			Near   _TEXT16:00EF		   403	#408
@@2			Near   _TEXT16:0103		   416	#421
@@2			Near   _TEXT16:0158		   #475	 486
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 130
Symbol Table



@@2			Near   _TEXT16:01E9		   577	#580
@@2			Near   _TEXT16:0288		   733	#735
@@2			Near   _TEXT16:046A		   956	#960
@@2			Near   _TEXT16:0591		   1129	 #1136
@@2			Near   _TEXT16:0883		   1427	 1429  1431  #1434
@@2			Near   _TEXT16:0937		   #1523  1525
@@2			Near   _TEXT16:09CF		   #1603  1606
@@2			Near   _TEXT16:0A47		   #1657  1662
@@2			Near   _TEXT16:0B0A		   1717	 #1720
@@2			Near   _TEXT16:0B94		   #1762  1774
@@2			Near   _TEXT16:0DB1		   2032	 #2051
@@2			Near   _TEXT16:0F92		   2239	 #2245
@@2			Near   _TEXT16:1084		   2326	 #2333
@@2			Near   _TEXT16:118A		   2415	 #2421
@@2			Near   _TEXT16:1215		   2472	 #2477
@@2			Near   _TEXT16:13C6		   2650	 #2657
@@2			Near   _TEXT16:17A8		   3090	 3094  #3102
@@2			Near   _TEXT16:1E4F		   #3885  3888
@@2			Near   _TEXT16:1F71		   3985	 #3989
@@2			Near   _TEXT16:2121		   #4182  4185
@@2			Near   _TEXT16:29A1		   5163	 #5168
@@2			Near   _TEXT16:2A68		   5213	 5219  #5227
@@2			Near   _TEXT16:2ABA		   5241	 #5249
@@2			Near   _TEXT16:2B40		   5288	 #5291
@@2			Near   _TEXT16:2DFA		   5559	 #5571
@@2			Near   _TEXT16:3164		   5975	 #5981
@@2			Near   _TEXT16:33A3		   6172	 6174  #6177
@@2A			Near   _TEXT16:0E02		   2062	 #2075
@@2B			Near   _TEXT16:0E75		   2106	 2112  #2117
@@3			Near   _TEXT16:00F0		   401	405  #409
@@3			Near   _TEXT16:0104		   414	418  #422
@@3			Near   _TEXT16:028A		   #736	 741
@@3			Near   _TEXT16:0585		   #1130  1141
@@3			Near   _TEXT16:0B2D		   1718	 #1731
@@3			Near   _TEXT16:0BC4		   1767	 1769  1771  #1776
@@3			Near   _TEXT16:0EA3		   2129	 #2136
@@3			Near   _TEXT16:109C		   2335	 #2339
@@3			Near   _TEXT16:1219		   2475	 #2479
@@3			Near   _TEXT16:133A		   2607	 #2614
@@3			Near   _TEXT16:13E1		   2659	 #2663
@@3			Near   _TEXT16:1E74		   3880	 #3901
@@3			Near   _TEXT16:1F78		   #3991  3995
@@3			Near   _TEXT16:29A8		   5161	 5167  #5171
@@3			Near   _TEXT16:2B44		   5283	 #5292
@@3			Near   _TEXT16:2DFE		   5569	 #5572
@@3			Near   _TEXT16:3077		   #5870  5882	5902  5913
@@3			Near   _TEXT16:33B6		   6180	 #6183
@@4			Near   _TEXT16:029A		   737	#743
@@4			Near   _TEXT16:0B53		   1733	 1735  1737  #1741
@@4			Near   _TEXT16:0BB8		   1765	 #1772
@@4			Near   _TEXT16:0EAA		   2134	 #2139
@@4			Near   _TEXT16:10A3		   2338	 #2342
@@4			Near   _TEXT16:1341		   2612	 #2617
@@4			Near   _TEXT16:13E8		   2662	 #2666
@@4			Near   _TEXT16:1EA5		   3895	 #3912
@@4			Near   _TEXT16:1F87		   3990	 #3997
@@4			Near   _TEXT16:281A		   #5049  5051
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 131
Symbol Table



@@4			Near   _TEXT16:29CF		   5176	 #5181
@@4			Near   _TEXT16:2B5F		   5293	 #5300
@@4			Near   _TEXT16:2E05		   5568	 #5574
@@4			Near   _TEXT16:3084		   #5874  5890
@@4			Near   _TEXT16:33C2		   6182	 #6187
@@5			Near   _TEXT16:02A9		   744	#747
@@5			Near   _TEXT16:0B7B		   1742	 1749  #1752
@@5			Near   _TEXT16:0EC5		   2143	 #2149
@@5			Near   _TEXT16:135F		   2621	 #2626
@@5			Near   _TEXT16:1EDC		   3924	 #3929
@@5			Near   _TEXT16:1F90		   #4001
@@5			Near   _TEXT16:29D4		   5153	 #5183
@@5			Near   _TEXT16:2B53		   #5296  5307
@@5			Near   _TEXT16:309F		   5877	 #5883	5887  5892  5895
@@6			Near   _TEXT16:02DB		   763	#770
@@6			Near   _TEXT16:0EE1		   2151	 #2158
@@6			Near   _TEXT16:1EF1		   3933	 #3936
@@6			Near   _TEXT16:30A7		   5873	 #5886
@@6			Near   _TEXT16:3230		   6038	 #6042
@@8			Near   _TEXT16:30B3		   5875	 #5891
@@9			Near   _TEXT16:30CF		   #5903  5912
@@AB			Near   _TEXT16:0FF6		   2277	 #2286
@@ARGS			Near   _TEXT16:0383		   847	#860
@@B			Near   _TEXT16:03C0		   868	#890
@@C			Near   _TEXT16:03A2		   864	#876
@@D			Near   _TEXT16:03F4		   874	#908
@@DEC			Near   _TEXT16:0420		   911	#926
@@DEC0			Near   _TEXT16:043B		   927	929  931  933  #935
@@DEC1			Near   _TEXT16:0444		   938	#940
@@DEC2			Near   _TEXT16:0448		   934	#942
@@DEC3			Near   _TEXT16:044B		   941	#944
@@DONE			Near   _TEXT16:0070		   338	#340
@@DONE			Near   _TEXT16:00B6		   355	357  371  374  #379
@@DONE			Near   _TEXT16:016E		   479	481  #487
@@DONE			Near   _TEXT16:02E5		   739	746  #774
@@DONE			Near   _TEXT16:0330		   790	#815
@@DONE			Near   _TEXT16:0559		   1093	 #1114
@@DONE			Near   _TEXT16:0590		   1120	 #1135
@@DONE			Near   _TEXT16:07E5		   1345	 #1364
@@DONE			Near   _TEXT16:081A		   1369	 1371  #1383
@@DONE			Near   _TEXT16:088B		   #1438
@@DONE			Near   _TEXT16:089A		   1445	 #1448
@@DONE			Near   _TEXT16:08BE		   1454	 1458  #1469
@@DONE			Near   _TEXT16:0C6F		   1844	 #1857
@@DONE			Near   _TEXT16:0C96		   1861	 #1870
@@DONE			Near   _TEXT16:0CC1		   1874	 #1889
@@DONE			Near   _TEXT16:0D09		   1893	 #1910
@@DONE			Near   _TEXT16:0D1B		   1915	 #1919
@@DONE			Near   _TEXT16:0EE4		   #2159  2202
@@DONE			Near   _TEXT16:1225		   2478	 #2483
@@DONE			Near   _TEXT16:1271		   2503	 #2526
@@DONE			Near   _TEXT16:1A4B		   3390	 #3398
@@DONE			Near   _TEXT16:1A72		   3424	 #3430
@@DONE			Near   _TEXT16:1B92		   3609	 #3618	3636  3643
@@DONE			Near   _TEXT16:1C73		   3671	 #3685	3710
@@DONE			Near   _TEXT16:2732		   4875	 #4895
@@DONE			Near   _TEXT16:2903		   5112	 #5118
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 132
Symbol Table



@@DONE			Near   _TEXT16:29D6		   #5184
@@DONE			Near   _TEXT16:2C7C		   #5433  5447	5450  5460  5463  5470	5477
@@DONE			Near   _TEXT16:2D22		   5490	 #5500
@@DONE			Near   _TEXT16:2DB0		   5510	 5532  5540  #5542
@@DONE			Near   _TEXT16:2F9C		   5776	 5789  #5791
@@DONE			Near   _TEXT16:3028		   5834	 #5836
@@DONE			Near   _TEXT16:3378		   6156	 6158  #6160
@@DONE			Near   _TEXT16:3401		   6193	 #6219
@@ERR			Near   _TEXT16:006F		   319	322  #339
@@ERR			Near   _TEXT16:05F1		   1162	 1167  1173  1179  #1181
@@ERR			Near   _TEXT16:06E5		   1247	 1255  1260  #1276
@@ERR			Near   _TEXT16:075B		   1287	 1291  1295  1299  1303	 1308  1312  1316  #1321
@@ERR			Near   _TEXT16:0850		   1397	 1404  #1406
@@ERR			Near   _TEXT16:088C		   1417	 1421  #1439
@@ERR			Near   _TEXT16:0959		   1516	 1518  #1540
@@ERR			Near   _TEXT16:099A		   1561	 #1576
@@ERR			Near   _TEXT16:09EC		   1585	 1587  1594  #1616
@@ERR			Near   _TEXT16:0A7E		   1659	 1666  1670  #1675
@@ERR			Near   _TEXT16:1B9F		   3606	 #3621	3633
@@ERR			Near   _TEXT16:1C80		   3681	 #3688	3708
@@ERR			Near   _TEXT16:1D48		   3764	 #3776
@@ERR			Near   _TEXT16:1F15		   3913	 #3947
@@ERR			Near   _TEXT16:1FD0		   4021	 #4029
@@ERR			Near   _TEXT16:2021		   4046	 #4054
@@ERR			Near   _TEXT16:2130		   4181	 #4188
@@ERR1			Near   _TEXT16:313C		   #5961  5990
@@ERR2			Near   _TEXT16:3148		   #5966  5973	5995
@@EXIT			Near   _TEXT16:0172		   468	470  #490
@@EXIT			Near   _TEXT16:02E8		   772	#777
@@FULL			Near   _TEXT16:08BA		   #1466
@@HEX			Near   _TEXT16:0402		   893	898  902  906  #913  924
@@HEX0			Near   _TEXT16:041A		   919	#921
@@L			Near   _TEXT16:03DC		   872	#900
@@L1			Near   _TEXT16:1CBD		   3697	 #3705
@@L1			Near   _TEXT16:2D56		   5514	 #5518
@@L1			Near   _TEXT16:2E42		   5583	 5587  #5590
@@L2			Near   _TEXT16:2D5D		   5517	 #5520
@@L2			Near   _TEXT16:2E57		   5591	 #5595
@@L3			Near   _TEXT16:2D71		   5521	 #5525
@@L4			Near   _TEXT16:2D7C		   5524	 #5527
@@L5			Near   _TEXT16:2DA6		   5535	 #5538
@@L6			Near   _TEXT16:2DAA		   5537	 #5539
@@LOOP			Near   _TEXT16:0361		   #845	 853  884  894	899  907  912
@@LOOP			Near   _TEXT16:0FAA		   #2253  2285
@@LOOP			Near   _TEXT16:1259		   #2514  2521
@@LOW			Near   _TEXT16:1BAC		   3593	 #3625
@@LOW			Near   _TEXT16:1C8D		   3659	 #3692
@@MOD			Near   _TEXT16:16A5		   2976	 2978  2980  2982  2984	 #2989
@@NEXT			Near   _TEXT16:036C		   849	#851  862  875	878
@@NEXT			Near   _TEXT16:0EE9		   2007	 #2165
@@NULL			Near   _TEXT16:2C7E		   5422	 #5435
@@OK			Near   _TEXT16:16CB		   2995	 #2998
@@PR			Near   _TEXT16:1004		   2279	 #2291
@@S			Near   _TEXT16:03AA		   866	#879
@@S0			Near   _TEXT16:03B0		   #881	 889
@@S1			Near   _TEXT16:03BD		   886	#888
@@SKIP			Near   _TEXT16:090B		   1477	 #1504
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 133
Symbol Table



@@TR			Near   _TEXT16:1022		   2281	 #2299
@@W			Near   _TEXT16:03CE		   870	#895
@@X0			Near   _TEXT16:0131		   443	#446
@@X1			Near   _TEXT16:0135		   435	438  #450
@@X1			Near   _TEXT16:0F36		   2177	 2181  2188  2192  #2201
@@X2			Near   _TEXT16:0134		   440	#449
@@X3			Near   _TEXT16:0133		   445	#448
@AREA1_DB		Byte   _TEXT16:3688		   6444	 6449  6451  6452  #6508
@AREA1_DD		Dword  _TEXT16:3688		   6421	 6422  6423  6425  6426	 6428  6429  6430  6431	 6432  6434  6435 +
							   6436	 6437  6438  6439  6440	 6441  6442  6446  6447	 6448  #6510
@AREA1_DW		Word   _TEXT16:3688		   6420	 6445  #6509
@AREA2_DB		Byte   _TEXT16:0074		   #345
@AREA2_DD		Dword  _TEXT16:0074		   #347	 6455
@AREA2_DW		Word   _TEXT16:0074		   #346	 6454
@C			Byte   _TEXT16:033D		   825	826  #830
@CPU			Text   0F8FH			   #111	 #286  #721  #786  #819	 #959  #975  #1042  #1057  #1967  #2489	  +
							   #2549  #2825	 #3205	#4720  #5014  #5937  #5980
@CR			Byte   _TEXT16:0345		   832	#834
@CURSEG			Text   _STACK			   #49	#51  #53  #55  #115  #237  #7051
@FILENAME		Text   DOS32A
@LOAD_BLOCK		Near   _TEXT16:0C00		   1809	 #1813
@PRT_C			Near   _TEXT16:0338		   #827	 833
@SHOW_STATUS_1		Near   _TEXT16:14A8		   2313	 2637  #2725
@SHOW_STATUS_2		Near   _TEXT16:14B3		   2315	 2639  #2733
@SHOW_STATUS_3		Near   _TEXT16:14DC		   2317	 2641  #2749
@SHOW_STATUS_4		Near   _TEXT16:1505		   2325	 2649  #2768
@TEXT16_BEG		Byte   _TEXT16:0000		   #241	 6199  6200
@TEXT16_END		Byte   _TEXT16:4284		   6200	 #7045
@V_1BH			Near   _TEXT16:155B		   2832	 #2861
@V_1CH			Near   _TEXT16:15AD		   2834	 #2892
@V_1CH_00		Near   _TEXT16:15C2		   2893	 #2900	3016
@V_1CH_01		Near   _TEXT16:15E1		   2895	 #2910
@V_1CH_02		Near   _TEXT16:160B		   2897	 #2925
@V_4F00H		Near   _TEXT16:1639		   2836	 #2958
@V_4F01H		Near   _TEXT16:1639		   2838	 #2959
@V_4F04H		Near   _TEXT16:16D0		   2840	 #3014
@V_4F04H_01		Near   _TEXT16:16E7		   3018	 #3023
@V_4F04H_02		Near   _TEXT16:1713		   3020	 #3039
@V_4F09H		Near   _TEXT16:1743		   2842	 #3072
@V_4F0AH		Near   _TEXT16:17B7		   2844	 #3117
@V_ERR			Near   _TEXT16:1842		   2898	 3021  3076  #3155
@V_OK			Near   _TEXT16:182F		   2923	 2940  2987  3037  3055	 3101  3105  3128  #3151
@V_STD			Near   _TEXT16:1810		   2913	 2928  3026  3042  #3143
@WORDSIZE		Text   2			   #49	#51  #53  #55  #111  #115  #237	 #286  #721  #786  #819	 #959	  +
							   #975	 #1042	#1057  #1967  #2489  #2549  #2825  #3205  #4720	 #5014	  +
							   #5937  #5980	 #7051
@_7160			Near   _TEXT16:20C6		   3313	 #4158
@_716C			Near   _TEXT16:2143		   3315	 #4205
@_FF80			Near   _TEXT16:2327		   4254	 #4409
@_FF88			Near   _TEXT16:2231		   4241	 #4294
@_FF89			Near   _TEXT16:226D		   4243	 #4319
@_FF8A			Near   _TEXT16:229E		   4245	 #4343
@_FF8D			Near   _TEXT16:22D7		   4247	 #4365
@_FF8E			Near   _TEXT16:22F6		   4249	 #4383
@_FF8F			Near   _TEXT16:2314		   4251	 #4396
@_FF90			Near   _TEXT16:235F		   4256	 #4434
@_FF91			Near   _TEXT16:237F		   4258	 #4452
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 134
Symbol Table



@_FF92			Near   _TEXT16:238A		   4260	 #4463
@_FF93			Near   _TEXT16:2399		   4262	 #4477
@_FF94			Near   _TEXT16:23A4		   4265	 #4487
@_FF95			Near   _TEXT16:23B9		   4267	 #4501
@_FF96			Near   _TEXT16:23EE		   4269	 #4521
@_FF97			Near   _TEXT16:2413		   4271	 #4539
@_FF98			Near   _TEXT16:2455		   4274	 #4563
@_FF99			Near   _TEXT16:2464		   4276	 #4575
@_FF9A			Near   _TEXT16:2473		   4278	 #4589
@_FF9X1			Near   _TEXT16:2485		   4452	 4463  4477  4563  4575	 #4599
@_FF9X2			Near   _TEXT16:2492		   4455	 4480  #4604
@_FF9X3			Near   _TEXT16:24A2		   4567	 #4608
@__0009H		Near   _TEXT16:25DA		   4727	 #4757
@__000CH		Near   _TEXT16:2620		   4729	 #4785
@__0014H		Near   _TEXT16:2626		   4731	 #4797
@__0016H		Near   _TEXT16:273A		   4733	 #4906
@__0017H		Near   _TEXT16:2772		   4735	 #4928
@__0018H		Near   _TEXT16:2642		   4737	 #4811
@__0019H		Near   _TEXT16:264E		   4739	 #4822
@__0020H		Near   _TEXT16:27AE		   4741	 #4951
@__09H			Near   _TEXT16:19A1		   3215	 #3334
@__1AH			Near   _TEXT16:19E8		   3218	 #3363
@__1BH			Near   _TEXT16:1A1B		   3220	 #3386
@__1CH			Near   _TEXT16:1A1B		   3222	 #3387
@__1FH			Near   _TEXT16:1A4E		   3224	 #3420
@__25H			Near   _TEXT16:1A75		   3227	 #3439
@__2FH			Near   _TEXT16:1A85		   3230	 #3453
@__31H			Near   _TEXT16:1A9C		   3232	 #3466
@__32H			Near   _TEXT16:1A4E		   3234	 #3421
@__34H			Near   _TEXT16:1AC4		   3236	 #3496
@__35H			Near   _TEXT16:1AE0		   3239	 #3511
@__39H			Near   _TEXT16:1AF5		   3242	 3299  #3525
@__3AH			Near   _TEXT16:1AF5		   3244	 3301  #3526
@__3BH			Near   _TEXT16:1AF5		   3246	 3303  #3527
@__3CH			Near   _TEXT16:1B05		   3249	 #3561
@__3DH			Near   _TEXT16:1B05		   3251	 #3562
@__3FH			Near   _TEXT16:1B15		   3253	 #3583
@__40H			Near   _TEXT16:1BF0		   3255	 #3651
@__41H			Near   _TEXT16:1AF5		   3257	 3305  #3528
@__42H			Near   _TEXT16:1CD2		   3259	 #3727
@__43H			Near   _TEXT16:1CE8		   3261	 3307  #3740
@__47H			Near   _TEXT16:1D01		   3264	 3309  #3755
@__48H			Near   _TEXT16:1D5B		   3267	 #3788
@__49H			Near   _TEXT16:1D88		   3269	 #3807
@__4AH			Near   _TEXT16:1DAA		   3271	 #3824
@__4BH			Near   _TEXT16:1DCC		   3274	 #3843
@__4CH			Near   _TEXT16:1F26		   3276	 3324  #3959
@__4EH			Near   _TEXT16:1FA7		   3279	 #4020
@__4FH			Near   _TEXT16:1FD9		   3281	 #4039
@__51H			Near   _TEXT16:202A		   3283	 #4064
@__56H			Near   _TEXT16:203A		   3285	 3311  #4077
@__5AH			Near   _TEXT16:1AF5		   3287	 #3529
@__5BH			Near   _TEXT16:1AF5		   3289	 #3530
@__62H			Near   _TEXT16:20B6		   3291	 #4143
@__ALL			Near   _TEXT16:2516		   3387	 3421  3496  3727  4045	 4489  4508  #4644
@__CPY			Near   _TEXT16:24B1		   #4617  4638
@__ERR			Near   _TEXT16:2587		   3443	 3534  3565  3623  3690	 3729  3743  3779  3798	 3813  3832  3844 +
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 135
Symbol Table



							   3847	 3944  3950  4030  4055	 4191  4227  4466  4504	 4506  4509  4528 +
							   4542	 4544  4553  4566  4578	 4591  4604  4664  #4669
@__EXI			Near   _TEXT16:257D		   4307	 4330  4355  4388  #4666
@__FFH			Near   _TEXT16:21AC		   3294	 #4240
@__GO21			Near   _TEXT16:1991		   3297	 #3317	4281
@__OK			Near   _TEXT16:257B		   2878	 2908  3137  3154  3157	 3354  3374  3398  3430	 3444  3457  3477 +
							   3502	 3516  3532  3564  3620	 3687  3731  3745  3775	 3793  3815  3827 +
							   3945	 4028  4053  4067  4146	 4187  4229  4285  4373	 4399  4426  4443 +
							   4467	 4492  4513  4529  4554	 4579  4593  4611  #4665  4776	4787  4803+
							   4814	 4827  4920  4944  4958
@__STD			Near   _TEXT16:24E4		   3531	 3562  3740  4020  #4632
@__TST			Near   _TEXT16:2560		   4115	 #4660
ALLOC_BLOCK		Near   _TEXT16:2C57		   5145	 #5419	5769
ALLOC_DOS_MEM		Near   _TEXT16:2CE2		   5446	 5459  5469  #5484
ALLOC_DPMI_MEM		Near   _TEXT16:2D27		   5449	 5462  5476  #5504
APPLY_FIXUPS		Near   _TEXT16:2ACB		   5226	 5248  #5259
APP_MAXOBJECTS		Number 0040			   #5011  5077	6455
A_ERR1			Byte   _TEXT16:3874		   6313	 #6604
A_ERR2			Byte   _TEXT16:3899		   6313	 6313  #6610
A_ERR3			Byte   _TEXT16:38B8		   6313	 #6615
A_ERR4			Byte   _TEXT16:38E9		   6313	 6313  #6622
BEEP			Near   _TEXT16:123C		   2284	 2494  2496  #2501
BPTR			Text   byte ptr			   #105
BREAK_POINT		Near   _TEXT16:0F5C		   2082	 #2220
BRKPNT_COMMON		Near   _TEXT16:0F65		   2212	 2219  #2224
CFG_ENV_DOSBUF		Near   _TEXT16:01D4		   #571	 6275
CFG_ENV_EXTMEM		Near   _TEXT16:01A4		   #541	 6274
CFG_ENV_NOC		Near   _TEXT16:0267		   #672	 6281
CFG_ENV_NOWARN		Near   _TEXT16:0247		   #652	 664  6280
CFG_ENV_NULLP		Near   _TEXT16:021F		   #624	 6278
CFG_ENV_PRINT		Near   _TEXT16:017B		   #513	 6272
CFG_ENV_QUIET		Near   _TEXT16:0174		   #500	 6271
CFG_ENV_RESTORE		Near   _TEXT16:020B		   #610	 6277
CFG_ENV_SOUND		Near   _TEXT16:0190		   #527	 6273
CFG_ENV_TEST		Near   _TEXT16:01F1		   #590	 6276
CFG_ENV_VERBOSE		Near   _TEXT16:0233		   #638	 6279
CHECK_COMMAND_LINE	Near   _TEXT16:0855		   #1414  1444	1453  6036
CHECK_FAULTSEL		Near   _TEXT16:11FB		   2128	 2232  #2468  2606
CHECK_IF_FULLNAME	Near   _TEXT16:089B		   #1451  1476
CHECK_INTTAB		Near   _TEXT16:055A		   #1117  3997
CHECK_RANGE		Near   _TEXT16:2BE4		   5340	 5344  5351  #5358
CHECK_SYSTEM		Near   _TEXT16:3379		   6031	 #6164
CLOSE_EXEC		Near   _TEXT16:0BC5		   #1783  5053	6044  6049  6072
COMMON_ERROR		Near   _TEXT16:04A7		   986	#990
COPYRIGHT		Near   _TEXT16:02F7		   #788	 5952
CPR_END			Byte   _TEXT16:35FD		   807	#6479
CPR_MSG			Byte   _TEXT16:359B		   793	807  #6460
CR			Text   0Dh, 0Ah			   #102	 6471  6472  6813  6843
CRE			Text   0Dh, 0Ah	,0		   #103	 834  6783  6799  6804	6830  6845  6864  6872	6881  6898  6913  +
							   6923	 6932  6941  6967
CREATE_NEW_ENVIRONMENT	Near   _TEXT16:095F		   1533	 #1543
CREATE_SELECTOR		Near   _TEXT16:2DBB		   5034	 #5549
CRITICAL_HANDLER	Near   _TEXT16:0D1C		   #1979  6011
CRITICAL_HANDLER_START	Near   _TEXT16:0D2D		   1983	 #1987
DBGMSG1			Byte   _TEXT16:3F6B		   2762	 #6903
DBGMSG2			Byte   _TEXT16:3F81		   2774	 #6907
DBGMSG4			Byte   _TEXT16:3FAA		   2347	 2670  #6913
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 136
Symbol Table



DBGMSG5			Byte   _TEXT16:3FEA		   2356	 2678  #6923
DBGMSG6			Byte   _TEXT16:4024		   2365	 2686  #6932
DBGMSG7			Byte   _TEXT16:405E		   2374	 2694  #6941
DBGMSGA			Byte   _TEXT16:4098		   2331	 2417  2655  #6950
DBGMSGB			Byte   _TEXT16:40A9		   2405	 #6953
DECOMPRESS		Near   _TEXT16:3047		   4368	 #5857
DECOMPRESS_DATA		Near   _TEXT16:3044		   5785	 5831  #5854
DF1_STR			Byte   _TEXT16:3648		   6271	 #6495
DF2_STR			Byte   _TEXT16:364D		   6272	 #6496
DF3_STR			Byte   _TEXT16:3652		   6273	 #6497
DF4_STR			Byte   _TEXT16:3657		   6274	 #6498
DF5_STR			Byte   _TEXT16:365D		   6275	 #6499
DF6_STR			Byte   _TEXT16:3663		   6276	 #6500
DF8_STR			Byte   _TEXT16:366A		   6277	 #6501
DF9_STR			Byte   _TEXT16:3671		   6278	 #6502
DFA_STR			Byte   _TEXT16:3676		   6279	 #6503
DFB_STR			Byte   _TEXT16:367D		   6280	 #6504
DFC_STR			Byte   _TEXT16:3683		   6281	 #6505
DFN_TAB			Word   _TEXT16:3402		   384	387  395  396  #6271
DOS_ERROR		Near   _TEXT16:049A		   #983
DOS_STR			Byte   _TEXT16:3641		   364	#6494
DPMI_ERROR		Near   _TEXT16:04A2		   #987	 1215  1272  5573  6153
DPTR			Text   dword ptr		   #107
D_ERR0			Byte   _TEXT16:3688		   6308	 #6515
D_ERR1			Byte   _TEXT16:36B1		   6308	 #6521
D_ERR2			Byte   _TEXT16:36EA		   6308	 #6530
D_ERR3			Byte   _TEXT16:3723		   6308	 #6539
D_ERR4			Byte   _TEXT16:3759		   6308	 #6547
D_ERR5			Byte   _TEXT16:3778		   6310	 #6552
D_ERR6			Byte   _TEXT16:379D		   6310	 #6558
D_ERR7			Byte   _TEXT16:37C1		   6310	 #6564
ENTER_32BIT_CODE	Near   _TEXT16:3295		   5056	 #6080
ERRMSG1			Byte   _TEXT16:35FD		   6306	 #6481
ERRMSG2			Byte   _TEXT16:3612		   6306	 #6484
ERRMSG3			Byte   _TEXT16:3629		   2090	 2583  6306  #6488
ERRTAB_00XX		Word   _TEXT16:346E		   6289	 #6308
ERRTAB_10XX		Word   _TEXT16:347E		   6291	 #6311
ERRTAB_20XX		Word   _TEXT16:3484		   6293	 #6312
ERRTAB_30XX		Word   _TEXT16:348A		   6295	 #6313
ERRTAB_40XX		Word   _TEXT16:3498		   6297	 #6316
ERRTAB_60XX		Word   _TEXT16:34A8		   6299	 #6319
ERRTAB_80XX		Word   _TEXT16:34B4		   6301	 #6321
ERRTAB_90XX		Word   _TEXT16:34BC		   660	6303  #6323
EXCMSG1			Byte   _TEXT16:3DE4		   2118	 2596  #6843
EXCMSG2			Byte   _TEXT16:3E0C		   2138	 2616  #6849
EXCMSG3			Byte   _TEXT16:3E29		   2133	 2611  #6854
EXCMSG4			Byte   _TEXT16:3E4B		   2145	 2623  #6859
EXCMSG5			Byte   _TEXT16:3E6D		   2211	 #6864
EXCMSG6			Byte   _TEXT16:3EA4		   2223	 #6872
EXCMSG7			Byte   _TEXT16:3F16		   2250	 #6890
EXCMSGA			Byte   _TEXT16:3F35		   2243	 #6895
EXCMSGB			Byte   _TEXT16:3F3C		   1902	 2238  #6896
EXCMSGC			Byte   _TEXT16:3F48		   2152	 2630  #6898
EXCMSGE			Byte   _TEXT16:3DB2		   2103	 2595  #6835
EXCMSGI			Byte   _TEXT16:3DBC		   2113	 #6837
EXCMSGS			Byte   _TEXT16:3DD1		   2114	 #6840
EXEC_TYPE		Text   0			   147	326  501  6466	7038
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 137
Symbol Table



EXIT386			Near   _TEXT16:04D0		   781	#1061  2160  2290  2720
EXIT86			Near   _TEXT16:04B2		   780	#1046
E_ERR0			Byte   _TEXT16:382A		   6312	 #6588
E_ERR1			Byte   _TEXT16:383E		   6312	 #6591
E_ERR2			Byte   _TEXT16:385C		   6312	 #6596
FILE_ERROR		Near   _TEXT16:048E		   #977	 1614  1678  1730  1760	 5074  5079  5356  5611	 5750  5754  5782 +
							   5816	 5829  6074
FILE_ERRORM		Near   _TEXT16:0494		   #980	 1629  1801  1818  5267	 5277  5285  5334  5371	 5451  5464  5471 +
							   5478
FILL_ZERO_PAGES		Near   _TEXT16:2C2E		   5149	 #5398	5772  5820  5866
FIX_1616PTR		Near   _TEXT16:2BC0		   #5343  5380
FIX_1632PTR		Near   _TEXT16:2BCD		   #5348  5383
FIX_16OFF		Near   _TEXT16:2B79		   #5318  5382
FIX_16SEL		Near   _TEXT16:2BB8		   #5339  5379
FIX_32OFF		Near   _TEXT16:2B7E		   #5321  5384
FIX_32SELFREL		Near   _TEXT16:2B87		   #5325  5385
FIX_BYTE		Near   _TEXT16:2B74		   #5315  5377
FIX_INVALID		Near   _TEXT16:2BDE		   #5354  5378	5381
FIX_TAB			Word   _TEXT16:2C1C		   5305	 #5376
GETBYTE			Near   _TEXT16:30EC		   5876	 5886  5891  5894  #5917
GET_DEFAULT_CONFIG	Near   _TEXT16:0000		   #291	 5950
GET_ENVIRON_CONFIG	Near   _TEXT16:0074		   #353	 5951
GET_ENV_NUM		Near   _TEXT16:0139		   #459	 542  572  653
GET_ENV_SWC		Near   _TEXT16:0105		   #429	 514  528  591	611  625  639
GET_ENV_WORD		Near   _TEXT16:00B9		   375	#382
G_ERRTAB		Byte   _TEXT16:3446		   736	743  749  757  #6288
H_ERRTAB		Word   _TEXT16:3468		   753	#6306
INITIALIZE_MOUSE	Near   _TEXT16:0684		   #1242  6114
INIT_SYSTEM		Near   _TEXT16:32D3		   6025	 #6107
INSTALL_CLIENT_INTS	Near   _TEXT16:06F1		   #1281  3931	6152
INSTALL_NULLPTR_PROTEC	Near   _TEXT16:07E6		   #1367  6083
T
INT10H			Near   _TEXT16:0609		   #1193  2869	2914  2939  2969  3027	3054  3100  3102  3122
INT21H			Near   _TEXT16:0617		   967	#1201  1237  3352  3372	 3474  3603  3630  3678	 3705  3762  3930 +
							   4114	 4175  4221  4297  4525	 4550  4631  4650  5495
INT33H			Near   _TEXT16:0610		   #1197  4774	4849  4914  4942  4955
INTTABSIZE		Number 0040			   #47	5955
INTXXH			Near   _TEXT16:061B		   1195	 1199  #1204
I_MSG			Word   _TEXT16:34CA		   2100	 2593  #6327
I_MSG00			Byte   _TEXT16:4162		   6327	 #6988
I_MSG01			Byte   _TEXT16:417B		   6327	 #6992
I_MSG02			Byte   _TEXT16:418F		   6327	 #6995
I_MSG03			Byte   _TEXT16:4193		   6327	 #6996
I_MSG04			Byte   _TEXT16:41A7		   6329	 #6999
I_MSG05			Byte   _TEXT16:41BC		   6329	 #7002
I_MSG06			Byte   _TEXT16:41CF		   6329	 #7005
I_MSG07			Byte   _TEXT16:41E4		   6329	 #7008
I_MSG08			Byte   _TEXT16:41FE		   6331	 #7012
I_MSG09			Byte   _TEXT16:420B		   6331	 #7014
I_MSG0A			Byte   _TEXT16:4227		   6331	 #7018
I_MSG0B			Byte   _TEXT16:4239		   6331	 #7021
I_MSG0C			Byte   _TEXT16:4253		   6333	 #7025
I_MSG0D			Byte   _TEXT16:425F		   6333	 #7027
I_MSG0E			Byte   _TEXT16:4278		   6333	 #7031
LC_SPECVER		Number 0004			   #5729  5748
LOAD_APPLICATION	Near   _TEXT16:27E2		   5018	 5022  #5029
LOAD_BOUND_APP		Near   _TEXT16:3253		   6041	 #6056
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 138
Symbol Table



LOAD_EXEC_HEADER	Near   _TEXT16:09F2		   #1623  6035
LOAD_EXTRN_APP		Near   _TEXT16:323F		   6043	 #6048
LOAD_EXTRN_EXEC_HEADER	Near   _TEXT16:0A8B		   #1683  6051
LOAD_FS_BLOCK		Near   _TEXT16:0BF3		   1627	 1687  1726  #1806  5068  5134	5209  5734  5764  5807	6061
LOAD_GS_BLOCK		Near   _TEXT16:0BFB		   1757	 #1810	5172  5619  5790  5835	5855
LOAD_HEADER		Near   _TEXT16:2833		   5030	 #5061
LOAD_LC_APP		Near   _TEXT16:27DC		   #5024  6071
LOAD_LC_HEADER		Near   _TEXT16:2EDC		   5066	 #5732
LOAD_LC_OBJECT		Near   _TEXT16:2F2B		   5127	 #5760
LOAD_LE_APP		Near   _TEXT16:27CA		   #5016  6067
LOAD_LX_APP		Near   _TEXT16:27D3		   #5020  6069
LOAD_OBJECT		Near   _TEXT16:2908		   5033	 #5124
L_ERR1			Byte   _TEXT16:3910		   6316	 #6632
L_ERR2			Byte   _TEXT16:393A		   6316	 #6638
L_ERR3			Byte   _TEXT16:396E		   6316	 #6646
L_ERR4			Byte   _TEXT16:39A7		   6316	 #6655
L_ERR5			Byte   _TEXT16:39DF		   6316	 #6663
L_ERR6			Byte   _TEXT16:3A10		   6316	 #6670
L_ERR7			Byte   _TEXT16:3A3E		   6316	 #6677
M_ERR1			Byte   _TEXT16:37DB		   6311	 #6572
M_ERR2			Byte   _TEXT16:3809		   6311	 #6579
NULL_PROTECT		Near   _TEXT16:0F4A		   2210	 #2213
NULMSG0			Byte   _TEXT16:3EDD		   2218	 #6881
N_MSG			Byte   _TEXT16:359A		   6311	 6313  6316  6319  6321	 6323  6333  #6459
OFFS			Alias  OFFSET			   #104	 316  364  792	793  807  807  826  832	 978  981  1267	 1285	  +
							   1289	 1293  1297  1306  1310	 1314  1318  1462  1486	 1498  1508  1536 +
							   1569	 1602  1643  1648  1656	 1829  1831  1854  1866	 1867  1885  1907 +
							   2090	 2103  2113  2114  2118	 2133  2138  2145  2152	 2154  2211  2218 +
							   2223	 2238  2243  2250  2327	 2331  2347  2356  2365	 2374  2378  2381 +
							   2384	 2387  2390  2393  2405	 2417  2460  2583  2595	 2596  2611  2616 +
							   2623	 2630  2632  2651  2655	 2670  2678  2686  2694	 2700  2703  2706 +
							   2709	 2712  2715  2735  2738	 2741  2743  2762  2774	 4347  4845  4875 +
							   6011	 6199  6200
OPEN_EXEC		Near   _TEXT16:09A0		   #1581  6034
OPEN_EXTRN_EXEC		Near   _TEXT16:0A1F		   #1639  6050
PM32_DATA		Byte   ----:---- Extern		   #60	316  550  551  561  597	 600  4347
PM32_INFO		Far    ----:---- Extern		   #58	5974
PM32_INIT		Far    ----:---- Extern		   #59	6012
PRELOAD_FIXUPS		Near   _TEXT16:2E58		   5043	 #5598
PRELOAD_LC_FIXUPS	Near   _TEXT16:2FB6		   5600	 #5803
PRINTC			Near   _TEXT16:0331		   #824	 2287  2291  2299  2728
PRINTCR			Near   _TEXT16:033F		   769	#831  2149  2288  2292	2300  2333  2407  2419	2626  2657  2745
PRINTS			Near   _TEXT16:0348		   765	768  827  #835	1855  1868  1886  1908	2092  2119  2139  2146	  +
							   2155	 2247  2251  2329  2332	 2348  2357  2366  2375	 2401  2406  2418 +
							   2461	 2585  2597  2617  2624	 2633  2653  2656  2671	 2679  2687  2695 +
							   2744	 2763  2775  4424
RELOCATE_LE_OBJECT	Near   _TEXT16:29F0		   #5199
RELOCATE_LX_OBJECT	Near   _TEXT16:2A73		   5197	 #5233
RELOCATE_OBJECT		Near   _TEXT16:29D9		   5049	 #5191
REMOVE_KERNEL		Near   _TEXT16:33C3		   5984	 #6191
REMOVE_NAME_FROM_CMD	Near   _TEXT16:088F		   #1443  6053
REPORT_ERROR		Near   _TEXT16:0271		   #728	 979  994  1139	 1278  1541  1577  1617	 2201  5438  5965  5967	  +
							   5976	 6013  6046  6170  6176	 6186
REPORT_ERRORM		Near   _TEXT16:026D		   #726	 982
RESTORE_INTTAB		Near   _TEXT16:0514		   #1090  2087	2170  3998
RESTORE_PIT		Near   _TEXT16:059F		   #1144  2085	2168  2286  2579  6159
R_MSG80			Byte   _TEXT16:3BD1		   6319	 #6751
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 139
Symbol Table



R_MSG81			Byte   _TEXT16:3BEB		   6319	 #6755
R_MSG82			Byte   _TEXT16:3C0B		   6319	 #6760
R_MSG83			Byte   _TEXT16:3C30		   6319	 #6766
R_MSG84			Byte   _TEXT16:3C61		   6319	 #6773
SAVE_INTTAB		Near   _TEXT16:04EB		   #1073  6026
SCR_ON			Near   _TEXT16:1272		   2088	 2171  2215  2222  #2530  2581
SEARCH_FOR_LE		Near   _TEXT16:0B7C		   1694	 1740  #1754
SEARCH_FOR_MZ		Near   _TEXT16:0AD4		   1697	 1700  #1705
SEEK_FROM_START		Near   _TEXT16:0BCF		   1688	 1723  1739  #1791  5131  5138	5204  5616  6058
SELMSG0			Byte   _TEXT16:40F9		   2460	 #6967
SELMSG1			Byte   _TEXT16:40B7		   2327	 2378  2651  2700  #6955
SELMSG2			Byte   _TEXT16:40C2		   2381	 2703  #6957
SELMSG3			Byte   _TEXT16:40CD		   2384	 2706  #6959
SELMSG4			Byte   _TEXT16:40D8		   2387	 2709  #6961
SELMSG5			Byte   _TEXT16:40E3		   2390	 2712  #6963
SELMSG6			Byte   _TEXT16:40EE		   2393	 2715  #6965
SELMSG8			Byte   _TEXT16:4138		   2439	 #6977
SELMSG9			Byte   _TEXT16:412E		   2446	 #6975
SELMSGW			Byte   _TEXT16:415A		   2743	 #6985
SELMSGX			Byte   _TEXT16:4142		   2735	 #6979
SELMSGY			Byte   _TEXT16:414A		   2738	 #6981
SELMSGZ			Byte   _TEXT16:4152		   2741	 #6983
SETUP_DTA_BUFFER	Near   _TEXT16:0641		   #1220  6113
SETUP_SELECTORS		Near   _TEXT16:081B		   #1386  6112
SET_DESCRIPTOR		Near   _TEXT16:05AC		   #1155  1396	4590  5572
SHOW_SELECTOR		Near   _TEXT16:1155		   2380	 2383  2386  2389  2392	 2395  #2399  2702  2705  2708	2711  2714+
							   2717
SHOW_STATUS		Near   _TEXT16:1040		   2158	 2249  #2312
SHOW_STATUSX		Near   _TEXT16:137B		   2629	 #2636
SKIP_ENV_NONSPACES	Near   _TEXT16:00F1		   376	#411
SKIP_ENV_SPACES		Near   _TEXT16:00DD		   372	#398
STACKSIZE		Number 0080			   #46	1051  1076  1102  1126	1268  2259  5955  7052
START			Near   _TEXT16:3104		   978	981  1462  1482	 1483  1486  1498  1508	 1536  1569  1602  1643	  +
							   1648	 1656  1866  2154  2632	 4384  #5940  7054
STRSIZE			Number 0100			   #823	 840  856
TONE			Near   _TEXT16:1228		   2086	 2169  2214  2221  #2491  2580
TRAP_POINT		Near   _TEXT16:0F3B		   2080	 #2207
UNINSTALL_CLIENT_INTS	Near   _TEXT16:075C		   #1324  3929	3999
UNLOAD_FIXUPS		Near   _TEXT16:2EBD		   5052	 #5630
UNLOAD_LC_FIXUPS	Near   _TEXT16:3039		   5632	 #5841
UPDATE_ENVIRONMENT	Near   _TEXT16:08C2		   #1474  6052
VERBOSE_GETMEM		Near   _TEXT16:0C10		   #1823  1845	1897
VERBOSE_SHOWLOADHDR	Near   _TEXT16:0C70		   #1859  5031
VERBOSE_SHOWLOADOBJ	Near   _TEXT16:0C97		   #1872  5035
VERBOSE_SHOWSTARTUP	Near   _TEXT16:0CC2		   #1891  5055
VERBOSE_SHOWSYS		Near   _TEXT16:0C3D		   #1842  6027
VER_MSG			Byte   _TEXT16:35C7		   792	#6471
V_MSG01			Byte   _TEXT16:3C80		   1854	 #6783
V_MSG02			Byte   _TEXT16:3CB9		   1847	 #6792
V_MSG03			Byte   _TEXT16:3CCD		   1863	 #6795
V_MSG04			Byte   _TEXT16:3CD6		   1829	 #6797
V_MSG05			Byte   _TEXT16:3CD9		   1831	 #6798
V_MSG10			Byte   _TEXT16:3CDC		   1867	 #6799
V_MSG11			Byte   _TEXT16:3CFD		   1885	 #6804
V_MSG12			Byte   _TEXT16:3D39		   1907	 #6813
WIN_FOCUS_VM		Near   _TEXT16:0D0A		   #1913  6154
WPTR			Text   word ptr			   #106
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 140
Symbol Table



WRITES			Near   _TEXT16:044E		   855	#946
W_MSG1			Byte   _TEXT16:3AD8		   6323	 #6709
W_MSG2			Byte   _TEXT16:3AFE		   6323	 #6715
W_MSG3			Byte   _TEXT16:3B2B		   6323	 #6722
W_MSG4			Byte   _TEXT16:3B61		   6323	 #6730
W_MSG5			Byte   _TEXT16:3B7D		   6323	 #6734
W_MSG6			Byte   _TEXT16:3BA1		   6323	 #6740
X_ERR1			Byte   _TEXT16:3A78		   6321	 #6690
X_ERR2			Byte   _TEXT16:3A98		   6321	 #6695
X_ERR3			Byte   _TEXT16:3AB5		   6321	 #6700
_ACC_RIGHTS		Word   _TEXT16:34FA		   1395	 5554  #6359
_APP_BUF_ALLOCBASE	Number _TEXT16:00F4		   2479	 5579  #6455
_APP_BUF_ALLOCSEL	Number _TEXT16:0074		   2473	 3992  4385  5577  #6454
_APP_BUF_FIXRECSTAB	Number _TEXT16:36D0		   5612	 5634  5783  5787  5819	 5843  #6441
_APP_DTA_OFF		Dword  _TEXT16:3556		   1234	 3365  3455  4025  4040	 4050  #6398
_APP_DTA_SEL		Word   _TEXT16:3554		   1231	 3364  3453  4024  4039	 4049  #6397
_APP_EIP		Number _TEXT16:36BC		   1898	 1905  5102  5588  5743	 6087  #6436
_APP_EIP_OBJECT		Number _TEXT16:36B4		   1901	 5098  5582  5739  #6434
_APP_ESP		Number _TEXT16:36C0		   1903	 5104  5594  5745  6085	 6109  #6437
_APP_ESP_OBJECT		Number _TEXT16:36B8		   5100	 5590  5741  #6435
_APP_LOAD		Number _TEXT16:36E9		   5603	 5607  5636  5859  5919	 5921  #6452
_APP_NUM_OBJECTS	Number _TEXT16:3698		   2471	 3989  5041  5045  5080	 5160  5737  6110  #6425
_APP_OFF_DATAPAGES	Number _TEXT16:36AC		   1692	 1751  5095  5137  5181	 6111  #6431
_APP_OFF_FIXPAGETAB	Number _TEXT16:36A4		   5090	 5214  5235  5615  5622	 5625  5836  #6429
_APP_OFF_FIXRECTAB	Number _TEXT16:36A8		   5093	 5220  5242  5621  5626	 5838  #6430
_APP_OFF_OBJECTS	Number _TEXT16:369C		   5084	 5130  5135  #6426
_APP_OFF_OBJPAGETAB	Number _TEXT16:36A0		   5087	 5201  #6428
_APP_OFF_PAGESHIFT	Number _TEXT16:36B0		   5118	 5174  #6432
_APP_SIZ_FIXRECSTAB	Number _TEXT16:36CC		   5106	 5602  5618  #6440
_APP_SIZ_LASTPAGE	Number _TEXT16:36D4		   5108	 5166  #6442
_APP_TMP_ADDR1		Number _TEXT16:3690		   5048	 5275  5860  5917  5920	 #6422
_APP_TMP_ADDR2		Number _TEXT16:3694		   4369	 5278  5363  5368  5861	 5883  5922  #6423
_APP_TYPE		Number _TEXT16:36E8		   1862	 5017  5021  5025  5065	 5111  5126  5162  5196	 5599  5631  #6451
_BUF_SIZE		Word   _TEXT16:34F4		   3470	 5981  #6349
_CODESIZE		Alias  _APP_TMP_ADDR2		   4369	 5861  5883  5922  #5932
_CPU_TYPE		Byte   _TEXT16:34F0		   1850	 4351  5982  #6346
_CTRL_C			Near   _TEXT16:199B		   3209	 #3323
_DTA_OFF		Dword  _TEXT16:3550		   1233	 4023  4042  4048  #6396
_DTA_SEL		Word   _TEXT16:354E		   1230	 4022  4041  4047  #6395
_ERR_CODE		Word   _TEXT16:34F8		   727	1626  1686  5064  5129	5171  5203  5208  5261	5304  5448  5458  +
							   5461	 5468  5475  5614  5763	 5773  5806  6057  #6358
_EXC00			Near   _TEXT16:1294		   1306	 #2551
_EXC00_CS		Dword  _TEXT16:357E		   1348	 6137  #6411
_EXC00_IP		Dword  _TEXT16:357A		   1349	 6138  #6410
_EXC06			Near   _TEXT16:1299		   1310	 #2553
_EXC06_CS		Dword  _TEXT16:3586		   1352	 6141  #6413
_EXC06_IP		Dword  _TEXT16:3582		   1353	 6142  #6412
_EXC0D			Near   _TEXT16:129E		   1314	 #2555
_EXC0D_CS		Dword  _TEXT16:358E		   1356	 6145  #6415
_EXC0D_IP		Dword  _TEXT16:358A		   1357	 6146  #6414
_EXC0E			Near   _TEXT16:12A3		   1318	 #2557
_EXC0E_CS		Dword  _TEXT16:3596		   1360	 6149  #6417
_EXC0E_IP		Dword  _TEXT16:3592		   1361	 6150  #6416
_EXC_COMMON		Near   _TEXT16:12A5		   2552	 2554  2556  #2560
_EXEC_HANDLE		Number _TEXT16:3688		   1612	 1653  1676  1784  1796	 1814  #6420
_EXEC_START		Number _TEXT16:368C		   1632	 1691  1701  1750  5069	 6039  6054  #6421
_IC_BYTE		Alias  _INT_NUMBER		   5767	 5777  5811  5823  #5929
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 141
Symbol Table



_ID32_SIZE		Number 0010			   #116	 323
_INT10			Near   _TEXT16:151B		   1285	 #2827
_INT10_CS		Dword  _TEXT16:355E		   1327	 6119  #6402
_INT10_IP		Dword  _TEXT16:355A		   1328	 2849  2903  6120  #6401
_INT21			Near   _TEXT16:184F		   1289	 #3207
_INT21_CS		Dword  _TEXT16:3566		   1331	 6123  #6404
_INT21_IP		Dword  _TEXT16:3562		   1332	 3320  4010  6124  #6403
_INT23			Near   _TEXT16:05FA		   #1186  1297
_INT23_CS		Dword  _TEXT16:3576		   1339	 6131  #6408
_INT23_IP		Dword  _TEXT16:3572		   1340	 6132  #6407
_INT33			Near   _TEXT16:2593		   1276	 1293  #4722
_INT33_CS		Dword  _TEXT16:356E		   1335	 6127  #6406
_INT33_IP		Dword  _TEXT16:356A		   1336	 4746  6128  #6405
_INT_ERRAVAIL		Number _TEXT16:36E6		   2031	 2037  2142  #6449
_INT_ERRCODE		Number _TEXT16:36DC		   2030	 2144  #6446
_INT_ESP		Number _TEXT16:36E0		   2058	 2294  2302  4420  4425	 #6447
_INT_NUMBER		Number _TEXT16:36D8		   2000	 2078  2200  2343  5767	 5777  5811  5823  #6444
_INT_SS			Number _TEXT16:36E4		   2057	 4419  #6448
_INT_TEMP		Number _TEXT16:36DA		   1991	 2052  #6445
_LOBUFBASE		Dword  _TEXT16:3542		   2871	 2915  2930  2970  3028	 3044  3096  3103  3346	 3608  3635  3670 +
							   3698	 3769  3855  3866  3902	 4090  4094  4164  4178	 4216  4410  4626 +
							   4916	 4939  5864  6001  #6392
_LOBUFSIZE		Dword  _TEXT16:3546		   1259	 1756  3592  3599  3601	 3658  3665  3667  3845	 4326  4397  5752 +
							   5863	 6008  #6393
_LOBUFZERO		Dword  _TEXT16:353E		   1755	 2996  5865  6002  #6391
_LOWMEMBUF		Word   _TEXT16:353C		   334	582  5957  6006	 #6390
_MEMBASE		Word   _TEXT16:353A		   3469	 5958  5986  5991  6009	 6214  #6389
_MISC_BYTE		Byte   _TEXT16:34EC		   332	502  517  519  531  533	 614  616  628	630  745  1091	1118  1370+
							   2501	 2531  4327  4386  5423	 #6343
_MISC_BYTE2		Byte   _TEXT16:34ED		   356	642  644  673  789  1843  1860	1873  1892  1914  2150	2628  5513+
							   5520	 5534  #6344
_MUS_BACKOFF		Word   _TEXT16:3500		   1273	 3981  4860  #6361
_MUS_BACKSEG		Word   _TEXT16:3502		   1274	 3982  #6362
_MUS_DATA		Byte   _TEXT16:350C		   4856	 4857  4895  #6365
_MUS_INT_DEF		Near   _TEXT16:2666		   4786	 4800  4812  #4832
_MUS_INT_PM		Near   _TEXT16:26C4		   1267	 #4863
_MUS_INT_RM		Near   _TEXT16:26AD		   4845	 #4855
_MUS_OFF		Dword  _TEXT16:3504		   4799	 4824  4839  4889  #6363
_MUS_SEL		Dword  _TEXT16:3508		   4798	 4823  4840  #6364
_MUS_SIZE		Dword  _TEXT16:34FC		   1261	 4917  4940  #6360
_PIC_MASK		Word   _TEXT16:34F6		   1086	 1108  1995  #6357
_PROCESS_ID		Word   _TEXT16:3530		   2153	 2631  6023  6157  #6384
_SEG_BUF		Word   _TEXT16:3516		   2866	 2966  2994  3084  3147	 3349  3594  3625  3660	 3692  3759  3904 +
							   3917	 4109  4170  4212  4628	 4911  4935  5956  5996	 6213  #6371
_SEG_DS			Word   _TEXT16:350E		   309	325  732  1048	4844  4874  5943  5998	6003  6211  #6367
_SEG_DS_BASE		Dword  _TEXT16:354A		   5221	 5243  6005  #6394
_SEG_DTA		Word   _TEXT16:3518		   1225	 3369  #6372
_SEG_ENV		Word   _TEXT16:3514		   358	1052  1894  5947  #6370
_SEG_ES			Word   _TEXT16:3510		   1049	 3471  3907  4064  5944	 5969  5992  #6368
_SEG_ID32		Word   _TEXT16:351C		   295	305  4320  #6374
_SEG_KERNEL		Word   _TEXT16:351E		   296	545  594  4344	6198  #6375
_SEG_MUS		Word   _TEXT16:351A		   1228	 4764  #6373
_SEG_SS			Word   _TEXT16:3512		   965	1050  1223  5945  6212	#6369
_SEL32_CS		Word   _TEXT16:3532		   1906	 2740  5564  5584  6086	 #6386
_SEL32_SS		Word   _TEXT16:3536		   1904	 5566  5592  6084  6090	 #6387
_SEL_CS			Word   _TEXT16:3520		   778	955  2737  6016	 #6377
_SEL_DS			Word   _TEXT16:3522		   730	734  1063  1187	 1990  2339  2577  2663	 2865  2965  3083  3146	  +
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 142
Symbol Table



							   3345	 3363  3585  3651  3768	 3854  3868  3901  3916	 3961  4089  4107 +
							   4163	 4215  4282  4367  4383	 4396  4409  4625  4837	 4915  4938  6017 +
							   #6378
_SEL_ENV		Word   _TEXT16:352E		   3965	 6022  #6383
_SEL_ES			Word   _TEXT16:3524		   1064	 1896  3962  4143  6018	 6088  #6379
_SEL_ESP		Dword  _TEXT16:3526		   992	1065  1984  2065  2165	2566  3963  4421  5054	6020  #6380
_SEL_SS			Word   _TEXT16:352A		   1078	 1104  1124  2060  2072	 2258  2410  6019  6032	 #6381
_SEL_ZERO		Word   _TEXT16:352C		   1077	 1103  1125  1244  1398	 3135  3396  3428  3500	 4002  4323  4348 +
							   4763	 6033  6089  #6382
_SRCADDR		Alias  _APP_TMP_ADDR1		   5860	 5917  5920  #5931
_SYS_MISC		Word   _TEXT16:34F2		   310	1188  3208  #6348
_SYS_TYPE		Byte   _TEXT16:34F1		   1094	 1301  1343  1368  1846	 3923  3932  3968  4352	 6155  6171  6192 +
							   #6347
_UNRELOC_EIP		Number _TEXT16:36C4		   1899	 5585  #6438
_UNRELOC_ESP		Number _TEXT16:36C8		   5593	 #6439
_VERSION		Word   _TEXT16:34EE		   336	791  4299  4324	 4349  6010  6167  #6345
_XC_BYTE		Alias  _APP_LOAD		   5859	 5919  5921  #5930

Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

_ID32			16  0080 Para	Public	CODE0	   #49	#115  293
_KERNEL			16  0000 Para	Public	CODE1	   #51	294  546  595
_STACK			16  0800 Para	Stack	STACK	   #55	#7051
_TEXT16			16  4284 Para	Public	CODE2	   #53	#237  238  238	562  601
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 143
Error Summary



**Error** TEXT\CLIENT\misc.asm(609) Undefined symbol: @AREA1_DW
**Error** TEXT\CLIENT\misc.asm(629) Undefined symbol: @AREA1_DD
**Error** TEXT\CLIENT\misc.asm(650) Undefined symbol: @AREA1_DW
**Error** TEXT\CLIENT\misc.asm(673) Undefined symbol: @AREA1_DW
**Error** TEXT\CLIENT\misc.asm(688) Undefined symbol: @AREA1_DD
**Error** TEXT\CLIENT\misc.asm(689) Undefined symbol: @AREA1_DD
**Error** TEXT\CLIENT\misc.asm(698) Undefined symbol: @AREA1_DD
**Error** TEXT\CLIENT\misc.asm(745) Undefined symbol: @AREA1_DD
**Error** TEXT\CLIENT\misc.asm(746) Undefined symbol: @AREA1_DD
**Error** TEXT\CLIENT\misc.asm(779) Undefined symbol: @AREA1_DW
**Error** TEXT\CLIENT\misc.asm(790) Undefined symbol: @AREA1_DW
**Error** TEXT\CLIENT\misc.asm(807) Undefined symbol: @AREA1_DW
**Error** TEXT\CLIENT\misc.asm(854) Undefined symbol: @AREA1_DB
*Warning* TEXT\CLIENT\misc.asm(854) Argument needs type	override
**Error** TEXT\CLIENT\misc.asm(889) Undefined symbol: @AREA1_DD
**Error** TEXT\CLIENT\misc.asm(890) Undefined symbol: @AREA1_DD
**Error** TEXT\CLIENT\misc.asm(892) Undefined symbol: @AREA1_DD
**Error** TEXT\CLIENT\misc.asm(894) Undefined symbol: @AREA1_DD
**Error** TEXT\CLIENT\misc.asm(896) Undefined symbol: @AREA1_DD
**Error** TEXT\CLIENT\debug.asm(66) Undefined symbol: @AREA1_DW
**Error** TEXT\CLIENT\debug.asm(75) Undefined symbol: @AREA1_DB
**Error** TEXT\CLIENT\debug.asm(105) Undefined symbol: @AREA1_DD
*Warning* TEXT\CLIENT\debug.asm(105) Argument needs type override
**Error** TEXT\CLIENT\debug.asm(105) Forward reference needs override
**Error** TEXT\CLIENT\debug.asm(106) Undefined symbol: @AREA1_DB
*Warning* TEXT\CLIENT\debug.asm(106) Argument needs type override
**Error** TEXT\CLIENT\debug.asm(112) Undefined symbol: @AREA1_DB
*Warning* TEXT\CLIENT\debug.asm(112) Argument needs type override
**Error** TEXT\CLIENT\debug.asm(127) Undefined symbol: @AREA1_DW
*Warning* TEXT\CLIENT\debug.asm(127) Argument needs type override
**Error** TEXT\CLIENT\debug.asm(132) Undefined symbol: @AREA1_DD
**Error** TEXT\CLIENT\debug.asm(133) Undefined symbol: @AREA1_DD
**Error** TEXT\CLIENT\debug.asm(153) Undefined symbol: @AREA1_DB
**Error** TEXT\CLIENT\debug.asm(217) Undefined symbol: @AREA1_DB
*Warning* TEXT\CLIENT\debug.asm(217) Argument needs type override
**Error** TEXT\CLIENT\debug.asm(219) Undefined symbol: @AREA1_DD
*Warning* TEXT\CLIENT\debug.asm(219) Argument needs type override
**Error** TEXT\CLIENT\debug.asm(219) Forward reference needs override
**Error** TEXT\CLIENT\debug.asm(274) Undefined symbol: @AREA1_DB
**Error** TEXT\CLIENT\debug.asm(368) Undefined symbol: @AREA1_DD
**Error** TEXT\CLIENT\debug.asm(376) Undefined symbol: @AREA1_DD
**Error** TEXT\CLIENT\debug.asm(417) Undefined symbol: @AREA1_DB
**Error** TEXT\CLIENT\debug.asm(543) Undefined symbol: @AREA1_DD
**Error** TEXT\CLIENT\int21h.asm(683) Forward reference	needs override
**Error** TEXT\CLIENT\int21h.asm(825) Undefined	symbol:	@AREA1_DD
**Error** TEXT\CLIENT\int21h.asm(1195) Undefined symbol: @AREA1_DD
**Error** TEXT\CLIENT\int21h.asm(1245) Undefined symbol: @AREA1_DD
**Error** TEXT\CLIENT\int21h.asm(1246) Undefined symbol: @AREA1_DD
**Error** TEXT\CLIENT\int21h.asm(1251) Undefined symbol: @AREA1_DD
**Error** loader.asm(53) Undefined symbol: @AREA1_DB
*Warning* loader.asm(53) Argument needs	type override
**Error** loader.asm(57) Undefined symbol: @AREA1_DB
*Warning* loader.asm(57) Argument needs	type override
**Error** loader.asm(61) Undefined symbol: @AREA1_DB
*Warning* loader.asm(61) Argument needs	type override
**Error** loader.asm(77) Undefined symbol: @AREA1_DD
**Error** loader.asm(81) Undefined symbol: @AREA1_DD
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 144
Error Summary



**Error** loader.asm(84) Undefined symbol: @AREA1_DD
**Error** loader.asm(101) Undefined symbol: @AREA1_DB
*Warning* loader.asm(101) Argument needs type override
**Error** loader.asm(105) Undefined symbol: @AREA1_DD
**Error** loader.asm(116) Undefined symbol: @AREA1_DD
**Error** loader.asm(120) Undefined symbol: @AREA1_DD
**Error** loader.asm(123) Undefined symbol: @AREA1_DD
**Error** loader.asm(126) Undefined symbol: @AREA1_DD
**Error** loader.asm(129) Undefined symbol: @AREA1_DD
**Error** loader.asm(131) Undefined symbol: @AREA1_DD
**Error** loader.asm(134) Undefined symbol: @AREA1_DD
**Error** loader.asm(136) Undefined symbol: @AREA1_DD
**Error** loader.asm(138) Undefined symbol: @AREA1_DD
**Error** loader.asm(140) Undefined symbol: @AREA1_DD
**Error** loader.asm(142) Undefined symbol: @AREA1_DD
**Error** loader.asm(144) Undefined symbol: @AREA1_DD
**Error** loader.asm(147) Undefined symbol: @AREA1_DB
*Warning* loader.asm(147) Argument needs type override
**Error** loader.asm(154) Undefined symbol: @AREA1_DD
**Error** loader.asm(162) Undefined symbol: @AREA1_DB
*Warning* loader.asm(162) Argument needs type override
**Error** loader.asm(166) Undefined symbol: @AREA1_DD
**Error** loader.asm(171) Undefined symbol: @AREA1_DD
**Error** loader.asm(173) Undefined symbol: @AREA1_DD
**Error** loader.asm(196) Undefined symbol: @AREA1_DD
**Error** loader.asm(198) Undefined symbol: @AREA1_DB
*Warning* loader.asm(198) Argument needs type override
**Error** loader.asm(202) Undefined symbol: @AREA1_DD
**Error** loader.asm(210) Undefined symbol: @AREA1_DD
**Error** loader.asm(217) Undefined symbol: @AREA1_DD
**Error** loader.asm(232) Undefined symbol: @AREA1_DB
*Warning* loader.asm(232) Argument needs type override
**Error** loader.asm(237) Undefined symbol: @AREA1_DD
**Error** loader.asm(250) Undefined symbol: @AREA1_DD
**Error** loader.asm(256) Undefined symbol: @AREA1_DD
**Error** loader.asm(271) Undefined symbol: @AREA1_DD
**Error** loader.asm(278) Undefined symbol: @AREA1_DD
**Error** loader.asm(311) Undefined symbol: @AREA1_DD
**Error** loader.asm(314) Undefined symbol: @AREA1_DD
**Error** loader.asm(398) Undefined symbol: @AREA1_DD
**Error** loader.asm(403) Undefined symbol: @AREA1_DD
**Error** loader.asm(610) Undefined symbol: @AREA1_DD
**Error** loader.asm(613) Undefined symbol: @AREA1_DD
**Error** loader.asm(616) Undefined symbol: @AREA1_DD
**Error** loader.asm(618) Undefined symbol: @AREA1_DD
**Error** loader.asm(621) Undefined symbol: @AREA1_DD
**Error** loader.asm(622) Undefined symbol: @AREA1_DD
**Error** loader.asm(627) Undefined symbol: @AREA1_DB
*Warning* loader.asm(627) Argument needs type override
**Error** loader.asm(630) Undefined symbol: @AREA1_DD
**Error** loader.asm(631) Undefined symbol: @AREA1_DB
*Warning* loader.asm(631) Argument needs type override
**Error** loader.asm(635) Undefined symbol: @AREA1_DB
*Warning* loader.asm(635) Argument needs type override
**Error** loader.asm(640) Undefined symbol: @AREA1_DD
**Error** loader.asm(643) Undefined symbol: @AREA1_DD
**Error** loader.asm(646) Undefined symbol: @AREA1_DD
Turbo Assembler	 Version 4.1	    12/05/21 16:31:40	    Page 145
Error Summary



**Error** loader.asm(649) Undefined symbol: @AREA1_DD
**Error** loader.asm(650) Undefined symbol: @AREA1_DD
**Error** loader.asm(653) Undefined symbol: @AREA1_DD
**Error** loader.asm(654) Undefined symbol: @AREA1_DD
**Error** loader.asm(659) Too many errors or warnings
